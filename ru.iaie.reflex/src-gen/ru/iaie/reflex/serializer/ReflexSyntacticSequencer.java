/*
 * generated by Xtext 2.20.0
 */
package ru.iaie.reflex.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import ru.iaie.reflex.services.ReflexGrammarAccess;

@SuppressWarnings("all")
public class ReflexSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ReflexGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Body_SemicolonKeyword_0_1_or___LeftCurlyBracketKeyword_1_1_RightCurlyBracketKeyword_1_3__;
	protected AbstractElementAlias match_CType_DOUBLE_C_TYPETerminalRuleCall_2_1_or_FLOAT_C_TYPETerminalRuleCall_1_1_or_INT_C_TYPETerminalRuleCall_3_2_1_or_LONG_C_TYPETerminalRuleCall_3_2_2_or_SHORT_C_TYPETerminalRuleCall_3_2_0_or_VOID_C_TYPETerminalRuleCall_0_1;
	protected AbstractElementAlias match_CType_INT_C_TYPETerminalRuleCall_3_2_1_or_LONG_C_TYPETerminalRuleCall_3_2_2_or_SHORT_C_TYPETerminalRuleCall_3_2_0;
	protected AbstractElementAlias match_Time_TKeyword_1_0_or_TKeyword_1_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ReflexGrammarAccess) access;
		match_Body_SemicolonKeyword_0_1_or___LeftCurlyBracketKeyword_1_1_RightCurlyBracketKeyword_1_3__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getBodyAccess().getLeftCurlyBracketKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getBodyAccess().getRightCurlyBracketKeyword_1_3())), new TokenAlias(false, false, grammarAccess.getBodyAccess().getSemicolonKeyword_0_1()));
		match_CType_DOUBLE_C_TYPETerminalRuleCall_2_1_or_FLOAT_C_TYPETerminalRuleCall_1_1_or_INT_C_TYPETerminalRuleCall_3_2_1_or_LONG_C_TYPETerminalRuleCall_3_2_2_or_SHORT_C_TYPETerminalRuleCall_3_2_0_or_VOID_C_TYPETerminalRuleCall_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCTypeAccess().getDOUBLE_C_TYPETerminalRuleCall_2_1()), new TokenAlias(false, false, grammarAccess.getCTypeAccess().getFLOAT_C_TYPETerminalRuleCall_1_1()), new TokenAlias(false, false, grammarAccess.getCTypeAccess().getINT_C_TYPETerminalRuleCall_3_2_1()), new TokenAlias(false, false, grammarAccess.getCTypeAccess().getLONG_C_TYPETerminalRuleCall_3_2_2()), new TokenAlias(false, false, grammarAccess.getCTypeAccess().getSHORT_C_TYPETerminalRuleCall_3_2_0()), new TokenAlias(false, false, grammarAccess.getCTypeAccess().getVOID_C_TYPETerminalRuleCall_0_1()));
		match_CType_INT_C_TYPETerminalRuleCall_3_2_1_or_LONG_C_TYPETerminalRuleCall_3_2_2_or_SHORT_C_TYPETerminalRuleCall_3_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCTypeAccess().getINT_C_TYPETerminalRuleCall_3_2_1()), new TokenAlias(false, false, grammarAccess.getCTypeAccess().getLONG_C_TYPETerminalRuleCall_3_2_2()), new TokenAlias(false, false, grammarAccess.getCTypeAccess().getSHORT_C_TYPETerminalRuleCall_3_2_0()));
		match_Time_TKeyword_1_0_or_TKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTimeAccess().getTKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getTimeAccess().getTKeyword_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getAssignOperatorRule())
			return getAssignOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBIT_ANDRule())
			return getBIT_ANDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBIT_ORRule())
			return getBIT_ORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBIT_XORRule())
			return getBIT_XORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBOOL_TYPERule())
			return getBOOL_TYPEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCTypeSignSpecRule())
			return getCTypeSignSpecToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDAYRule())
			return getDAYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDOUBLE_C_TYPERule())
			return getDOUBLE_C_TYPEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFLOAT_C_TYPERule())
			return getFLOAT_C_TYPEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getHOURRule())
			return getHOURToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINT_C_TYPERule())
			return getINT_C_TYPEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLOGICAL_ANDRule())
			return getLOGICAL_ANDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLOGICAL_ORRule())
			return getLOGICAL_ORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLONGRule())
			return getLONGToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLONG_C_TYPERule())
			return getLONG_C_TYPEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLoopStatRule())
			return getLoopStatToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMICROSECONDRule())
			return getMICROSECONDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMILISECONDRule())
			return getMILISECONDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMINUTERule())
			return getMINUTEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNANOSECONDRule())
			return getNANOSECONDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getResetStatRule())
			return getResetStatToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRestartStatRule())
			return getRestartStatToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSECONDRule())
			return getSECONDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSHORT_C_TYPERule())
			return getSHORT_C_TYPEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTACTRule())
			return getTACTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getUNSIGNEDRule())
			return getUNSIGNEDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getVOID_C_TYPERule())
			return getVOID_C_TYPEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * enum AssignOperator:
	 * 	ASSIGN="=" | MUL='*=' | DIV="/=" | MOD="+=" | SUB="-=" | CIN="<<=" | COUT=">>=" | BIT_AND="&=" | BIT_XOR="^=" |
	 * 	BIT_OR="|=";
	 */
	protected String getAssignOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal BIT_AND:
	 * 	"&";
	 */
	protected String getBIT_ANDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "&";
	}
	
	/**
	 * terminal BIT_OR:
	 * 	"|";
	 */
	protected String getBIT_ORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "|";
	}
	
	/**
	 * terminal BIT_XOR:
	 * 	"^";
	 */
	protected String getBIT_XORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "^";
	}
	
	/**
	 * terminal BOOL_TYPE:
	 * 	"bool";
	 */
	protected String getBOOL_TYPEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "bool";
	}
	
	/**
	 * enum CTypeSignSpec:
	 * 	SIGNED="signed" | UNSIGNED="unsigned";
	 */
	protected String getCTypeSignSpecToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal DAY:
	 * 	"D" | "d";
	 */
	protected String getDAYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "D";
	}
	
	/**
	 * terminal DOUBLE_C_TYPE:
	 * 	"double";
	 */
	protected String getDOUBLE_C_TYPEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "double";
	}
	
	/**
	 * terminal FLOAT_C_TYPE:
	 * 	"float";
	 */
	protected String getFLOAT_C_TYPEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "float";
	}
	
	/**
	 * terminal HOUR:
	 * 	"H" | "h";
	 */
	protected String getHOURToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "H";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal INT_C_TYPE:
	 * 	"int";
	 */
	protected String getINT_C_TYPEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "int";
	}
	
	/**
	 * terminal LOGICAL_AND:
	 * 	"&&";
	 */
	protected String getLOGICAL_ANDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "&&";
	}
	
	/**
	 * terminal LOGICAL_OR:
	 * 	"||";
	 */
	protected String getLOGICAL_ORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "||";
	}
	
	/**
	 * terminal LONG:
	 * 	"L" | "l";
	 */
	protected String getLONGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "L";
	}
	
	/**
	 * terminal LONG_C_TYPE:
	 * 	"long";
	 */
	protected String getLONG_C_TYPEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "long";
	}
	
	/**
	 * LoopStat:
	 * 	"loop" ";";
	 */
	protected String getLoopStatToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "loop ;";
	}
	
	/**
	 * terminal MICROSECOND:
	 * 	"US" | "us";
	 */
	protected String getMICROSECONDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "US";
	}
	
	/**
	 * terminal MILISECOND:
	 * 	"MS" | "ms";
	 */
	protected String getMILISECONDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "MS";
	}
	
	/**
	 * terminal MINUTE:
	 * 	"M" | "m";
	 */
	protected String getMINUTEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "M";
	}
	
	/**
	 * terminal NANOSECOND:
	 * 	"NS" | "ns";
	 */
	protected String getNANOSECONDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "NS";
	}
	
	/**
	 * ResetStat:
	 * 	"reset" "timeout" ";";
	 */
	protected String getResetStatToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "reset timeout ;";
	}
	
	/**
	 * RestartStat:
	 * 	"restart" ";";
	 */
	protected String getRestartStatToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "restart ;";
	}
	
	/**
	 * terminal SECOND:
	 * 	"S" | "s";
	 */
	protected String getSECONDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "S";
	}
	
	/**
	 * terminal SHORT_C_TYPE:
	 * 	"short";
	 */
	protected String getSHORT_C_TYPEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "short";
	}
	
	/**
	 * terminal TACT:
	 * 	"tact";
	 */
	protected String getTACTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "tact";
	}
	
	/**
	 * terminal UNSIGNED:
	 * 	"U" | "u";
	 */
	protected String getUNSIGNEDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "U";
	}
	
	/**
	 * terminal VOID_C_TYPE:
	 * 	"void";
	 */
	protected String getVOID_C_TYPEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "void";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Body_SemicolonKeyword_0_1_or___LeftCurlyBracketKeyword_1_1_RightCurlyBracketKeyword_1_3__.equals(syntax))
				emit_Body_SemicolonKeyword_0_1_or___LeftCurlyBracketKeyword_1_1_RightCurlyBracketKeyword_1_3__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CType_DOUBLE_C_TYPETerminalRuleCall_2_1_or_FLOAT_C_TYPETerminalRuleCall_1_1_or_INT_C_TYPETerminalRuleCall_3_2_1_or_LONG_C_TYPETerminalRuleCall_3_2_2_or_SHORT_C_TYPETerminalRuleCall_3_2_0_or_VOID_C_TYPETerminalRuleCall_0_1.equals(syntax))
				emit_CType_DOUBLE_C_TYPETerminalRuleCall_2_1_or_FLOAT_C_TYPETerminalRuleCall_1_1_or_INT_C_TYPETerminalRuleCall_3_2_1_or_LONG_C_TYPETerminalRuleCall_3_2_2_or_SHORT_C_TYPETerminalRuleCall_3_2_0_or_VOID_C_TYPETerminalRuleCall_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CType_INT_C_TYPETerminalRuleCall_3_2_1_or_LONG_C_TYPETerminalRuleCall_3_2_2_or_SHORT_C_TYPETerminalRuleCall_3_2_0.equals(syntax))
				emit_CType_INT_C_TYPETerminalRuleCall_3_2_1_or_LONG_C_TYPETerminalRuleCall_3_2_2_or_SHORT_C_TYPETerminalRuleCall_3_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Time_TKeyword_1_0_or_TKeyword_1_1.equals(syntax))
				emit_Time_TKeyword_1_0_or_TKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ';' | ('{' '}')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Body_SemicolonKeyword_0_1_or___LeftCurlyBracketKeyword_1_1_RightCurlyBracketKeyword_1_3__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         VOID_C_TYPE | 
	  *         FLOAT_C_TYPE | 
	  *         DOUBLE_C_TYPE | 
	  *         SHORT_C_TYPE | 
	  *         INT_C_TYPE | 
	  *         LONG_C_TYPE
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_CType_DOUBLE_C_TYPETerminalRuleCall_2_1_or_FLOAT_C_TYPETerminalRuleCall_1_1_or_INT_C_TYPETerminalRuleCall_3_2_1_or_LONG_C_TYPETerminalRuleCall_3_2_2_or_SHORT_C_TYPETerminalRuleCall_3_2_0_or_VOID_C_TYPETerminalRuleCall_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SHORT_C_TYPE | INT_C_TYPE | LONG_C_TYPE
	 *
	 * This ambiguous syntax occurs at:
	 *     signSpec?=CTypeSignSpec (ambiguity) (rule end)
	 */
	protected void emit_CType_INT_C_TYPETerminalRuleCall_3_2_1_or_LONG_C_TYPETerminalRuleCall_3_2_2_or_SHORT_C_TYPETerminalRuleCall_3_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '0t' | '0T'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) DAY days=DECIMAL
	 *     (rule start) (ambiguity) HOUR hours=DECIMAL
	 *     (rule start) (ambiguity) MICROSECOND micros=DECIMAL
	 *     (rule start) (ambiguity) MILISECOND milis=DECIMAL
	 *     (rule start) (ambiguity) MINUTE minutes=DECIMAL
	 *     (rule start) (ambiguity) NANOSECOND nanos=DECIMAL
	 *     (rule start) (ambiguity) SECOND seconds=DECIMAL
	 */
	protected void emit_Time_TKeyword_1_0_or_TKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
