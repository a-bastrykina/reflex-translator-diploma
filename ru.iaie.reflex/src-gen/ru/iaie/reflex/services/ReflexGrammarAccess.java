/*
 * generated by Xtext 2.20.0
 */
package ru.iaie.reflex.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ReflexGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_1_0 = (RuleCall)cAnnotationsAssignment_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cProgramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTicksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTicksTactParserRuleCall_4_0 = (RuleCall)cTicksAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cConstsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cConstsConstParserRuleCall_5_0_0 = (RuleCall)cConstsAssignment_5_0.eContents().get(0);
		private final Assignment cEnumsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cEnumsEnumParserRuleCall_5_1_0 = (RuleCall)cEnumsAssignment_5_1.eContents().get(0);
		private final Assignment cFunctionsAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cFunctionsFunctionParserRuleCall_5_2_0 = (RuleCall)cFunctionsAssignment_5_2.eContents().get(0);
		private final Assignment cGlobalVarsAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cGlobalVarsGlobalVariableParserRuleCall_5_3_0 = (RuleCall)cGlobalVarsAssignment_5_3.eContents().get(0);
		private final Assignment cRegistersAssignment_5_4 = (Assignment)cAlternatives_5.eContents().get(4);
		private final RuleCall cRegistersRegisterParserRuleCall_5_4_0 = (RuleCall)cRegistersAssignment_5_4.eContents().get(0);
		private final Assignment cProcessesAssignment_5_5 = (Assignment)cAlternatives_5.eContents().get(5);
		private final RuleCall cProcessesProcessParserRuleCall_5_5_0 = (RuleCall)cProcessesAssignment_5_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Program:
		//	("[" annotations+=Annotation "]")*
		//	"program" name=ID "{"
		//	ticks=Tact? (consts+=Const | enums+=Enum | functions+=Function | globalVars+=GlobalVariable | registers+=Register |
		//	processes+=Process)*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//("[" annotations+=Annotation "]")* "program" name=ID "{" ticks=Tact? (consts+=Const | enums+=Enum | functions+=Function
		//| globalVars+=GlobalVariable | registers+=Register | processes+=Process)* "}"
		public Group getGroup() { return cGroup; }
		
		//("[" annotations+=Annotation "]")*
		public Group getGroup_0() { return cGroup_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_0_1() { return cAnnotationsAssignment_0_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_1_0() { return cAnnotationsAnnotationParserRuleCall_0_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//"program"
		public Keyword getProgramKeyword_1() { return cProgramKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//ticks=Tact?
		public Assignment getTicksAssignment_4() { return cTicksAssignment_4; }
		
		//Tact
		public RuleCall getTicksTactParserRuleCall_4_0() { return cTicksTactParserRuleCall_4_0; }
		
		//(consts+=Const | enums+=Enum | functions+=Function | globalVars+=GlobalVariable | registers+=Register |
		//processes+=Process)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//consts+=Const
		public Assignment getConstsAssignment_5_0() { return cConstsAssignment_5_0; }
		
		//Const
		public RuleCall getConstsConstParserRuleCall_5_0_0() { return cConstsConstParserRuleCall_5_0_0; }
		
		//enums+=Enum
		public Assignment getEnumsAssignment_5_1() { return cEnumsAssignment_5_1; }
		
		//Enum
		public RuleCall getEnumsEnumParserRuleCall_5_1_0() { return cEnumsEnumParserRuleCall_5_1_0; }
		
		//functions+=Function
		public Assignment getFunctionsAssignment_5_2() { return cFunctionsAssignment_5_2; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_5_2_0() { return cFunctionsFunctionParserRuleCall_5_2_0; }
		
		//globalVars+=GlobalVariable
		public Assignment getGlobalVarsAssignment_5_3() { return cGlobalVarsAssignment_5_3; }
		
		//GlobalVariable
		public RuleCall getGlobalVarsGlobalVariableParserRuleCall_5_3_0() { return cGlobalVarsGlobalVariableParserRuleCall_5_3_0; }
		
		//registers+=Register
		public Assignment getRegistersAssignment_5_4() { return cRegistersAssignment_5_4; }
		
		//Register
		public RuleCall getRegistersRegisterParserRuleCall_5_4_0() { return cRegistersRegisterParserRuleCall_5_4_0; }
		
		//processes+=Process
		public Assignment getProcessesAssignment_5_5() { return cProcessesAssignment_5_5; }
		
		//Process
		public RuleCall getProcessesProcessParserRuleCall_5_5_0() { return cProcessesProcessParserRuleCall_5_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_1_0 = (RuleCall)cAnnotationsAssignment_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cProcessKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVariablesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariablesProcessVariableParserRuleCall_4_0 = (RuleCall)cVariablesAssignment_4.eContents().get(0);
		private final Assignment cStatesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatesStateParserRuleCall_5_0 = (RuleCall)cStatesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Process:
		//	("[" annotations+=Annotation "]")*
		//	"process" name=ID "{"
		//	variables+=ProcessVariable*
		//	states+=State*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//("[" annotations+=Annotation "]")* "process" name=ID "{" variables+=ProcessVariable* states+=State* "}"
		public Group getGroup() { return cGroup; }
		
		//("[" annotations+=Annotation "]")*
		public Group getGroup_0() { return cGroup_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_0_1() { return cAnnotationsAssignment_0_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_1_0() { return cAnnotationsAnnotationParserRuleCall_0_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//"process"
		public Keyword getProcessKeyword_1() { return cProcessKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//variables+=ProcessVariable*
		public Assignment getVariablesAssignment_4() { return cVariablesAssignment_4; }
		
		//ProcessVariable
		public RuleCall getVariablesProcessVariableParserRuleCall_4_0() { return cVariablesProcessVariableParserRuleCall_4_0; }
		
		//states+=State*
		public Assignment getStatesAssignment_5() { return cStatesAssignment_5; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_5_0() { return cStatesStateParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_1_0 = (RuleCall)cAnnotationsAssignment_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cLoopedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cLoopedLoopedKeyword_3_0 = (Keyword)cLoopedAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStateFunctionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStateFunctionStatementSequenceParserRuleCall_5_0 = (RuleCall)cStateFunctionAssignment_5.eContents().get(0);
		private final Assignment cTimeoutFunctionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTimeoutFunctionTimeoutFunctionParserRuleCall_6_0 = (RuleCall)cTimeoutFunctionAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//State:
		//	("[" annotations+=Annotation "]")*
		//	"state" name=ID looped?="looped"? "{"
		//	stateFunction=StatementSequence
		//	timeoutFunction=TimeoutFunction?
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//("[" annotations+=Annotation "]")* "state" name=ID looped?="looped"? "{" stateFunction=StatementSequence
		//timeoutFunction=TimeoutFunction? "}"
		public Group getGroup() { return cGroup; }
		
		//("[" annotations+=Annotation "]")*
		public Group getGroup_0() { return cGroup_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//annotations+=Annotation
		public Assignment getAnnotationsAssignment_0_1() { return cAnnotationsAssignment_0_1; }
		
		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_1_0() { return cAnnotationsAnnotationParserRuleCall_0_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//"state"
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//looped?="looped"?
		public Assignment getLoopedAssignment_3() { return cLoopedAssignment_3; }
		
		//"looped"
		public Keyword getLoopedLoopedKeyword_3_0() { return cLoopedLoopedKeyword_3_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//stateFunction=StatementSequence
		public Assignment getStateFunctionAssignment_5() { return cStateFunctionAssignment_5; }
		
		//StatementSequence
		public RuleCall getStateFunctionStatementSequenceParserRuleCall_5_0() { return cStateFunctionStatementSequenceParserRuleCall_5_0; }
		
		//timeoutFunction=TimeoutFunction?
		public Assignment getTimeoutFunctionAssignment_6() { return cTimeoutFunctionAssignment_6; }
		
		//TimeoutFunction
		public RuleCall getTimeoutFunctionTimeoutFunctionParserRuleCall_6_0() { return cTimeoutFunctionTimeoutFunctionParserRuleCall_6_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ProcessVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.ProcessVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cImportedVariableParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cDeclaredVariableParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ProcessVariable:
		//	(ImportedVariable | DeclaredVariable) ";";
		@Override public ParserRule getRule() { return rule; }
		
		//(ImportedVariable | DeclaredVariable) ";"
		public Group getGroup() { return cGroup; }
		
		//(ImportedVariable | DeclaredVariable)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ImportedVariable
		public RuleCall getImportedVariableParserRuleCall_0_0() { return cImportedVariableParserRuleCall_0_0; }
		
		//DeclaredVariable
		public RuleCall getDeclaredVariableParserRuleCall_0_1() { return cDeclaredVariableParserRuleCall_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ImportedVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.ImportedVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProcessKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProcessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cProcessProcessCrossReference_2_0 = (CrossReference)cProcessAssignment_2.eContents().get(0);
		private final RuleCall cProcessProcessIDTerminalRuleCall_2_0_1 = (RuleCall)cProcessProcessCrossReference_2_0.eContents().get(1);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVariablesDeclaredVariableCrossReference_3_0 = (CrossReference)cVariablesAssignment_3.eContents().get(0);
		private final RuleCall cVariablesDeclaredVariableIDTerminalRuleCall_3_0_1 = (RuleCall)cVariablesDeclaredVariableCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVariablesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cVariablesDeclaredVariableCrossReference_4_1_0 = (CrossReference)cVariablesAssignment_4_1.eContents().get(0);
		private final RuleCall cVariablesDeclaredVariableIDTerminalRuleCall_4_1_0_1 = (RuleCall)cVariablesDeclaredVariableCrossReference_4_1_0.eContents().get(1);
		
		//ImportedVariable:
		//	"from" "process" process=[Process] variables+=[DeclaredVariable] ("," variables+=[DeclaredVariable])*;
		@Override public ParserRule getRule() { return rule; }
		
		//"from" "process" process=[Process] variables+=[DeclaredVariable] ("," variables+=[DeclaredVariable])*
		public Group getGroup() { return cGroup; }
		
		//"from"
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }
		
		//"process"
		public Keyword getProcessKeyword_1() { return cProcessKeyword_1; }
		
		//process=[Process]
		public Assignment getProcessAssignment_2() { return cProcessAssignment_2; }
		
		//[Process]
		public CrossReference getProcessProcessCrossReference_2_0() { return cProcessProcessCrossReference_2_0; }
		
		//ID
		public RuleCall getProcessProcessIDTerminalRuleCall_2_0_1() { return cProcessProcessIDTerminalRuleCall_2_0_1; }
		
		//variables+=[DeclaredVariable]
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }
		
		//[DeclaredVariable]
		public CrossReference getVariablesDeclaredVariableCrossReference_3_0() { return cVariablesDeclaredVariableCrossReference_3_0; }
		
		//ID
		public RuleCall getVariablesDeclaredVariableIDTerminalRuleCall_3_0_1() { return cVariablesDeclaredVariableIDTerminalRuleCall_3_0_1; }
		
		//("," variables+=[DeclaredVariable])*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//variables+=[DeclaredVariable]
		public Assignment getVariablesAssignment_4_1() { return cVariablesAssignment_4_1; }
		
		//[DeclaredVariable]
		public CrossReference getVariablesDeclaredVariableCrossReference_4_1_0() { return cVariablesDeclaredVariableCrossReference_4_1_0; }
		
		//ID
		public RuleCall getVariablesDeclaredVariableIDTerminalRuleCall_4_1_0_1() { return cVariablesDeclaredVariableIDTerminalRuleCall_4_1_0_1; }
	}
	public class DeclaredVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.DeclaredVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPhysicalVariableParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cProgramVariableParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Assignment cSharedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cSharedSharedKeyword_1_0 = (Keyword)cSharedAssignment_1.eContents().get(0);
		
		//DeclaredVariable:
		//	(PhysicalVariable | ProgramVariable) shared="shared"?;
		@Override public ParserRule getRule() { return rule; }
		
		//(PhysicalVariable | ProgramVariable) shared="shared"?
		public Group getGroup() { return cGroup; }
		
		//(PhysicalVariable | ProgramVariable)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//PhysicalVariable
		public RuleCall getPhysicalVariableParserRuleCall_0_0() { return cPhysicalVariableParserRuleCall_0_0; }
		
		//ProgramVariable
		public RuleCall getProgramVariableParserRuleCall_0_1() { return cProgramVariableParserRuleCall_0_1; }
		
		//shared="shared"?
		public Assignment getSharedAssignment_1() { return cSharedAssignment_1; }
		
		//"shared"
		public Keyword getSharedSharedKeyword_1_0() { return cSharedSharedKeyword_1_0; }
	}
	public class GlobalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.GlobalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPhysicalVariableParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cProgramVariableParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//GlobalVariable:
		//	(PhysicalVariable | ProgramVariable) ";";
		@Override public ParserRule getRule() { return rule; }
		
		//(PhysicalVariable | ProgramVariable) ";"
		public Group getGroup() { return cGroup; }
		
		//(PhysicalVariable | ProgramVariable)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//PhysicalVariable
		public RuleCall getPhysicalVariableParserRuleCall_0_0() { return cPhysicalVariableParserRuleCall_0_0; }
		
		//ProgramVariable
		public RuleCall getProgramVariableParserRuleCall_0_1() { return cProgramVariableParserRuleCall_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class PhysicalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.PhysicalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIntegerTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPortAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortRegisterPortMappingParserRuleCall_3_0 = (RuleCall)cPortAssignment_3.eContents().get(0);
		
		//PhysicalVariable:
		//	type=IntegerType name=ID "=" port=RegisterPortMapping;
		@Override public ParserRule getRule() { return rule; }
		
		//type=IntegerType name=ID "=" port=RegisterPortMapping
		public Group getGroup() { return cGroup; }
		
		//type=IntegerType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//IntegerType
		public RuleCall getTypeIntegerTypeParserRuleCall_0_0() { return cTypeIntegerTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//port=RegisterPortMapping
		public Assignment getPortAssignment_3() { return cPortAssignment_3; }
		
		//RegisterPortMapping
		public RuleCall getPortRegisterPortMappingParserRuleCall_3_0() { return cPortRegisterPortMappingParserRuleCall_3_0; }
	}
	public class RegisterPortMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.RegisterPortMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRegisterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRegisterRegisterCrossReference_0_0 = (CrossReference)cRegisterAssignment_0.eContents().get(0);
		private final RuleCall cRegisterRegisterIDTerminalRuleCall_0_0_1 = (RuleCall)cRegisterRegisterCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPortBitAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPortBitINTEGERTerminalRuleCall_1_1_0 = (RuleCall)cPortBitAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//RegisterPortMapping:
		//	register=[Register] ("[" portBit=INTEGER "]")?;
		@Override public ParserRule getRule() { return rule; }
		
		//register=[Register] ("[" portBit=INTEGER "]")?
		public Group getGroup() { return cGroup; }
		
		//register=[Register]
		public Assignment getRegisterAssignment_0() { return cRegisterAssignment_0; }
		
		//[Register]
		public CrossReference getRegisterRegisterCrossReference_0_0() { return cRegisterRegisterCrossReference_0_0; }
		
		//ID
		public RuleCall getRegisterRegisterIDTerminalRuleCall_0_0_1() { return cRegisterRegisterIDTerminalRuleCall_0_0_1; }
		
		//("[" portBit=INTEGER "]")?
		public Group getGroup_1() { return cGroup_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//portBit=INTEGER
		public Assignment getPortBitAssignment_1_1() { return cPortBitAssignment_1_1; }
		
		//INTEGER
		public RuleCall getPortBitINTEGERTerminalRuleCall_1_1_0() { return cPortBitINTEGERTerminalRuleCall_1_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class ProgramVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.ProgramVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeReflexTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ProgramVariable:
		//	type=ReflexType name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=ReflexType name=ID
		public Group getGroup() { return cGroup; }
		
		//type=ReflexType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ReflexType
		public RuleCall getTypeReflexTypeParserRuleCall_0_0() { return cTypeReflexTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class StatementSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.StatementSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementSequenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//StatementSequence:
		//	{StatementSequence} statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementSequence} statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//{StatementSequence}
		public Action getStatementSequenceAction_0() { return cStatementSequenceAction_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
	}
	public class CompoundStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.CompoundStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CompoundStatement:
		//	{StatementBlock} "{" statements+=Statement* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementBlock} "{" statements+=Statement* "}"
		public Group getGroup() { return cGroup; }
		
		//{StatementBlock}
		public Action getStatementBlockAction_0() { return cStatementBlockAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class TimeoutFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.TimeoutFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cTimeAmountOrRefParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cTimeAmountOrRefParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyStatementParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//TimeoutFunction:
		//	"timeout" (TimeAmountOrRef | "(" TimeAmountOrRef ")") body=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//"timeout" (TimeAmountOrRef | "(" TimeAmountOrRef ")") body=Statement
		public Group getGroup() { return cGroup; }
		
		//"timeout"
		public Keyword getTimeoutKeyword_0() { return cTimeoutKeyword_0; }
		
		//(TimeAmountOrRef | "(" TimeAmountOrRef ")")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//TimeAmountOrRef
		public RuleCall getTimeAmountOrRefParserRuleCall_1_0() { return cTimeAmountOrRefParserRuleCall_1_0; }
		
		//"(" TimeAmountOrRef ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//TimeAmountOrRef
		public RuleCall getTimeAmountOrRefParserRuleCall_1_1_1() { return cTimeAmountOrRefParserRuleCall_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
		
		//body=Statement
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_2_0() { return cBodyStatementParserRuleCall_2_0; }
	}
	public class TimeAmountOrRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.TimeAmountOrRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTimeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTimeTimeParserRuleCall_0_0 = (RuleCall)cTimeAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cRefIdReferenceCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefIdReferenceIDTerminalRuleCall_1_0_1 = (RuleCall)cRefIdReferenceCrossReference_1_0.eContents().get(1);
		
		//fragment TimeAmountOrRef:
		//	time=Time | ref=[IdReference];
		@Override public ParserRule getRule() { return rule; }
		
		//time=Time | ref=[IdReference]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//time=Time
		public Assignment getTimeAssignment_0() { return cTimeAssignment_0; }
		
		//Time
		public RuleCall getTimeTimeParserRuleCall_0_0() { return cTimeTimeParserRuleCall_0_0; }
		
		//ref=[IdReference]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[IdReference]
		public CrossReference getRefIdReferenceCrossReference_1_0() { return cRefIdReferenceCrossReference_1_0; }
		
		//ID
		public RuleCall getRefIdReferenceIDTerminalRuleCall_1_0_1() { return cRefIdReferenceIDTerminalRuleCall_1_0_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cCompoundStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStartProcStatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStopProcStatParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cErrorStatParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRestartStatParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cResetStatParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSetStateStatParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIfElseStatParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSwitchStatParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final RuleCall cExpressionParserRuleCall_10_0 = (RuleCall)cGroup_10.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		
		//Statement:
		//	{Statement} ";" | CompoundStatement | StartProcStat | StopProcStat | ErrorStat | RestartStat | ResetStat
		//	| SetStateStat | IfElseStat | SwitchStat | Expression ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{Statement} ";" | CompoundStatement | StartProcStat | StopProcStat | ErrorStat | RestartStat | ResetStat | SetStateStat
		//| IfElseStat | SwitchStat | Expression ";"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Statement} ";"
		public Group getGroup_0() { return cGroup_0; }
		
		//{Statement}
		public Action getStatementAction_0_0() { return cStatementAction_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//CompoundStatement
		public RuleCall getCompoundStatementParserRuleCall_1() { return cCompoundStatementParserRuleCall_1; }
		
		//StartProcStat
		public RuleCall getStartProcStatParserRuleCall_2() { return cStartProcStatParserRuleCall_2; }
		
		//StopProcStat
		public RuleCall getStopProcStatParserRuleCall_3() { return cStopProcStatParserRuleCall_3; }
		
		//ErrorStat
		public RuleCall getErrorStatParserRuleCall_4() { return cErrorStatParserRuleCall_4; }
		
		//RestartStat
		public RuleCall getRestartStatParserRuleCall_5() { return cRestartStatParserRuleCall_5; }
		
		//ResetStat
		public RuleCall getResetStatParserRuleCall_6() { return cResetStatParserRuleCall_6; }
		
		//SetStateStat
		public RuleCall getSetStateStatParserRuleCall_7() { return cSetStateStatParserRuleCall_7; }
		
		//IfElseStat
		public RuleCall getIfElseStatParserRuleCall_8() { return cIfElseStatParserRuleCall_8; }
		
		//SwitchStat
		public RuleCall getSwitchStatParserRuleCall_9() { return cSwitchStatParserRuleCall_9; }
		
		//Expression ";"
		public Group getGroup_10() { return cGroup_10; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_10_0() { return cExpressionParserRuleCall_10_0; }
		
		//";"
		public Keyword getSemicolonKeyword_10_1() { return cSemicolonKeyword_10_1; }
	}
	public class IfElseStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.IfElseStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondExpressionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenStatementParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		
		//IfElseStat:
		//	"if" "(" cond=Expression ")"
		//	then=Statement (=> "else" else=Statement)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" "(" cond=Expression ")" then=Statement (=> "else" else=Statement)?
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//cond=Expression
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_2_0() { return cCondExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//then=Statement
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//Statement
		public RuleCall getThenStatementParserRuleCall_4_0() { return cThenStatementParserRuleCall_4_0; }
		
		//(=> "else" else=Statement)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//else=Statement
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }
		
		//Statement
		public RuleCall getElseStatementParserRuleCall_5_1_0() { return cElseStatementParserRuleCall_5_1_0; }
	}
	public class SwitchStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.SwitchStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOptionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOptionsCaseStatParserRuleCall_5_0 = (RuleCall)cOptionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SwitchStat:
		//	"switch" "(" expr=Expression ")" "{" options+=CaseStat* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"switch" "(" expr=Expression ")" "{" options+=CaseStat* "}"
		public Group getGroup() { return cGroup; }
		
		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//options+=CaseStat*
		public Assignment getOptionsAssignment_5() { return cOptionsAssignment_5; }
		
		//CaseStat
		public RuleCall getOptionsCaseStatParserRuleCall_5_0() { return cOptionsCaseStatParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class CaseStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.CaseStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionINTEGERTerminalRuleCall_1_0 = (RuleCall)cOptionAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyStatementSequenceParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Assignment cHasBreakAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHasBreakBreakStatParserRuleCall_4_0 = (RuleCall)cHasBreakAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CaseStat:
		//	"case" option=INTEGER ":" body=StatementSequence hasBreak?=BreakStat "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"case" option=INTEGER ":" body=StatementSequence hasBreak?=BreakStat "}"
		public Group getGroup() { return cGroup; }
		
		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//option=INTEGER
		public Assignment getOptionAssignment_1() { return cOptionAssignment_1; }
		
		//INTEGER
		public RuleCall getOptionINTEGERTerminalRuleCall_1_0() { return cOptionINTEGERTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//body=StatementSequence
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//StatementSequence
		public RuleCall getBodyStatementSequenceParserRuleCall_3_0() { return cBodyStatementSequenceParserRuleCall_3_0; }
		
		//hasBreak?=BreakStat
		public Assignment getHasBreakAssignment_4() { return cHasBreakAssignment_4; }
		
		//BreakStat
		public RuleCall getHasBreakBreakStatParserRuleCall_4_0() { return cHasBreakBreakStatParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class BreakStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.BreakStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BreakStat:
		//	"break" ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"break" ";"
		public Group getGroup() { return cGroup; }
		
		//"break"
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class StartProcStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.StartProcStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProcessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProcessProcessCrossReference_1_0 = (CrossReference)cProcessAssignment_1.eContents().get(0);
		private final RuleCall cProcessProcessIDTerminalRuleCall_1_0_1 = (RuleCall)cProcessProcessCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StartProcStat:
		//	"start" process=[Process] ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"start" process=[Process] ";"
		public Group getGroup() { return cGroup; }
		
		//"start"
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }
		
		//process=[Process]
		public Assignment getProcessAssignment_1() { return cProcessAssignment_1; }
		
		//[Process]
		public CrossReference getProcessProcessCrossReference_1_0() { return cProcessProcessCrossReference_1_0; }
		
		//ID
		public RuleCall getProcessProcessIDTerminalRuleCall_1_0_1() { return cProcessProcessIDTerminalRuleCall_1_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class StopProcStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.StopProcStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStopProcStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProcessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cProcessProcessCrossReference_2_0 = (CrossReference)cProcessAssignment_2.eContents().get(0);
		private final RuleCall cProcessProcessIDTerminalRuleCall_2_0_1 = (RuleCall)cProcessProcessCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StopProcStat:
		//	{StopProcStat} "stop" process=[Process]? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{StopProcStat} "stop" process=[Process]? ";"
		public Group getGroup() { return cGroup; }
		
		//{StopProcStat}
		public Action getStopProcStatAction_0() { return cStopProcStatAction_0; }
		
		//"stop"
		public Keyword getStopKeyword_1() { return cStopKeyword_1; }
		
		//process=[Process]?
		public Assignment getProcessAssignment_2() { return cProcessAssignment_2; }
		
		//[Process]
		public CrossReference getProcessProcessCrossReference_2_0() { return cProcessProcessCrossReference_2_0; }
		
		//ID
		public RuleCall getProcessProcessIDTerminalRuleCall_2_0_1() { return cProcessProcessIDTerminalRuleCall_2_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ErrorStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.ErrorStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cErrorStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cErrorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProcessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cProcessProcessCrossReference_2_0 = (CrossReference)cProcessAssignment_2.eContents().get(0);
		private final RuleCall cProcessProcessIDTerminalRuleCall_2_0_1 = (RuleCall)cProcessProcessCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ErrorStat:
		//	{ErrorStat} "error" process=[Process]? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{ErrorStat} "error" process=[Process]? ";"
		public Group getGroup() { return cGroup; }
		
		//{ErrorStat}
		public Action getErrorStatAction_0() { return cErrorStatAction_0; }
		
		//"error"
		public Keyword getErrorKeyword_1() { return cErrorKeyword_1; }
		
		//process=[Process]?
		public Assignment getProcessAssignment_2() { return cProcessAssignment_2; }
		
		//[Process]
		public CrossReference getProcessProcessCrossReference_2_0() { return cProcessProcessCrossReference_2_0; }
		
		//ID
		public RuleCall getProcessProcessIDTerminalRuleCall_2_0_1() { return cProcessProcessIDTerminalRuleCall_2_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class RestartStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.RestartStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRestartStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRestartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RestartStat:
		//	{RestartStat} "restart" ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{RestartStat} "restart" ";"
		public Group getGroup() { return cGroup; }
		
		//{RestartStat}
		public Action getRestartStatAction_0() { return cRestartStatAction_0; }
		
		//"restart"
		public Keyword getRestartKeyword_1() { return cRestartKeyword_1; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ResetStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.ResetStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cResetStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cResetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTimerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ResetStat:
		//	{ResetStat} "reset" "timer" ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{ResetStat} "reset" "timer" ";"
		public Group getGroup() { return cGroup; }
		
		//{ResetStat}
		public Action getResetStatAction_0() { return cResetStatAction_0; }
		
		//"reset"
		public Keyword getResetKeyword_1() { return cResetKeyword_1; }
		
		//"timer"
		public Keyword getTimerKeyword_2() { return cTimerKeyword_2; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class SetStateStatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.SetStateStat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetStateStatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cStateKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cStateAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final CrossReference cStateStateCrossReference_2_0_1_0 = (CrossReference)cStateAssignment_2_0_1.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_2_0_1_0_1 = (RuleCall)cStateStateCrossReference_2_0_1_0.eContents().get(1);
		private final Assignment cNextAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cNextNextKeyword_2_1_0 = (Keyword)cNextAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetStateStat:
		//	{SetStateStat} "set" ("state" state=[State] | next?="next") ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{SetStateStat} "set" ("state" state=[State] | next?="next") ";"
		public Group getGroup() { return cGroup; }
		
		//{SetStateStat}
		public Action getSetStateStatAction_0() { return cSetStateStatAction_0; }
		
		//"set"
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }
		
		//("state" state=[State] | next?="next")
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//"state" state=[State]
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//"state"
		public Keyword getStateKeyword_2_0_0() { return cStateKeyword_2_0_0; }
		
		//state=[State]
		public Assignment getStateAssignment_2_0_1() { return cStateAssignment_2_0_1; }
		
		//[State]
		public CrossReference getStateStateCrossReference_2_0_1_0() { return cStateStateCrossReference_2_0_1_0; }
		
		//ID
		public RuleCall getStateStateIDTerminalRuleCall_2_0_1_0_1() { return cStateStateIDTerminalRuleCall_2_0_1_0_1; }
		
		//next?="next"
		public Assignment getNextAssignment_2_1() { return cNextAssignment_2_1; }
		
		//"next"
		public Keyword getNextNextKeyword_2_1_0() { return cNextNextKeyword_2_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturnTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReturnTypeCTypeParserRuleCall_0_0 = (RuleCall)cReturnTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgTypesCTypeParserRuleCall_3_0 = (RuleCall)cArgTypesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgTypesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArgTypesCTypeParserRuleCall_4_1_0 = (RuleCall)cArgTypesAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Function:
		//	returnType=CType name=ID "(" argTypes+=CType ("," argTypes+=CType)* ")" ";";
		@Override public ParserRule getRule() { return rule; }
		
		//returnType=CType name=ID "(" argTypes+=CType ("," argTypes+=CType)* ")" ";"
		public Group getGroup() { return cGroup; }
		
		//returnType=CType
		public Assignment getReturnTypeAssignment_0() { return cReturnTypeAssignment_0; }
		
		//CType
		public RuleCall getReturnTypeCTypeParserRuleCall_0_0() { return cReturnTypeCTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//argTypes+=CType
		public Assignment getArgTypesAssignment_3() { return cArgTypesAssignment_3; }
		
		//CType
		public RuleCall getArgTypesCTypeParserRuleCall_3_0() { return cArgTypesCTypeParserRuleCall_3_0; }
		
		//("," argTypes+=CType)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//argTypes+=CType
		public Assignment getArgTypesAssignment_4_1() { return cArgTypesAssignment_4_1; }
		
		//CType
		public RuleCall getArgTypesCTypeParserRuleCall_4_1_0() { return cArgTypesCTypeParserRuleCall_4_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class RegisterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Register");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeRegisterTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAddr1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAddr1INTEGERTerminalRuleCall_2_0 = (RuleCall)cAddr1Assignment_2.eContents().get(0);
		private final Assignment cAddr2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAddr2INTEGERTerminalRuleCall_3_0 = (RuleCall)cAddr2Assignment_3.eContents().get(0);
		private final Assignment cRegSizeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRegSizeINTEGERTerminalRuleCall_4_0 = (RuleCall)cRegSizeAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Register:
		//	type=RegisterType name=ID addr1=INTEGER addr2=INTEGER regSize=INTEGER ";";
		@Override public ParserRule getRule() { return rule; }
		
		//type=RegisterType name=ID addr1=INTEGER addr2=INTEGER regSize=INTEGER ";"
		public Group getGroup() { return cGroup; }
		
		//type=RegisterType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//RegisterType
		public RuleCall getTypeRegisterTypeEnumRuleCall_0_0() { return cTypeRegisterTypeEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//addr1=INTEGER
		public Assignment getAddr1Assignment_2() { return cAddr1Assignment_2; }
		
		//INTEGER
		public RuleCall getAddr1INTEGERTerminalRuleCall_2_0() { return cAddr1INTEGERTerminalRuleCall_2_0; }
		
		//addr2=INTEGER
		public Assignment getAddr2Assignment_3() { return cAddr2Assignment_3; }
		
		//INTEGER
		public RuleCall getAddr2INTEGERTerminalRuleCall_3_0() { return cAddr2INTEGERTerminalRuleCall_3_0; }
		
		//regSize=INTEGER
		public Assignment getRegSizeAssignment_4() { return cRegSizeAssignment_4; }
		
		//INTEGER
		public RuleCall getRegSizeINTEGERTerminalRuleCall_4_0() { return cRegSizeINTEGERTerminalRuleCall_4_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Const");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeReflexTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConstValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConstValueExpressionParserRuleCall_4_0 = (RuleCall)cConstValueAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Const:
		//	"const" type=ReflexType name=ID "=" constValue=Expression ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"const" type=ReflexType name=ID "=" constValue=Expression ";"
		public Group getGroup() { return cGroup; }
		
		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }
		
		//type=ReflexType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ReflexType
		public RuleCall getTypeReflexTypeParserRuleCall_1_0() { return cTypeReflexTypeParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//constValue=Expression
		public Assignment getConstValueAssignment_4() { return cConstValueAssignment_4; }
		
		//Expression
		public RuleCall getConstValueExpressionParserRuleCall_4_0() { return cConstValueExpressionParserRuleCall_4_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnumMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEnumMembersEnumMemberParserRuleCall_3_0 = (RuleCall)cEnumMembersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEnumMembersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEnumMembersEnumMemberParserRuleCall_4_1_0 = (RuleCall)cEnumMembersAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Enum:
		//	"enum" identifier=ID "{" enumMembers+=EnumMember (',' enumMembers+=EnumMember)* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"enum" identifier=ID "{" enumMembers+=EnumMember (',' enumMembers+=EnumMember)* "}"
		public Group getGroup() { return cGroup; }
		
		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//enumMembers+=EnumMember
		public Assignment getEnumMembersAssignment_3() { return cEnumMembersAssignment_3; }
		
		//EnumMember
		public RuleCall getEnumMembersEnumMemberParserRuleCall_3_0() { return cEnumMembersEnumMemberParserRuleCall_3_0; }
		
		//(',' enumMembers+=EnumMember)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//enumMembers+=EnumMember
		public Assignment getEnumMembersAssignment_4_1() { return cEnumMembersAssignment_4_1; }
		
		//EnumMember
		public RuleCall getEnumMembersEnumMemberParserRuleCall_4_1_0() { return cEnumMembersEnumMemberParserRuleCall_4_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EnumMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.EnumMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//EnumMember:
		//	name=ID ("=" value=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ("=" value=Expression)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//("=" value=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_1_0() { return cValueExpressionParserRuleCall_1_1_0; }
	}
	public class InfixOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.InfixOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpInfixPostfixOpEnumRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cVarIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarIdIDTerminalRuleCall_1_0 = (RuleCall)cVarIdAssignment_1.eContents().get(0);
		
		//InfixOp:
		//	op=InfixPostfixOp varId=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//op=InfixPostfixOp varId=ID
		public Group getGroup() { return cGroup; }
		
		//op=InfixPostfixOp
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//InfixPostfixOp
		public RuleCall getOpInfixPostfixOpEnumRuleCall_0_0() { return cOpInfixPostfixOpEnumRuleCall_0_0; }
		
		//varId=ID
		public Assignment getVarIdAssignment_1() { return cVarIdAssignment_1; }
		
		//ID
		public RuleCall getVarIdIDTerminalRuleCall_1_0() { return cVarIdIDTerminalRuleCall_1_0; }
	}
	public class PostfixOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.PostfixOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarIdIDTerminalRuleCall_0_0 = (RuleCall)cVarIdAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpInfixPostfixOpEnumRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		
		//PostfixOp:
		//	varId=ID op=InfixPostfixOp;
		@Override public ParserRule getRule() { return rule; }
		
		//varId=ID op=InfixPostfixOp
		public Group getGroup() { return cGroup; }
		
		//varId=ID
		public Assignment getVarIdAssignment_0() { return cVarIdAssignment_0; }
		
		//ID
		public RuleCall getVarIdIDTerminalRuleCall_0_0() { return cVarIdIDTerminalRuleCall_0_0; }
		
		//op=InfixPostfixOp
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//InfixPostfixOp
		public RuleCall getOpInfixPostfixOpEnumRuleCall_1_0() { return cOpInfixPostfixOpEnumRuleCall_1_0; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionFunctionCrossReference_0_0 = (CrossReference)cFunctionAssignment_0.eContents().get(0);
		private final RuleCall cFunctionFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionFunctionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//	function=[Function] "(" (args+=Expression ("," args+=Expression)*)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//function=[Function] "(" (args+=Expression ("," args+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//function=[Function]
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//[Function]
		public CrossReference getFunctionFunctionCrossReference_0_0() { return cFunctionFunctionCrossReference_0_0; }
		
		//ID
		public RuleCall getFunctionFunctionIDTerminalRuleCall_0_0_1() { return cFunctionFunctionIDTerminalRuleCall_0_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=Expression
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_0_0() { return cArgsExpressionParserRuleCall_2_0_0; }
		
		//("," args+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_2_1_1_0() { return cArgsExpressionParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class IdReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.IdReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGlobalVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcessVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumMemberParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConstParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//IdReference:
		//	GlobalVariable | ProcessVariable | EnumMember | Const;
		@Override public ParserRule getRule() { return rule; }
		
		//GlobalVariable | ProcessVariable | EnumMember | Const
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GlobalVariable
		public RuleCall getGlobalVariableParserRuleCall_0() { return cGlobalVariableParserRuleCall_0; }
		
		//ProcessVariable
		public RuleCall getProcessVariableParserRuleCall_1() { return cProcessVariableParserRuleCall_1; }
		
		//EnumMember
		public RuleCall getEnumMemberParserRuleCall_2() { return cEnumMemberParserRuleCall_2; }
		
		//Const
		public RuleCall getConstParserRuleCall_3() { return cConstParserRuleCall_3; }
	}
	public class CheckStateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.CheckStateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProcessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProcessProcessCrossReference_1_0 = (CrossReference)cProcessAssignment_1.eContents().get(0);
		private final RuleCall cProcessProcessIDTerminalRuleCall_1_0_1 = (RuleCall)cProcessProcessCrossReference_1_0.eContents().get(1);
		private final RuleCall cIN_WORDParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cStateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cStateAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final CrossReference cStateStateCrossReference_4_0_0 = (CrossReference)cStateAssignment_4_0.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_4_0_0_1 = (RuleCall)cStateStateCrossReference_4_0_0.eContents().get(1);
		private final Assignment cActiveAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final Keyword cActiveActiveKeyword_4_1_0 = (Keyword)cActiveAssignment_4_1.eContents().get(0);
		private final Assignment cPassiveAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final Keyword cPassivePassiveKeyword_4_2_0 = (Keyword)cPassiveAssignment_4_2.eContents().get(0);
		
		//CheckStateExpression:
		//	"process" process=[Process] IN_WORD "state" (state=[State] | active?="active" | passive?="passive");
		@Override public ParserRule getRule() { return rule; }
		
		//"process" process=[Process] IN_WORD "state" (state=[State] | active?="active" | passive?="passive")
		public Group getGroup() { return cGroup; }
		
		//"process"
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }
		
		//process=[Process]
		public Assignment getProcessAssignment_1() { return cProcessAssignment_1; }
		
		//[Process]
		public CrossReference getProcessProcessCrossReference_1_0() { return cProcessProcessCrossReference_1_0; }
		
		//ID
		public RuleCall getProcessProcessIDTerminalRuleCall_1_0_1() { return cProcessProcessIDTerminalRuleCall_1_0_1; }
		
		//IN_WORD
		public RuleCall getIN_WORDParserRuleCall_2() { return cIN_WORDParserRuleCall_2; }
		
		//"state"
		public Keyword getStateKeyword_3() { return cStateKeyword_3; }
		
		//(state=[State] | active?="active" | passive?="passive")
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//state=[State]
		public Assignment getStateAssignment_4_0() { return cStateAssignment_4_0; }
		
		//[State]
		public CrossReference getStateStateCrossReference_4_0_0() { return cStateStateCrossReference_4_0_0; }
		
		//ID
		public RuleCall getStateStateIDTerminalRuleCall_4_0_0_1() { return cStateStateIDTerminalRuleCall_4_0_0_1; }
		
		//active?="active"
		public Assignment getActiveAssignment_4_1() { return cActiveAssignment_4_1; }
		
		//"active"
		public Keyword getActiveActiveKeyword_4_1_0() { return cActiveActiveKeyword_4_1_0; }
		
		//passive?="passive"
		public Assignment getPassiveAssignment_4_2() { return cPassiveAssignment_4_2; }
		
		//"passive"
		public Keyword getPassivePassiveKeyword_4_2_0() { return cPassivePassiveKeyword_4_2_0; }
	}
	public class IN_WORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.IN_WORD");
		private final Keyword cInKeyword = (Keyword)rule.eContents().get(1);
		
		//fragment IN_WORD:
		//	"in";
		@Override public ParserRule getRule() { return rule; }
		
		//"in"
		public Keyword getInKeyword() { return cInKeyword; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cReferenceIdReferenceCrossReference_0_0 = (CrossReference)cReferenceAssignment_0.eContents().get(0);
		private final RuleCall cReferenceIdReferenceIDTerminalRuleCall_0_0_1 = (RuleCall)cReferenceIdReferenceCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPrimaryExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cINTEGERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPrimaryExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cFLOATTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNestedExprAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNestedExprExpressionParserRuleCall_3_1_0 = (RuleCall)cNestedExprAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//PrimaryExpression:
		//	reference=[IdReference] | {PrimaryExpression} INTEGER | {PrimaryExpression} FLOAT | "(" nestedExpr=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//reference=[IdReference] | {PrimaryExpression} INTEGER | {PrimaryExpression} FLOAT | "(" nestedExpr=Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//reference=[IdReference]
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }
		
		//[IdReference]
		public CrossReference getReferenceIdReferenceCrossReference_0_0() { return cReferenceIdReferenceCrossReference_0_0; }
		
		//ID
		public RuleCall getReferenceIdReferenceIDTerminalRuleCall_0_0_1() { return cReferenceIdReferenceIDTerminalRuleCall_0_0_1; }
		
		//{PrimaryExpression} INTEGER
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrimaryExpression}
		public Action getPrimaryExpressionAction_1_0() { return cPrimaryExpressionAction_1_0; }
		
		//INTEGER
		public RuleCall getINTEGERTerminalRuleCall_1_1() { return cINTEGERTerminalRuleCall_1_1; }
		
		//{PrimaryExpression} FLOAT
		public Group getGroup_2() { return cGroup_2; }
		
		//{PrimaryExpression}
		public Action getPrimaryExpressionAction_2_0() { return cPrimaryExpressionAction_2_0; }
		
		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_2_1() { return cFLOATTerminalRuleCall_2_1; }
		
		//"(" nestedExpr=Expression ")"
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//nestedExpr=Expression
		public Assignment getNestedExprAssignment_3_1() { return cNestedExprAssignment_3_1; }
		
		//Expression
		public RuleCall getNestedExprExpressionParserRuleCall_3_1_0() { return cNestedExprExpressionParserRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPostfixOpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInfixOpParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cUnaryOpAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cUnaryOpUnaryOpEnumRuleCall_4_0_0 = (RuleCall)cUnaryOpAssignment_4_0.eContents().get(0);
		private final Assignment cRightAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRightCastExpressionParserRuleCall_4_1_0 = (RuleCall)cRightAssignment_4_1.eContents().get(0);
		
		//UnaryExpression:
		//	PrimaryExpression | FunctionCall | PostfixOp | InfixOp | unaryOp=UnaryOp right=CastExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression | FunctionCall | PostfixOp | InfixOp | unaryOp=UnaryOp right=CastExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_1() { return cFunctionCallParserRuleCall_1; }
		
		//PostfixOp
		public RuleCall getPostfixOpParserRuleCall_2() { return cPostfixOpParserRuleCall_2; }
		
		//InfixOp
		public RuleCall getInfixOpParserRuleCall_3() { return cInfixOpParserRuleCall_3; }
		
		//unaryOp=UnaryOp right=CastExpression
		public Group getGroup_4() { return cGroup_4; }
		
		//unaryOp=UnaryOp
		public Assignment getUnaryOpAssignment_4_0() { return cUnaryOpAssignment_4_0; }
		
		//UnaryOp
		public RuleCall getUnaryOpUnaryOpEnumRuleCall_4_0_0() { return cUnaryOpUnaryOpEnumRuleCall_4_0_0; }
		
		//right=CastExpression
		public Assignment getRightAssignment_4_1() { return cRightAssignment_4_1; }
		
		//CastExpression
		public RuleCall getRightCastExpressionParserRuleCall_4_1_0() { return cRightCastExpressionParserRuleCall_4_1_0; }
	}
	public class CastExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.CastExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeReflexTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightCastExpressionParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		
		//CastExpression:
		//	UnaryExpression |
		//	"(" type=ReflexType ")" right=CastExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression | "(" type=ReflexType ")" right=CastExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//"(" type=ReflexType ")" right=CastExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//type=ReflexType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//ReflexType
		public RuleCall getTypeReflexTypeParserRuleCall_1_1_0() { return cTypeReflexTypeParserRuleCall_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//right=CastExpression
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }
		
		//CastExpression
		public RuleCall getRightCastExpressionParserRuleCall_1_3_0() { return cRightCastExpressionParserRuleCall_1_3_0; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCastExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicativeExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cMulOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMulOpMultiplicativeOpEnumRuleCall_1_1_0 = (RuleCall)cMulOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightCastExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression:
		//	CastExpression ({MultiplicativeExpression.left=current} mulOp=MultiplicativeOp right=CastExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CastExpression ({MultiplicativeExpression.left=current} mulOp=MultiplicativeOp right=CastExpression)*
		public Group getGroup() { return cGroup; }
		
		//CastExpression
		public RuleCall getCastExpressionParserRuleCall_0() { return cCastExpressionParserRuleCall_0; }
		
		//({MultiplicativeExpression.left=current} mulOp=MultiplicativeOp right=CastExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultiplicativeExpression.left=current}
		public Action getMultiplicativeExpressionLeftAction_1_0() { return cMultiplicativeExpressionLeftAction_1_0; }
		
		//mulOp=MultiplicativeOp
		public Assignment getMulOpAssignment_1_1() { return cMulOpAssignment_1_1; }
		
		//MultiplicativeOp
		public RuleCall getMulOpMultiplicativeOpEnumRuleCall_1_1_0() { return cMulOpMultiplicativeOpEnumRuleCall_1_1_0; }
		
		//right=CastExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//CastExpression
		public RuleCall getRightCastExpressionParserRuleCall_1_2_0() { return cRightCastExpressionParserRuleCall_1_2_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditiveExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cAddOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAddOpAdditiveOpEnumRuleCall_1_1_0 = (RuleCall)cAddOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditiveExpression:
		//	MultiplicativeExpression ({AdditiveExpression.left=current} addOp=AdditiveOp right=AdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicativeExpression ({AdditiveExpression.left=current} addOp=AdditiveOp right=AdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }
		
		//({AdditiveExpression.left=current} addOp=AdditiveOp right=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AdditiveExpression.left=current}
		public Action getAdditiveExpressionLeftAction_1_0() { return cAdditiveExpressionLeftAction_1_0; }
		
		//addOp=AdditiveOp
		public Assignment getAddOpAssignment_1_1() { return cAddOpAssignment_1_1; }
		
		//AdditiveOp
		public RuleCall getAddOpAdditiveOpEnumRuleCall_1_1_0() { return cAddOpAdditiveOpEnumRuleCall_1_1_0; }
		
		//right=AdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AdditiveExpression
		public RuleCall getRightAdditiveExpressionParserRuleCall_1_2_0() { return cRightAdditiveExpressionParserRuleCall_1_2_0; }
	}
	public class ShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.ShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cShiftExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cShiftOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cShiftOpShiftOpEnumRuleCall_1_1_0 = (RuleCall)cShiftOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightShiftExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ShiftExpression:
		//	AdditiveExpression ({ShiftExpression.left=current} shiftOp=ShiftOp right=ShiftExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExpression ({ShiftExpression.left=current} shiftOp=ShiftOp right=ShiftExpression)*
		public Group getGroup() { return cGroup; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }
		
		//({ShiftExpression.left=current} shiftOp=ShiftOp right=ShiftExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ShiftExpression.left=current}
		public Action getShiftExpressionLeftAction_1_0() { return cShiftExpressionLeftAction_1_0; }
		
		//shiftOp=ShiftOp
		public Assignment getShiftOpAssignment_1_1() { return cShiftOpAssignment_1_1; }
		
		//ShiftOp
		public RuleCall getShiftOpShiftOpEnumRuleCall_1_1_0() { return cShiftOpShiftOpEnumRuleCall_1_1_0; }
		
		//right=ShiftExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ShiftExpression
		public RuleCall getRightShiftExpressionParserRuleCall_1_2_0() { return cRightShiftExpressionParserRuleCall_1_2_0; }
	}
	public class CompareExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.CompareExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCheckStateExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cShiftExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cCompareExpressionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cCmpOpAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cCmpOpCompareOpEnumRuleCall_1_1_1_0 = (RuleCall)cCmpOpAssignment_1_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightCompareExpressionParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//CompareExpression:
		//	CheckStateExpression | ShiftExpression ({CompareExpression.left=current} cmpOp=CompareOp right=CompareExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CheckStateExpression | ShiftExpression ({CompareExpression.left=current} cmpOp=CompareOp right=CompareExpression)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CheckStateExpression
		public RuleCall getCheckStateExpressionParserRuleCall_0() { return cCheckStateExpressionParserRuleCall_0; }
		
		//ShiftExpression ({CompareExpression.left=current} cmpOp=CompareOp right=CompareExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//ShiftExpression
		public RuleCall getShiftExpressionParserRuleCall_1_0() { return cShiftExpressionParserRuleCall_1_0; }
		
		//({CompareExpression.left=current} cmpOp=CompareOp right=CompareExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{CompareExpression.left=current}
		public Action getCompareExpressionLeftAction_1_1_0() { return cCompareExpressionLeftAction_1_1_0; }
		
		//cmpOp=CompareOp
		public Assignment getCmpOpAssignment_1_1_1() { return cCmpOpAssignment_1_1_1; }
		
		//CompareOp
		public RuleCall getCmpOpCompareOpEnumRuleCall_1_1_1_0() { return cCmpOpCompareOpEnumRuleCall_1_1_1_0; }
		
		//right=CompareExpression
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//CompareExpression
		public RuleCall getRightCompareExpressionParserRuleCall_1_1_2_0() { return cRightCompareExpressionParserRuleCall_1_1_2_0; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cEqCmpOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEqCmpOpCompareEqOpEnumRuleCall_1_1_0 = (RuleCall)cEqCmpOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualityExpression:
		//	CompareExpression ({EqualityExpression.left=current} eqCmpOp=CompareEqOp right=EqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CompareExpression ({EqualityExpression.left=current} eqCmpOp=CompareEqOp right=EqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//CompareExpression
		public RuleCall getCompareExpressionParserRuleCall_0() { return cCompareExpressionParserRuleCall_0; }
		
		//({EqualityExpression.left=current} eqCmpOp=CompareEqOp right=EqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EqualityExpression.left=current}
		public Action getEqualityExpressionLeftAction_1_0() { return cEqualityExpressionLeftAction_1_0; }
		
		//eqCmpOp=CompareEqOp
		public Assignment getEqCmpOpAssignment_1_1() { return cEqCmpOpAssignment_1_1; }
		
		//CompareEqOp
		public RuleCall getEqCmpOpCompareEqOpEnumRuleCall_1_1_0() { return cEqCmpOpCompareEqOpEnumRuleCall_1_1_0; }
		
		//right=EqualityExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//EqualityExpression
		public RuleCall getRightEqualityExpressionParserRuleCall_1_2_0() { return cRightEqualityExpressionParserRuleCall_1_2_0; }
	}
	public class BitAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.BitAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cBIT_ANDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitAndExpression:
		//	EqualityExpression ({BitAndExpression.left=current} BIT_AND right=BitAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityExpression ({BitAndExpression.left=current} BIT_AND right=BitAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_0() { return cEqualityExpressionParserRuleCall_0; }
		
		//({BitAndExpression.left=current} BIT_AND right=BitAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitAndExpression.left=current}
		public Action getBitAndExpressionLeftAction_1_0() { return cBitAndExpressionLeftAction_1_0; }
		
		//BIT_AND
		public RuleCall getBIT_ANDTerminalRuleCall_1_1() { return cBIT_ANDTerminalRuleCall_1_1; }
		
		//right=BitAndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitAndExpression
		public RuleCall getRightBitAndExpressionParserRuleCall_1_2_0() { return cRightBitAndExpressionParserRuleCall_1_2_0; }
	}
	public class BitXorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.BitXorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitXorExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cBIT_XORTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitXorExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitXorExpression:
		//	BitAndExpression ({BitXorExpression.left=current} BIT_XOR right=BitXorExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BitAndExpression ({BitXorExpression.left=current} BIT_XOR right=BitXorExpression)*
		public Group getGroup() { return cGroup; }
		
		//BitAndExpression
		public RuleCall getBitAndExpressionParserRuleCall_0() { return cBitAndExpressionParserRuleCall_0; }
		
		//({BitXorExpression.left=current} BIT_XOR right=BitXorExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitXorExpression.left=current}
		public Action getBitXorExpressionLeftAction_1_0() { return cBitXorExpressionLeftAction_1_0; }
		
		//BIT_XOR
		public RuleCall getBIT_XORTerminalRuleCall_1_1() { return cBIT_XORTerminalRuleCall_1_1; }
		
		//right=BitXorExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitXorExpression
		public RuleCall getRightBitXorExpressionParserRuleCall_1_2_0() { return cRightBitXorExpressionParserRuleCall_1_2_0; }
	}
	public class BitOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.BitOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cBIT_ORTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BitOrExpression:
		//	BitXorExpression ({BitOrExpression.left=current} BIT_OR right=BitOrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BitXorExpression ({BitOrExpression.left=current} BIT_OR right=BitOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//BitXorExpression
		public RuleCall getBitXorExpressionParserRuleCall_0() { return cBitXorExpressionParserRuleCall_0; }
		
		//({BitOrExpression.left=current} BIT_OR right=BitOrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitOrExpression.left=current}
		public Action getBitOrExpressionLeftAction_1_0() { return cBitOrExpressionLeftAction_1_0; }
		
		//BIT_OR
		public RuleCall getBIT_ORTerminalRuleCall_1_1() { return cBIT_ORTerminalRuleCall_1_1; }
		
		//right=BitOrExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitOrExpression
		public RuleCall getRightBitOrExpressionParserRuleCall_1_2_0() { return cRightBitOrExpressionParserRuleCall_1_2_0; }
	}
	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cLOGICAL_ANDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLogicalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicalAndExpression:
		//	BitOrExpression ({LogicalAndExpression.left=current} LOGICAL_AND right=LogicalAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BitOrExpression ({LogicalAndExpression.left=current} LOGICAL_AND right=LogicalAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//BitOrExpression
		public RuleCall getBitOrExpressionParserRuleCall_0() { return cBitOrExpressionParserRuleCall_0; }
		
		//({LogicalAndExpression.left=current} LOGICAL_AND right=LogicalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalAndExpression.left=current}
		public Action getLogicalAndExpressionLeftAction_1_0() { return cLogicalAndExpressionLeftAction_1_0; }
		
		//LOGICAL_AND
		public RuleCall getLOGICAL_ANDTerminalRuleCall_1_1() { return cLOGICAL_ANDTerminalRuleCall_1_1; }
		
		//right=LogicalAndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LogicalAndExpression
		public RuleCall getRightLogicalAndExpressionParserRuleCall_1_2_0() { return cRightLogicalAndExpressionParserRuleCall_1_2_0; }
	}
	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cLOGICAL_ORTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLogicalOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicalOrExpression:
		//	LogicalAndExpression ({LogicalOrExpression.left=current} LOGICAL_OR right=LogicalOrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalAndExpression ({LogicalOrExpression.left=current} LOGICAL_OR right=LogicalOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//LogicalAndExpression
		public RuleCall getLogicalAndExpressionParserRuleCall_0() { return cLogicalAndExpressionParserRuleCall_0; }
		
		//({LogicalOrExpression.left=current} LOGICAL_OR right=LogicalOrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalOrExpression.left=current}
		public Action getLogicalOrExpressionLeftAction_1_0() { return cLogicalOrExpressionLeftAction_1_0; }
		
		//LOGICAL_OR
		public RuleCall getLOGICAL_ORTerminalRuleCall_1_1() { return cLOGICAL_ORTerminalRuleCall_1_1; }
		
		//right=LogicalOrExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//LogicalOrExpression
		public RuleCall getRightLogicalOrExpressionParserRuleCall_1_2_0() { return cRightLogicalOrExpressionParserRuleCall_1_2_0; }
	}
	public class AssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.AssignmentExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cAssignVarAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAssignVarIDTerminalRuleCall_0_0_0 = (RuleCall)cAssignVarAssignment_0_0.eContents().get(0);
		private final Assignment cAssignOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAssignOpAssignOperatorEnumRuleCall_0_1_0 = (RuleCall)cAssignOpAssignment_0_1.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprLogicalOrExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//AssignmentExpression:
		//	(assignVar=ID assignOp=AssignOperator)? expr=LogicalOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//(assignVar=ID assignOp=AssignOperator)? expr=LogicalOrExpression
		public Group getGroup() { return cGroup; }
		
		//(assignVar=ID assignOp=AssignOperator)?
		public Group getGroup_0() { return cGroup_0; }
		
		//assignVar=ID
		public Assignment getAssignVarAssignment_0_0() { return cAssignVarAssignment_0_0; }
		
		//ID
		public RuleCall getAssignVarIDTerminalRuleCall_0_0_0() { return cAssignVarIDTerminalRuleCall_0_0_0; }
		
		//assignOp=AssignOperator
		public Assignment getAssignOpAssignment_0_1() { return cAssignOpAssignment_0_1; }
		
		//AssignOperator
		public RuleCall getAssignOpAssignOperatorEnumRuleCall_0_1_0() { return cAssignOpAssignOperatorEnumRuleCall_0_1_0; }
		
		//expr=LogicalOrExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//LogicalOrExpression
		public RuleCall getExprLogicalOrExpressionParserRuleCall_1_0() { return cExprLogicalOrExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Expression");
		private final RuleCall cAssignmentExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	AssignmentExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//AssignmentExpression
		public RuleCall getAssignmentExpressionParserRuleCall() { return cAssignmentExpressionParserRuleCall; }
	}
	public class CTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.CType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cVOID_C_TYPETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cFLOAT_C_TYPETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cCTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cDOUBLE_C_TYPETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cCTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cSignSpecAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSignSpecCTypeSignSpecEnumRuleCall_3_1_0 = (RuleCall)cSignSpecAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cGroup_3.eContents().get(2);
		private final RuleCall cSHORT_C_TYPETerminalRuleCall_3_2_0 = (RuleCall)cAlternatives_3_2.eContents().get(0);
		private final RuleCall cINT_C_TYPETerminalRuleCall_3_2_1 = (RuleCall)cAlternatives_3_2.eContents().get(1);
		private final RuleCall cLONG_C_TYPETerminalRuleCall_3_2_2 = (RuleCall)cAlternatives_3_2.eContents().get(2);
		
		//// TODO: fix types
		//CType:
		//	{CType} VOID_C_TYPE | {CType} FLOAT_C_TYPE | {CType} DOUBLE_C_TYPE | {CType} signSpec?=CTypeSignSpec? (SHORT_C_TYPE
		//	| INT_C_TYPE | LONG_C_TYPE);
		@Override public ParserRule getRule() { return rule; }
		
		//{CType} VOID_C_TYPE | {CType} FLOAT_C_TYPE | {CType} DOUBLE_C_TYPE | {CType} signSpec?=CTypeSignSpec? (SHORT_C_TYPE |
		//INT_C_TYPE | LONG_C_TYPE)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{CType} VOID_C_TYPE
		public Group getGroup_0() { return cGroup_0; }
		
		//{CType}
		public Action getCTypeAction_0_0() { return cCTypeAction_0_0; }
		
		//VOID_C_TYPE
		public RuleCall getVOID_C_TYPETerminalRuleCall_0_1() { return cVOID_C_TYPETerminalRuleCall_0_1; }
		
		//{CType} FLOAT_C_TYPE
		public Group getGroup_1() { return cGroup_1; }
		
		//{CType}
		public Action getCTypeAction_1_0() { return cCTypeAction_1_0; }
		
		//FLOAT_C_TYPE
		public RuleCall getFLOAT_C_TYPETerminalRuleCall_1_1() { return cFLOAT_C_TYPETerminalRuleCall_1_1; }
		
		//{CType} DOUBLE_C_TYPE
		public Group getGroup_2() { return cGroup_2; }
		
		//{CType}
		public Action getCTypeAction_2_0() { return cCTypeAction_2_0; }
		
		//DOUBLE_C_TYPE
		public RuleCall getDOUBLE_C_TYPETerminalRuleCall_2_1() { return cDOUBLE_C_TYPETerminalRuleCall_2_1; }
		
		//{CType} signSpec?=CTypeSignSpec? (SHORT_C_TYPE | INT_C_TYPE | LONG_C_TYPE)
		public Group getGroup_3() { return cGroup_3; }
		
		//{CType}
		public Action getCTypeAction_3_0() { return cCTypeAction_3_0; }
		
		//signSpec?=CTypeSignSpec?
		public Assignment getSignSpecAssignment_3_1() { return cSignSpecAssignment_3_1; }
		
		//CTypeSignSpec
		public RuleCall getSignSpecCTypeSignSpecEnumRuleCall_3_1_0() { return cSignSpecCTypeSignSpecEnumRuleCall_3_1_0; }
		
		//(SHORT_C_TYPE | INT_C_TYPE | LONG_C_TYPE)
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }
		
		//SHORT_C_TYPE
		public RuleCall getSHORT_C_TYPETerminalRuleCall_3_2_0() { return cSHORT_C_TYPETerminalRuleCall_3_2_0; }
		
		//INT_C_TYPE
		public RuleCall getINT_C_TYPETerminalRuleCall_3_2_1() { return cINT_C_TYPETerminalRuleCall_3_2_1; }
		
		//LONG_C_TYPE
		public RuleCall getLONG_C_TYPETerminalRuleCall_3_2_2() { return cLONG_C_TYPETerminalRuleCall_3_2_2; }
	}
	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.IntegerType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBOOL_TYPETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINT_C_TYPETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSHORT_C_TYPETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLONG_C_TYPETerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//IntegerType:
		//	BOOL_TYPE | INT_C_TYPE | SHORT_C_TYPE | LONG_C_TYPE;
		@Override public ParserRule getRule() { return rule; }
		
		//BOOL_TYPE | INT_C_TYPE | SHORT_C_TYPE | LONG_C_TYPE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BOOL_TYPE
		public RuleCall getBOOL_TYPETerminalRuleCall_0() { return cBOOL_TYPETerminalRuleCall_0; }
		
		//INT_C_TYPE
		public RuleCall getINT_C_TYPETerminalRuleCall_1() { return cINT_C_TYPETerminalRuleCall_1; }
		
		//SHORT_C_TYPE
		public RuleCall getSHORT_C_TYPETerminalRuleCall_2() { return cSHORT_C_TYPETerminalRuleCall_2; }
		
		//LONG_C_TYPE
		public RuleCall getLONG_C_TYPETerminalRuleCall_3() { return cLONG_C_TYPETerminalRuleCall_3; }
	}
	public class ReflexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.ReflexType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cReflexTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cBOOL_TYPETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ReflexType:
		//	CType | {ReflexType} BOOL_TYPE;
		@Override public ParserRule getRule() { return rule; }
		
		//CType | {ReflexType} BOOL_TYPE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CType
		public RuleCall getCTypeParserRuleCall_0() { return cCTypeParserRuleCall_0; }
		
		//{ReflexType} BOOL_TYPE
		public Group getGroup_1() { return cGroup_1; }
		
		//{ReflexType}
		public Action getReflexTypeAction_1_0() { return cReflexTypeAction_1_0; }
		
		//BOOL_TYPE
		public RuleCall getBOOL_TYPETerminalRuleCall_1_1() { return cBOOL_TYPETerminalRuleCall_1_1; }
	}
	public class TactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Tact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClockKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTEGERTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Tact:
		//	"clock" value=INTEGER ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"clock" value=INTEGER ";"
		public Group getGroup() { return cGroup; }
		
		//"clock"
		public Keyword getClockKeyword_0() { return cClockKeyword_0; }
		
		//value=INTEGER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_1_0() { return cValueINTEGERTerminalRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Time");
		private final Assignment cTicksAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTicksINTEGERTerminalRuleCall_0 = (RuleCall)cTicksAssignment.eContents().get(0);
		
		//Time:
		//	ticks=INTEGER;
		@Override public ParserRule getRule() { return rule; }
		
		//ticks=INTEGER
		public Assignment getTicksAssignment() { return cTicksAssignment; }
		
		//INTEGER
		public RuleCall getTicksINTEGERTerminalRuleCall_0() { return cTicksINTEGERTerminalRuleCall_0; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.Annotation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cKeyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cKeyAnnotationKeyParserRuleCall_0_0_0 = (RuleCall)cKeyAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cKeyAnnotationKeyParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		
		//Annotation:
		//	key=AnnotationKey ":" value=STRING | key=AnnotationKey;
		@Override public ParserRule getRule() { return rule; }
		
		//key=AnnotationKey ":" value=STRING | key=AnnotationKey
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//key=AnnotationKey ":" value=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//key=AnnotationKey
		public Assignment getKeyAssignment_0_0() { return cKeyAssignment_0_0; }
		
		//AnnotationKey
		public RuleCall getKeyAnnotationKeyParserRuleCall_0_0_0() { return cKeyAnnotationKeyParserRuleCall_0_0_0; }
		
		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//value=STRING
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_2_0() { return cValueSTRINGTerminalRuleCall_0_2_0; }
		
		//key=AnnotationKey
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }
		
		//AnnotationKey
		public RuleCall getKeyAnnotationKeyParserRuleCall_1_0() { return cKeyAnnotationKeyParserRuleCall_1_0; }
	}
	public class AnnotationKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.AnnotationKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AnnotationKey:
		//	ID "." ID | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID "." ID | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID "." ID
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_2() { return cIDTerminalRuleCall_0_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class RegisterTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.RegisterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINPUTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINPUTInputKeyword_0_0 = (Keyword)cINPUTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTPUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTPUTOutputKeyword_1_0 = (Keyword)cOUTPUTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum RegisterType:
		//	INPUT='input' | OUTPUT='output';
		public EnumRule getRule() { return rule; }
		
		//INPUT='input' | OUTPUT='output'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INPUT='input'
		public EnumLiteralDeclaration getINPUTEnumLiteralDeclaration_0() { return cINPUTEnumLiteralDeclaration_0; }
		
		//'input'
		public Keyword getINPUTInputKeyword_0_0() { return cINPUTInputKeyword_0_0; }
		
		//OUTPUT='output'
		public EnumLiteralDeclaration getOUTPUTEnumLiteralDeclaration_1() { return cOUTPUTEnumLiteralDeclaration_1; }
		
		//'output'
		public Keyword getOUTPUTOutputKeyword_1_0() { return cOUTPUTOutputKeyword_1_0; }
	}
	public class InfixPostfixOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.InfixPostfixOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINCEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINCPlusSignPlusSignKeyword_0_0 = (Keyword)cINCEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDECEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDECHyphenMinusHyphenMinusKeyword_1_0 = (Keyword)cDECEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum InfixPostfixOp:
		//	INC="++" | DEC="--";
		public EnumRule getRule() { return rule; }
		
		//INC="++" | DEC="--"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INC="++"
		public EnumLiteralDeclaration getINCEnumLiteralDeclaration_0() { return cINCEnumLiteralDeclaration_0; }
		
		//"++"
		public Keyword getINCPlusSignPlusSignKeyword_0_0() { return cINCPlusSignPlusSignKeyword_0_0; }
		
		//DEC="--"
		public EnumLiteralDeclaration getDECEnumLiteralDeclaration_1() { return cDECEnumLiteralDeclaration_1; }
		
		//"--"
		public Keyword getDECHyphenMinusHyphenMinusKeyword_1_0() { return cDECHyphenMinusHyphenMinusKeyword_1_0; }
	}
	public class AssignOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.AssignOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cASSIGNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cASSIGNEqualsSignKeyword_0_0 = (Keyword)cASSIGNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMULEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMULAsteriskEqualsSignKeyword_1_0 = (Keyword)cMULEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDIVSolidusEqualsSignKeyword_2_0 = (Keyword)cDIVEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMODPlusSignEqualsSignKeyword_3_0 = (Keyword)cMODEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSUBHyphenMinusEqualsSignKeyword_4_0 = (Keyword)cSUBEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCINEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCINLessThanSignLessThanSignEqualsSignKeyword_5_0 = (Keyword)cCINEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cCOUTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cCOUTGreaterThanSignGreaterThanSignEqualsSignKeyword_6_0 = (Keyword)cCOUTEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cBIT_ANDEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cBIT_ANDAmpersandEqualsSignKeyword_7_0 = (Keyword)cBIT_ANDEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cBIT_XOREnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cBIT_XORCircumflexAccentEqualsSignKeyword_8_0 = (Keyword)cBIT_XOREnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cBIT_OREnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cBIT_ORVerticalLineEqualsSignKeyword_9_0 = (Keyword)cBIT_OREnumLiteralDeclaration_9.eContents().get(0);
		
		//enum AssignOperator:
		//	ASSIGN="=" | MUL='*=' | DIV="/=" | MOD="+=" | SUB="-=" | CIN="<<=" | COUT=">>=" | BIT_AND="&=" | BIT_XOR="^=" |
		//	BIT_OR="|=";
		public EnumRule getRule() { return rule; }
		
		//ASSIGN="=" | MUL='*=' | DIV="/=" | MOD="+=" | SUB="-=" | CIN="<<=" | COUT=">>=" | BIT_AND="&=" | BIT_XOR="^=" |
		//BIT_OR="|="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ASSIGN="="
		public EnumLiteralDeclaration getASSIGNEnumLiteralDeclaration_0() { return cASSIGNEnumLiteralDeclaration_0; }
		
		//"="
		public Keyword getASSIGNEqualsSignKeyword_0_0() { return cASSIGNEqualsSignKeyword_0_0; }
		
		//MUL='*='
		public EnumLiteralDeclaration getMULEnumLiteralDeclaration_1() { return cMULEnumLiteralDeclaration_1; }
		
		//'*='
		public Keyword getMULAsteriskEqualsSignKeyword_1_0() { return cMULAsteriskEqualsSignKeyword_1_0; }
		
		//DIV="/="
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_2() { return cDIVEnumLiteralDeclaration_2; }
		
		//"/="
		public Keyword getDIVSolidusEqualsSignKeyword_2_0() { return cDIVSolidusEqualsSignKeyword_2_0; }
		
		//MOD="+="
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_3() { return cMODEnumLiteralDeclaration_3; }
		
		//"+="
		public Keyword getMODPlusSignEqualsSignKeyword_3_0() { return cMODPlusSignEqualsSignKeyword_3_0; }
		
		//SUB="-="
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_4() { return cSUBEnumLiteralDeclaration_4; }
		
		//"-="
		public Keyword getSUBHyphenMinusEqualsSignKeyword_4_0() { return cSUBHyphenMinusEqualsSignKeyword_4_0; }
		
		//CIN="<<="
		public EnumLiteralDeclaration getCINEnumLiteralDeclaration_5() { return cCINEnumLiteralDeclaration_5; }
		
		//"<<="
		public Keyword getCINLessThanSignLessThanSignEqualsSignKeyword_5_0() { return cCINLessThanSignLessThanSignEqualsSignKeyword_5_0; }
		
		//COUT=">>="
		public EnumLiteralDeclaration getCOUTEnumLiteralDeclaration_6() { return cCOUTEnumLiteralDeclaration_6; }
		
		//">>="
		public Keyword getCOUTGreaterThanSignGreaterThanSignEqualsSignKeyword_6_0() { return cCOUTGreaterThanSignGreaterThanSignEqualsSignKeyword_6_0; }
		
		//BIT_AND="&="
		public EnumLiteralDeclaration getBIT_ANDEnumLiteralDeclaration_7() { return cBIT_ANDEnumLiteralDeclaration_7; }
		
		//"&="
		public Keyword getBIT_ANDAmpersandEqualsSignKeyword_7_0() { return cBIT_ANDAmpersandEqualsSignKeyword_7_0; }
		
		//BIT_XOR="^="
		public EnumLiteralDeclaration getBIT_XOREnumLiteralDeclaration_8() { return cBIT_XOREnumLiteralDeclaration_8; }
		
		//"^="
		public Keyword getBIT_XORCircumflexAccentEqualsSignKeyword_8_0() { return cBIT_XORCircumflexAccentEqualsSignKeyword_8_0; }
		
		//BIT_OR="|="
		public EnumLiteralDeclaration getBIT_OREnumLiteralDeclaration_9() { return cBIT_OREnumLiteralDeclaration_9; }
		
		//"|="
		public Keyword getBIT_ORVerticalLineEqualsSignKeyword_9_0() { return cBIT_ORVerticalLineEqualsSignKeyword_9_0; }
	}
	public class UnaryOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.UnaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBIT_NOTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBIT_NOTTildeKeyword_2_0 = (Keyword)cBIT_NOTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLOGICAL_NOTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLOGICAL_NOTExclamationMarkKeyword_3_0 = (Keyword)cLOGICAL_NOTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum UnaryOp:
		//	PLUS="+" | MINUS="-" | BIT_NOT="~" | LOGICAL_NOT="!";
		public EnumRule getRule() { return rule; }
		
		//PLUS="+" | MINUS="-" | BIT_NOT="~" | LOGICAL_NOT="!"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS="+"
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }
		
		//"+"
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }
		
		//MINUS="-"
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }
		
		//"-"
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }
		
		//BIT_NOT="~"
		public EnumLiteralDeclaration getBIT_NOTEnumLiteralDeclaration_2() { return cBIT_NOTEnumLiteralDeclaration_2; }
		
		//"~"
		public Keyword getBIT_NOTTildeKeyword_2_0() { return cBIT_NOTTildeKeyword_2_0; }
		
		//LOGICAL_NOT="!"
		public EnumLiteralDeclaration getLOGICAL_NOTEnumLiteralDeclaration_3() { return cLOGICAL_NOTEnumLiteralDeclaration_3; }
		
		//"!"
		public Keyword getLOGICAL_NOTExclamationMarkKeyword_3_0() { return cLOGICAL_NOTExclamationMarkKeyword_3_0; }
	}
	public class CompareOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.CompareOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESSLessThanSignKeyword_0_0 = (Keyword)cLESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATERGreaterThanSignKeyword_1_0 = (Keyword)cGREATEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_EQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESS_EQEqualsSignLessThanSignKeyword_2_0 = (Keyword)cLESS_EQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_EQEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATER_EQGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGREATER_EQEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum CompareOp:
		//	LESS="<" | GREATER=">" | LESS_EQ="=<" | GREATER_EQ=">=";
		public EnumRule getRule() { return rule; }
		
		//LESS="<" | GREATER=">" | LESS_EQ="=<" | GREATER_EQ=">="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LESS="<"
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_0() { return cLESSEnumLiteralDeclaration_0; }
		
		//"<"
		public Keyword getLESSLessThanSignKeyword_0_0() { return cLESSLessThanSignKeyword_0_0; }
		
		//GREATER=">"
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_1() { return cGREATEREnumLiteralDeclaration_1; }
		
		//">"
		public Keyword getGREATERGreaterThanSignKeyword_1_0() { return cGREATERGreaterThanSignKeyword_1_0; }
		
		//LESS_EQ="=<"
		public EnumLiteralDeclaration getLESS_EQEnumLiteralDeclaration_2() { return cLESS_EQEnumLiteralDeclaration_2; }
		
		//"=<"
		public Keyword getLESS_EQEqualsSignLessThanSignKeyword_2_0() { return cLESS_EQEqualsSignLessThanSignKeyword_2_0; }
		
		//GREATER_EQ=">="
		public EnumLiteralDeclaration getGREATER_EQEnumLiteralDeclaration_3() { return cGREATER_EQEnumLiteralDeclaration_3; }
		
		//">="
		public Keyword getGREATER_EQGreaterThanSignEqualsSignKeyword_3_0() { return cGREATER_EQGreaterThanSignEqualsSignKeyword_3_0; }
	}
	public class CompareEqOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.CompareEqOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOT_EQExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNOT_EQEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CompareEqOp:
		//	EQ="==" | NOT_EQ="!=";
		public EnumRule getRule() { return rule; }
		
		//EQ="==" | NOT_EQ="!="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ="=="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }
		
		//"=="
		public Keyword getEQEqualsSignEqualsSignKeyword_0_0() { return cEQEqualsSignEqualsSignKeyword_0_0; }
		
		//NOT_EQ="!="
		public EnumLiteralDeclaration getNOT_EQEnumLiteralDeclaration_1() { return cNOT_EQEnumLiteralDeclaration_1; }
		
		//"!="
		public Keyword getNOT_EQExclamationMarkEqualsSignKeyword_1_0() { return cNOT_EQExclamationMarkEqualsSignKeyword_1_0; }
	}
	public class ShiftOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.ShiftOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFT_SHIFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFT_SHIFTGreaterThanSignGreaterThanSignKeyword_0_0 = (Keyword)cLEFT_SHIFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHT_SHIFTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRIGHT_SHIFTLessThanSignLessThanSignKeyword_1_0 = (Keyword)cRIGHT_SHIFTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ShiftOp:
		//	LEFT_SHIFT=">>" | RIGHT_SHIFT="<<";
		public EnumRule getRule() { return rule; }
		
		//LEFT_SHIFT=">>" | RIGHT_SHIFT="<<"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT_SHIFT=">>"
		public EnumLiteralDeclaration getLEFT_SHIFTEnumLiteralDeclaration_0() { return cLEFT_SHIFTEnumLiteralDeclaration_0; }
		
		//">>"
		public Keyword getLEFT_SHIFTGreaterThanSignGreaterThanSignKeyword_0_0() { return cLEFT_SHIFTGreaterThanSignGreaterThanSignKeyword_0_0; }
		
		//RIGHT_SHIFT="<<"
		public EnumLiteralDeclaration getRIGHT_SHIFTEnumLiteralDeclaration_1() { return cRIGHT_SHIFTEnumLiteralDeclaration_1; }
		
		//"<<"
		public Keyword getRIGHT_SHIFTLessThanSignLessThanSignKeyword_1_0() { return cRIGHT_SHIFTLessThanSignLessThanSignKeyword_1_0; }
	}
	public class AdditiveOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.AdditiveOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditiveOp:
		//	PLUS="+" | MINUS="-";
		public EnumRule getRule() { return rule; }
		
		//PLUS="+" | MINUS="-"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS="+"
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }
		
		//"+"
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }
		
		//MINUS="-"
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }
		
		//"-"
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }
	}
	public class MultiplicativeOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.MultiplicativeOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULAsteriskKeyword_0_0 = (Keyword)cMULEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVSolidusKeyword_1_0 = (Keyword)cDIVEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMODPercentSignKeyword_2_0 = (Keyword)cMODEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MultiplicativeOp:
		//	MUL="*" | DIV="/" | MOD="%";
		public EnumRule getRule() { return rule; }
		
		//MUL="*" | DIV="/" | MOD="%"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MUL="*"
		public EnumLiteralDeclaration getMULEnumLiteralDeclaration_0() { return cMULEnumLiteralDeclaration_0; }
		
		//"*"
		public Keyword getMULAsteriskKeyword_0_0() { return cMULAsteriskKeyword_0_0; }
		
		//DIV="/"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_1() { return cDIVEnumLiteralDeclaration_1; }
		
		//"/"
		public Keyword getDIVSolidusKeyword_1_0() { return cDIVSolidusKeyword_1_0; }
		
		//MOD="%"
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_2() { return cMODEnumLiteralDeclaration_2; }
		
		//"%"
		public Keyword getMODPercentSignKeyword_2_0() { return cMODPercentSignKeyword_2_0; }
	}
	public class CTypeSignSpecElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.CTypeSignSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSIGNEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSIGNEDSignedKeyword_0_0 = (Keyword)cSIGNEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUNSIGNEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUNSIGNEDUnsignedKeyword_1_0 = (Keyword)cUNSIGNEDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CTypeSignSpec:
		//	SIGNED="signed" | UNSIGNED="unsigned";
		public EnumRule getRule() { return rule; }
		
		//SIGNED="signed" | UNSIGNED="unsigned"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SIGNED="signed"
		public EnumLiteralDeclaration getSIGNEDEnumLiteralDeclaration_0() { return cSIGNEDEnumLiteralDeclaration_0; }
		
		//"signed"
		public Keyword getSIGNEDSignedKeyword_0_0() { return cSIGNEDSignedKeyword_0_0; }
		
		//UNSIGNED="unsigned"
		public EnumLiteralDeclaration getUNSIGNEDEnumLiteralDeclaration_1() { return cUNSIGNEDEnumLiteralDeclaration_1; }
		
		//"unsigned"
		public Keyword getUNSIGNEDUnsignedKeyword_1_0() { return cUNSIGNEDUnsignedKeyword_1_0; }
	}
	
	private final ProgramElements pProgram;
	private final ProcessElements pProcess;
	private final StateElements pState;
	private final ProcessVariableElements pProcessVariable;
	private final ImportedVariableElements pImportedVariable;
	private final DeclaredVariableElements pDeclaredVariable;
	private final GlobalVariableElements pGlobalVariable;
	private final PhysicalVariableElements pPhysicalVariable;
	private final RegisterPortMappingElements pRegisterPortMapping;
	private final ProgramVariableElements pProgramVariable;
	private final StatementSequenceElements pStatementSequence;
	private final CompoundStatementElements pCompoundStatement;
	private final TimeoutFunctionElements pTimeoutFunction;
	private final TimeAmountOrRefElements pTimeAmountOrRef;
	private final StatementElements pStatement;
	private final IfElseStatElements pIfElseStat;
	private final SwitchStatElements pSwitchStat;
	private final CaseStatElements pCaseStat;
	private final BreakStatElements pBreakStat;
	private final StartProcStatElements pStartProcStat;
	private final StopProcStatElements pStopProcStat;
	private final ErrorStatElements pErrorStat;
	private final RestartStatElements pRestartStat;
	private final ResetStatElements pResetStat;
	private final SetStateStatElements pSetStateStat;
	private final FunctionElements pFunction;
	private final RegisterTypeElements eRegisterType;
	private final RegisterElements pRegister;
	private final ConstElements pConst;
	private final EnumElements pEnum;
	private final EnumMemberElements pEnumMember;
	private final InfixOpElements pInfixOp;
	private final PostfixOpElements pPostfixOp;
	private final FunctionCallElements pFunctionCall;
	private final IdReferenceElements pIdReference;
	private final CheckStateExpressionElements pCheckStateExpression;
	private final IN_WORDElements pIN_WORD;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final CastExpressionElements pCastExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final ShiftExpressionElements pShiftExpression;
	private final CompareExpressionElements pCompareExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final BitAndExpressionElements pBitAndExpression;
	private final BitXorExpressionElements pBitXorExpression;
	private final BitOrExpressionElements pBitOrExpression;
	private final LogicalAndExpressionElements pLogicalAndExpression;
	private final LogicalOrExpressionElements pLogicalOrExpression;
	private final AssignmentExpressionElements pAssignmentExpression;
	private final ExpressionElements pExpression;
	private final InfixPostfixOpElements eInfixPostfixOp;
	private final AssignOperatorElements eAssignOperator;
	private final UnaryOpElements eUnaryOp;
	private final CompareOpElements eCompareOp;
	private final CompareEqOpElements eCompareEqOp;
	private final ShiftOpElements eShiftOp;
	private final AdditiveOpElements eAdditiveOp;
	private final MultiplicativeOpElements eMultiplicativeOp;
	private final CTypeElements pCType;
	private final CTypeSignSpecElements eCTypeSignSpec;
	private final IntegerTypeElements pIntegerType;
	private final ReflexTypeElements pReflexType;
	private final TerminalRule tLOGICAL_OR;
	private final TerminalRule tLOGICAL_AND;
	private final TerminalRule tBIT_OR;
	private final TerminalRule tBIT_XOR;
	private final TerminalRule tBIT_AND;
	private final TerminalRule tVOID_C_TYPE;
	private final TerminalRule tFLOAT_C_TYPE;
	private final TerminalRule tDOUBLE_C_TYPE;
	private final TerminalRule tSHORT_C_TYPE;
	private final TerminalRule tINT_C_TYPE;
	private final TerminalRule tLONG_C_TYPE;
	private final TerminalRule tBOOL_TYPE;
	private final TactElements pTact;
	private final TerminalRule tINTEGER;
	private final TerminalRule tFLOAT;
	private final TerminalRule tDEC_FLOAT;
	private final TerminalRule tHEX_FLOAT;
	private final TerminalRule tDEC_SEQUENCE;
	private final TerminalRule tHEX_SEQUENCE;
	private final TerminalRule tBIN_EXPONENT;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tSIGN;
	private final TerminalRule tDECIMAL;
	private final TerminalRule tOCTAL;
	private final TerminalRule tHEX;
	private final TerminalRule tHEX_PREFIX;
	private final TimeElements pTime;
	private final TerminalRule tLONG;
	private final TerminalRule tFLOAT_SUFFIX;
	private final TerminalRule tUNSIGNED;
	private final AnnotationElements pAnnotation;
	private final AnnotationKeyElements pAnnotationKey;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReflexGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pProcess = new ProcessElements();
		this.pState = new StateElements();
		this.pProcessVariable = new ProcessVariableElements();
		this.pImportedVariable = new ImportedVariableElements();
		this.pDeclaredVariable = new DeclaredVariableElements();
		this.pGlobalVariable = new GlobalVariableElements();
		this.pPhysicalVariable = new PhysicalVariableElements();
		this.pRegisterPortMapping = new RegisterPortMappingElements();
		this.pProgramVariable = new ProgramVariableElements();
		this.pStatementSequence = new StatementSequenceElements();
		this.pCompoundStatement = new CompoundStatementElements();
		this.pTimeoutFunction = new TimeoutFunctionElements();
		this.pTimeAmountOrRef = new TimeAmountOrRefElements();
		this.pStatement = new StatementElements();
		this.pIfElseStat = new IfElseStatElements();
		this.pSwitchStat = new SwitchStatElements();
		this.pCaseStat = new CaseStatElements();
		this.pBreakStat = new BreakStatElements();
		this.pStartProcStat = new StartProcStatElements();
		this.pStopProcStat = new StopProcStatElements();
		this.pErrorStat = new ErrorStatElements();
		this.pRestartStat = new RestartStatElements();
		this.pResetStat = new ResetStatElements();
		this.pSetStateStat = new SetStateStatElements();
		this.pFunction = new FunctionElements();
		this.eRegisterType = new RegisterTypeElements();
		this.pRegister = new RegisterElements();
		this.pConst = new ConstElements();
		this.pEnum = new EnumElements();
		this.pEnumMember = new EnumMemberElements();
		this.pInfixOp = new InfixOpElements();
		this.pPostfixOp = new PostfixOpElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pIdReference = new IdReferenceElements();
		this.pCheckStateExpression = new CheckStateExpressionElements();
		this.pIN_WORD = new IN_WORDElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pCastExpression = new CastExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pShiftExpression = new ShiftExpressionElements();
		this.pCompareExpression = new CompareExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pBitAndExpression = new BitAndExpressionElements();
		this.pBitXorExpression = new BitXorExpressionElements();
		this.pBitOrExpression = new BitOrExpressionElements();
		this.pLogicalAndExpression = new LogicalAndExpressionElements();
		this.pLogicalOrExpression = new LogicalOrExpressionElements();
		this.pAssignmentExpression = new AssignmentExpressionElements();
		this.pExpression = new ExpressionElements();
		this.eInfixPostfixOp = new InfixPostfixOpElements();
		this.eAssignOperator = new AssignOperatorElements();
		this.eUnaryOp = new UnaryOpElements();
		this.eCompareOp = new CompareOpElements();
		this.eCompareEqOp = new CompareEqOpElements();
		this.eShiftOp = new ShiftOpElements();
		this.eAdditiveOp = new AdditiveOpElements();
		this.eMultiplicativeOp = new MultiplicativeOpElements();
		this.pCType = new CTypeElements();
		this.eCTypeSignSpec = new CTypeSignSpecElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pReflexType = new ReflexTypeElements();
		this.tLOGICAL_OR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.LOGICAL_OR");
		this.tLOGICAL_AND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.LOGICAL_AND");
		this.tBIT_OR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.BIT_OR");
		this.tBIT_XOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.BIT_XOR");
		this.tBIT_AND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.BIT_AND");
		this.tVOID_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.VOID_C_TYPE");
		this.tFLOAT_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.FLOAT_C_TYPE");
		this.tDOUBLE_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.DOUBLE_C_TYPE");
		this.tSHORT_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.SHORT_C_TYPE");
		this.tINT_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.INT_C_TYPE");
		this.tLONG_C_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.LONG_C_TYPE");
		this.tBOOL_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.BOOL_TYPE");
		this.pTact = new TactElements();
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.INTEGER");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.FLOAT");
		this.tDEC_FLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.DEC_FLOAT");
		this.tHEX_FLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.HEX_FLOAT");
		this.tDEC_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.DEC_SEQUENCE");
		this.tHEX_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.HEX_SEQUENCE");
		this.tBIN_EXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.BIN_EXPONENT");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.EXPONENT");
		this.tSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.SIGN");
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.DECIMAL");
		this.tOCTAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.OCTAL");
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.HEX");
		this.tHEX_PREFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.HEX_PREFIX");
		this.pTime = new TimeElements();
		this.tLONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.LONG");
		this.tFLOAT_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.FLOAT_SUFFIX");
		this.tUNSIGNED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ru.iaie.reflex.Reflex.UNSIGNED");
		this.pAnnotation = new AnnotationElements();
		this.pAnnotationKey = new AnnotationKeyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ru.iaie.reflex.Reflex".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	("[" annotations+=Annotation "]")*
	//	"program" name=ID "{"
	//	ticks=Tact? (consts+=Const | enums+=Enum | functions+=Function | globalVars+=GlobalVariable | registers+=Register |
	//	processes+=Process)*
	//	"}";
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Process:
	//	("[" annotations+=Annotation "]")*
	//	"process" name=ID "{"
	//	variables+=ProcessVariable*
	//	states+=State*
	//	"}";
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//State:
	//	("[" annotations+=Annotation "]")*
	//	"state" name=ID looped?="looped"? "{"
	//	stateFunction=StatementSequence
	//	timeoutFunction=TimeoutFunction?
	//	"}";
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//ProcessVariable:
	//	(ImportedVariable | DeclaredVariable) ";";
	public ProcessVariableElements getProcessVariableAccess() {
		return pProcessVariable;
	}
	
	public ParserRule getProcessVariableRule() {
		return getProcessVariableAccess().getRule();
	}
	
	//ImportedVariable:
	//	"from" "process" process=[Process] variables+=[DeclaredVariable] ("," variables+=[DeclaredVariable])*;
	public ImportedVariableElements getImportedVariableAccess() {
		return pImportedVariable;
	}
	
	public ParserRule getImportedVariableRule() {
		return getImportedVariableAccess().getRule();
	}
	
	//DeclaredVariable:
	//	(PhysicalVariable | ProgramVariable) shared="shared"?;
	public DeclaredVariableElements getDeclaredVariableAccess() {
		return pDeclaredVariable;
	}
	
	public ParserRule getDeclaredVariableRule() {
		return getDeclaredVariableAccess().getRule();
	}
	
	//GlobalVariable:
	//	(PhysicalVariable | ProgramVariable) ";";
	public GlobalVariableElements getGlobalVariableAccess() {
		return pGlobalVariable;
	}
	
	public ParserRule getGlobalVariableRule() {
		return getGlobalVariableAccess().getRule();
	}
	
	//PhysicalVariable:
	//	type=IntegerType name=ID "=" port=RegisterPortMapping;
	public PhysicalVariableElements getPhysicalVariableAccess() {
		return pPhysicalVariable;
	}
	
	public ParserRule getPhysicalVariableRule() {
		return getPhysicalVariableAccess().getRule();
	}
	
	//RegisterPortMapping:
	//	register=[Register] ("[" portBit=INTEGER "]")?;
	public RegisterPortMappingElements getRegisterPortMappingAccess() {
		return pRegisterPortMapping;
	}
	
	public ParserRule getRegisterPortMappingRule() {
		return getRegisterPortMappingAccess().getRule();
	}
	
	//ProgramVariable:
	//	type=ReflexType name=ID;
	public ProgramVariableElements getProgramVariableAccess() {
		return pProgramVariable;
	}
	
	public ParserRule getProgramVariableRule() {
		return getProgramVariableAccess().getRule();
	}
	
	//StatementSequence:
	//	{StatementSequence} statements+=Statement*;
	public StatementSequenceElements getStatementSequenceAccess() {
		return pStatementSequence;
	}
	
	public ParserRule getStatementSequenceRule() {
		return getStatementSequenceAccess().getRule();
	}
	
	//CompoundStatement:
	//	{StatementBlock} "{" statements+=Statement* "}";
	public CompoundStatementElements getCompoundStatementAccess() {
		return pCompoundStatement;
	}
	
	public ParserRule getCompoundStatementRule() {
		return getCompoundStatementAccess().getRule();
	}
	
	//TimeoutFunction:
	//	"timeout" (TimeAmountOrRef | "(" TimeAmountOrRef ")") body=Statement;
	public TimeoutFunctionElements getTimeoutFunctionAccess() {
		return pTimeoutFunction;
	}
	
	public ParserRule getTimeoutFunctionRule() {
		return getTimeoutFunctionAccess().getRule();
	}
	
	//fragment TimeAmountOrRef:
	//	time=Time | ref=[IdReference];
	public TimeAmountOrRefElements getTimeAmountOrRefAccess() {
		return pTimeAmountOrRef;
	}
	
	public ParserRule getTimeAmountOrRefRule() {
		return getTimeAmountOrRefAccess().getRule();
	}
	
	//Statement:
	//	{Statement} ";" | CompoundStatement | StartProcStat | StopProcStat | ErrorStat | RestartStat | ResetStat
	//	| SetStateStat | IfElseStat | SwitchStat | Expression ";";
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//IfElseStat:
	//	"if" "(" cond=Expression ")"
	//	then=Statement (=> "else" else=Statement)?;
	public IfElseStatElements getIfElseStatAccess() {
		return pIfElseStat;
	}
	
	public ParserRule getIfElseStatRule() {
		return getIfElseStatAccess().getRule();
	}
	
	//SwitchStat:
	//	"switch" "(" expr=Expression ")" "{" options+=CaseStat* "}";
	public SwitchStatElements getSwitchStatAccess() {
		return pSwitchStat;
	}
	
	public ParserRule getSwitchStatRule() {
		return getSwitchStatAccess().getRule();
	}
	
	//CaseStat:
	//	"case" option=INTEGER ":" body=StatementSequence hasBreak?=BreakStat "}";
	public CaseStatElements getCaseStatAccess() {
		return pCaseStat;
	}
	
	public ParserRule getCaseStatRule() {
		return getCaseStatAccess().getRule();
	}
	
	//BreakStat:
	//	"break" ";";
	public BreakStatElements getBreakStatAccess() {
		return pBreakStat;
	}
	
	public ParserRule getBreakStatRule() {
		return getBreakStatAccess().getRule();
	}
	
	//StartProcStat:
	//	"start" process=[Process] ";";
	public StartProcStatElements getStartProcStatAccess() {
		return pStartProcStat;
	}
	
	public ParserRule getStartProcStatRule() {
		return getStartProcStatAccess().getRule();
	}
	
	//StopProcStat:
	//	{StopProcStat} "stop" process=[Process]? ";";
	public StopProcStatElements getStopProcStatAccess() {
		return pStopProcStat;
	}
	
	public ParserRule getStopProcStatRule() {
		return getStopProcStatAccess().getRule();
	}
	
	//ErrorStat:
	//	{ErrorStat} "error" process=[Process]? ";";
	public ErrorStatElements getErrorStatAccess() {
		return pErrorStat;
	}
	
	public ParserRule getErrorStatRule() {
		return getErrorStatAccess().getRule();
	}
	
	//RestartStat:
	//	{RestartStat} "restart" ";";
	public RestartStatElements getRestartStatAccess() {
		return pRestartStat;
	}
	
	public ParserRule getRestartStatRule() {
		return getRestartStatAccess().getRule();
	}
	
	//ResetStat:
	//	{ResetStat} "reset" "timer" ";";
	public ResetStatElements getResetStatAccess() {
		return pResetStat;
	}
	
	public ParserRule getResetStatRule() {
		return getResetStatAccess().getRule();
	}
	
	//SetStateStat:
	//	{SetStateStat} "set" ("state" state=[State] | next?="next") ";";
	public SetStateStatElements getSetStateStatAccess() {
		return pSetStateStat;
	}
	
	public ParserRule getSetStateStatRule() {
		return getSetStateStatAccess().getRule();
	}
	
	//Function:
	//	returnType=CType name=ID "(" argTypes+=CType ("," argTypes+=CType)* ")" ";";
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//enum RegisterType:
	//	INPUT='input' | OUTPUT='output';
	public RegisterTypeElements getRegisterTypeAccess() {
		return eRegisterType;
	}
	
	public EnumRule getRegisterTypeRule() {
		return getRegisterTypeAccess().getRule();
	}
	
	//Register:
	//	type=RegisterType name=ID addr1=INTEGER addr2=INTEGER regSize=INTEGER ";";
	public RegisterElements getRegisterAccess() {
		return pRegister;
	}
	
	public ParserRule getRegisterRule() {
		return getRegisterAccess().getRule();
	}
	
	//Const:
	//	"const" type=ReflexType name=ID "=" constValue=Expression ";";
	public ConstElements getConstAccess() {
		return pConst;
	}
	
	public ParserRule getConstRule() {
		return getConstAccess().getRule();
	}
	
	//Enum:
	//	"enum" identifier=ID "{" enumMembers+=EnumMember (',' enumMembers+=EnumMember)* "}";
	public EnumElements getEnumAccess() {
		return pEnum;
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}
	
	//EnumMember:
	//	name=ID ("=" value=Expression)?;
	public EnumMemberElements getEnumMemberAccess() {
		return pEnumMember;
	}
	
	public ParserRule getEnumMemberRule() {
		return getEnumMemberAccess().getRule();
	}
	
	//InfixOp:
	//	op=InfixPostfixOp varId=ID;
	public InfixOpElements getInfixOpAccess() {
		return pInfixOp;
	}
	
	public ParserRule getInfixOpRule() {
		return getInfixOpAccess().getRule();
	}
	
	//PostfixOp:
	//	varId=ID op=InfixPostfixOp;
	public PostfixOpElements getPostfixOpAccess() {
		return pPostfixOp;
	}
	
	public ParserRule getPostfixOpRule() {
		return getPostfixOpAccess().getRule();
	}
	
	//FunctionCall:
	//	function=[Function] "(" (args+=Expression ("," args+=Expression)*)? ")";
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//IdReference:
	//	GlobalVariable | ProcessVariable | EnumMember | Const;
	public IdReferenceElements getIdReferenceAccess() {
		return pIdReference;
	}
	
	public ParserRule getIdReferenceRule() {
		return getIdReferenceAccess().getRule();
	}
	
	//CheckStateExpression:
	//	"process" process=[Process] IN_WORD "state" (state=[State] | active?="active" | passive?="passive");
	public CheckStateExpressionElements getCheckStateExpressionAccess() {
		return pCheckStateExpression;
	}
	
	public ParserRule getCheckStateExpressionRule() {
		return getCheckStateExpressionAccess().getRule();
	}
	
	//fragment IN_WORD:
	//	"in";
	public IN_WORDElements getIN_WORDAccess() {
		return pIN_WORD;
	}
	
	public ParserRule getIN_WORDRule() {
		return getIN_WORDAccess().getRule();
	}
	
	//PrimaryExpression:
	//	reference=[IdReference] | {PrimaryExpression} INTEGER | {PrimaryExpression} FLOAT | "(" nestedExpr=Expression ")";
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//UnaryExpression:
	//	PrimaryExpression | FunctionCall | PostfixOp | InfixOp | unaryOp=UnaryOp right=CastExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//CastExpression:
	//	UnaryExpression |
	//	"(" type=ReflexType ")" right=CastExpression;
	public CastExpressionElements getCastExpressionAccess() {
		return pCastExpression;
	}
	
	public ParserRule getCastExpressionRule() {
		return getCastExpressionAccess().getRule();
	}
	
	//MultiplicativeExpression:
	//	CastExpression ({MultiplicativeExpression.left=current} mulOp=MultiplicativeOp right=CastExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//AdditiveExpression:
	//	MultiplicativeExpression ({AdditiveExpression.left=current} addOp=AdditiveOp right=AdditiveExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//ShiftExpression:
	//	AdditiveExpression ({ShiftExpression.left=current} shiftOp=ShiftOp right=ShiftExpression)*;
	public ShiftExpressionElements getShiftExpressionAccess() {
		return pShiftExpression;
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}
	
	//CompareExpression:
	//	CheckStateExpression | ShiftExpression ({CompareExpression.left=current} cmpOp=CompareOp right=CompareExpression)*;
	public CompareExpressionElements getCompareExpressionAccess() {
		return pCompareExpression;
	}
	
	public ParserRule getCompareExpressionRule() {
		return getCompareExpressionAccess().getRule();
	}
	
	//EqualityExpression:
	//	CompareExpression ({EqualityExpression.left=current} eqCmpOp=CompareEqOp right=EqualityExpression)*;
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//BitAndExpression:
	//	EqualityExpression ({BitAndExpression.left=current} BIT_AND right=BitAndExpression)*;
	public BitAndExpressionElements getBitAndExpressionAccess() {
		return pBitAndExpression;
	}
	
	public ParserRule getBitAndExpressionRule() {
		return getBitAndExpressionAccess().getRule();
	}
	
	//BitXorExpression:
	//	BitAndExpression ({BitXorExpression.left=current} BIT_XOR right=BitXorExpression)*;
	public BitXorExpressionElements getBitXorExpressionAccess() {
		return pBitXorExpression;
	}
	
	public ParserRule getBitXorExpressionRule() {
		return getBitXorExpressionAccess().getRule();
	}
	
	//BitOrExpression:
	//	BitXorExpression ({BitOrExpression.left=current} BIT_OR right=BitOrExpression)*;
	public BitOrExpressionElements getBitOrExpressionAccess() {
		return pBitOrExpression;
	}
	
	public ParserRule getBitOrExpressionRule() {
		return getBitOrExpressionAccess().getRule();
	}
	
	//LogicalAndExpression:
	//	BitOrExpression ({LogicalAndExpression.left=current} LOGICAL_AND right=LogicalAndExpression)*;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return pLogicalAndExpression;
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//LogicalOrExpression:
	//	LogicalAndExpression ({LogicalOrExpression.left=current} LOGICAL_OR right=LogicalOrExpression)*;
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return pLogicalOrExpression;
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//AssignmentExpression:
	//	(assignVar=ID assignOp=AssignOperator)? expr=LogicalOrExpression;
	public AssignmentExpressionElements getAssignmentExpressionAccess() {
		return pAssignmentExpression;
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}
	
	//Expression:
	//	AssignmentExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//enum InfixPostfixOp:
	//	INC="++" | DEC="--";
	public InfixPostfixOpElements getInfixPostfixOpAccess() {
		return eInfixPostfixOp;
	}
	
	public EnumRule getInfixPostfixOpRule() {
		return getInfixPostfixOpAccess().getRule();
	}
	
	//enum AssignOperator:
	//	ASSIGN="=" | MUL='*=' | DIV="/=" | MOD="+=" | SUB="-=" | CIN="<<=" | COUT=">>=" | BIT_AND="&=" | BIT_XOR="^=" |
	//	BIT_OR="|=";
	public AssignOperatorElements getAssignOperatorAccess() {
		return eAssignOperator;
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}
	
	//enum UnaryOp:
	//	PLUS="+" | MINUS="-" | BIT_NOT="~" | LOGICAL_NOT="!";
	public UnaryOpElements getUnaryOpAccess() {
		return eUnaryOp;
	}
	
	public EnumRule getUnaryOpRule() {
		return getUnaryOpAccess().getRule();
	}
	
	//enum CompareOp:
	//	LESS="<" | GREATER=">" | LESS_EQ="=<" | GREATER_EQ=">=";
	public CompareOpElements getCompareOpAccess() {
		return eCompareOp;
	}
	
	public EnumRule getCompareOpRule() {
		return getCompareOpAccess().getRule();
	}
	
	//enum CompareEqOp:
	//	EQ="==" | NOT_EQ="!=";
	public CompareEqOpElements getCompareEqOpAccess() {
		return eCompareEqOp;
	}
	
	public EnumRule getCompareEqOpRule() {
		return getCompareEqOpAccess().getRule();
	}
	
	//enum ShiftOp:
	//	LEFT_SHIFT=">>" | RIGHT_SHIFT="<<";
	public ShiftOpElements getShiftOpAccess() {
		return eShiftOp;
	}
	
	public EnumRule getShiftOpRule() {
		return getShiftOpAccess().getRule();
	}
	
	//enum AdditiveOp:
	//	PLUS="+" | MINUS="-";
	public AdditiveOpElements getAdditiveOpAccess() {
		return eAdditiveOp;
	}
	
	public EnumRule getAdditiveOpRule() {
		return getAdditiveOpAccess().getRule();
	}
	
	//enum MultiplicativeOp:
	//	MUL="*" | DIV="/" | MOD="%";
	public MultiplicativeOpElements getMultiplicativeOpAccess() {
		return eMultiplicativeOp;
	}
	
	public EnumRule getMultiplicativeOpRule() {
		return getMultiplicativeOpAccess().getRule();
	}
	
	//// TODO: fix types
	//CType:
	//	{CType} VOID_C_TYPE | {CType} FLOAT_C_TYPE | {CType} DOUBLE_C_TYPE | {CType} signSpec?=CTypeSignSpec? (SHORT_C_TYPE
	//	| INT_C_TYPE | LONG_C_TYPE);
	public CTypeElements getCTypeAccess() {
		return pCType;
	}
	
	public ParserRule getCTypeRule() {
		return getCTypeAccess().getRule();
	}
	
	//enum CTypeSignSpec:
	//	SIGNED="signed" | UNSIGNED="unsigned";
	public CTypeSignSpecElements getCTypeSignSpecAccess() {
		return eCTypeSignSpec;
	}
	
	public EnumRule getCTypeSignSpecRule() {
		return getCTypeSignSpecAccess().getRule();
	}
	
	//IntegerType:
	//	BOOL_TYPE | INT_C_TYPE | SHORT_C_TYPE | LONG_C_TYPE;
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}
	
	//ReflexType:
	//	CType | {ReflexType} BOOL_TYPE;
	public ReflexTypeElements getReflexTypeAccess() {
		return pReflexType;
	}
	
	public ParserRule getReflexTypeRule() {
		return getReflexTypeAccess().getRule();
	}
	
	//terminal LOGICAL_OR:
	//	"||";
	public TerminalRule getLOGICAL_ORRule() {
		return tLOGICAL_OR;
	}
	
	//terminal LOGICAL_AND:
	//	"&&";
	public TerminalRule getLOGICAL_ANDRule() {
		return tLOGICAL_AND;
	}
	
	//terminal BIT_OR:
	//	"|";
	public TerminalRule getBIT_ORRule() {
		return tBIT_OR;
	}
	
	//terminal BIT_XOR:
	//	"^";
	public TerminalRule getBIT_XORRule() {
		return tBIT_XOR;
	}
	
	//terminal BIT_AND:
	//	"&";
	public TerminalRule getBIT_ANDRule() {
		return tBIT_AND;
	}
	
	//terminal VOID_C_TYPE:
	//	"void";
	public TerminalRule getVOID_C_TYPERule() {
		return tVOID_C_TYPE;
	}
	
	//terminal FLOAT_C_TYPE:
	//	"float";
	public TerminalRule getFLOAT_C_TYPERule() {
		return tFLOAT_C_TYPE;
	}
	
	//terminal DOUBLE_C_TYPE:
	//	"double";
	public TerminalRule getDOUBLE_C_TYPERule() {
		return tDOUBLE_C_TYPE;
	}
	
	//terminal SHORT_C_TYPE:
	//	"short";
	public TerminalRule getSHORT_C_TYPERule() {
		return tSHORT_C_TYPE;
	}
	
	//terminal INT_C_TYPE:
	//	"int";
	public TerminalRule getINT_C_TYPERule() {
		return tINT_C_TYPE;
	}
	
	//terminal LONG_C_TYPE:
	//	"long";
	public TerminalRule getLONG_C_TYPERule() {
		return tLONG_C_TYPE;
	}
	
	//terminal BOOL_TYPE:
	//	"bool";
	public TerminalRule getBOOL_TYPERule() {
		return tBOOL_TYPE;
	}
	
	//Tact:
	//	"clock" value=INTEGER ";";
	public TactElements getTactAccess() {
		return pTact;
	}
	
	public ParserRule getTactRule() {
		return getTactAccess().getRule();
	}
	
	//terminal INTEGER:
	//	(HEX | OCTAL | DECIMAL) (LONG | UNSIGNED)?;
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//terminal FLOAT:
	//	DEC_FLOAT | HEX_FLOAT;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal fragment DEC_FLOAT:
	//	DEC_SEQUENCE? '.' DEC_SEQUENCE (EXPONENT SIGN DEC_SEQUENCE)? (LONG | FLOAT_SUFFIX)?;
	public TerminalRule getDEC_FLOATRule() {
		return tDEC_FLOAT;
	}
	
	//terminal fragment HEX_FLOAT:
	//	HEX_SEQUENCE? '.' HEX_SEQUENCE (BIN_EXPONENT SIGN DEC_SEQUENCE)? (LONG | FLOAT_SUFFIX)?;
	public TerminalRule getHEX_FLOATRule() {
		return tHEX_FLOAT;
	}
	
	//terminal fragment DEC_SEQUENCE:
	//	'0'..'9'+;
	public TerminalRule getDEC_SEQUENCERule() {
		return tDEC_SEQUENCE;
	}
	
	//terminal fragment HEX_SEQUENCE:
	//	'0'..'9' | 'a'..'f' | 'A'..'F'+;
	public TerminalRule getHEX_SEQUENCERule() {
		return tHEX_SEQUENCE;
	}
	
	//terminal fragment BIN_EXPONENT:
	//	'p' | 'P';
	public TerminalRule getBIN_EXPONENTRule() {
		return tBIN_EXPONENT;
	}
	
	//terminal fragment EXPONENT:
	//	'e' | 'E';
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	}
	
	//terminal fragment SIGN:
	//	'+' | '-';
	public TerminalRule getSIGNRule() {
		return tSIGN;
	}
	
	//terminal fragment DECIMAL:
	//	"0" | '1'..'9' '0'..'9'*;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//terminal fragment OCTAL:
	//	'0' '0'..'7'+;
	public TerminalRule getOCTALRule() {
		return tOCTAL;
	}
	
	//terminal fragment HEX:
	//	HEX_PREFIX HEX_SEQUENCE;
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//terminal fragment HEX_PREFIX:
	//	'0' ('x' | 'X');
	public TerminalRule getHEX_PREFIXRule() {
		return tHEX_PREFIX;
	}
	
	//Time:
	//	ticks=INTEGER;
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//terminal fragment LONG:
	//	"L" | "l";
	public TerminalRule getLONGRule() {
		return tLONG;
	}
	
	//terminal fragment FLOAT_SUFFIX:
	//	"F" | "f";
	public TerminalRule getFLOAT_SUFFIXRule() {
		return tFLOAT_SUFFIX;
	}
	
	//terminal fragment UNSIGNED:
	//	"U" | "u";
	public TerminalRule getUNSIGNEDRule() {
		return tUNSIGNED;
	}
	
	//Annotation:
	//	key=AnnotationKey ":" value=STRING | key=AnnotationKey;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//AnnotationKey:
	//	ID "." ID | ID;
	public AnnotationKeyElements getAnnotationKeyAccess() {
		return pAnnotationKey;
	}
	
	public ParserRule getAnnotationKeyRule() {
		return getAnnotationKeyAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
