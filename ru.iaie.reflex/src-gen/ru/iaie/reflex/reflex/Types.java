/**
 * generated by Xtext 2.20.0
 */
package ru.iaie.reflex.reflex;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Types</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see ru.iaie.reflex.reflex.ReflexPackage#getTypes()
 * @model
 * @generated
 */
public enum Types implements Enumerator
{
  /**
   * The '<em><b>VOID CTYPE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #VOID_CTYPE_VALUE
   * @generated
   * @ordered
   */
  VOID_CTYPE(0, "VOID_C_TYPE", "void"),

  /**
   * The '<em><b>FLOAT CTYPE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FLOAT_CTYPE_VALUE
   * @generated
   * @ordered
   */
  FLOAT_CTYPE(1, "FLOAT_C_TYPE", "float"),

  /**
   * The '<em><b>DOUBLE CTYPE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DOUBLE_CTYPE_VALUE
   * @generated
   * @ordered
   */
  DOUBLE_CTYPE(2, "DOUBLE_C_TYPE", "double"),

  /**
   * The '<em><b>SHORT CTYPE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SHORT_CTYPE_VALUE
   * @generated
   * @ordered
   */
  SHORT_CTYPE(3, "SHORT_C_TYPE", "short"),

  /**
   * The '<em><b>INT CTYPE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #INT_CTYPE_VALUE
   * @generated
   * @ordered
   */
  INT_CTYPE(4, "INT_C_TYPE", "int"),

  /**
   * The '<em><b>LONG CTYPE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #LONG_CTYPE_VALUE
   * @generated
   * @ordered
   */
  LONG_CTYPE(5, "LONG_C_TYPE", "long"),

  /**
   * The '<em><b>BOOL TYPE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BOOL_TYPE_VALUE
   * @generated
   * @ordered
   */
  BOOL_TYPE(6, "BOOL_TYPE", "bool");

  /**
   * The '<em><b>VOID CTYPE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #VOID_CTYPE
   * @model name="VOID_C_TYPE" literal="void"
   * @generated
   * @ordered
   */
  public static final int VOID_CTYPE_VALUE = 0;

  /**
   * The '<em><b>FLOAT CTYPE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FLOAT_CTYPE
   * @model name="FLOAT_C_TYPE" literal="float"
   * @generated
   * @ordered
   */
  public static final int FLOAT_CTYPE_VALUE = 1;

  /**
   * The '<em><b>DOUBLE CTYPE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DOUBLE_CTYPE
   * @model name="DOUBLE_C_TYPE" literal="double"
   * @generated
   * @ordered
   */
  public static final int DOUBLE_CTYPE_VALUE = 2;

  /**
   * The '<em><b>SHORT CTYPE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SHORT_CTYPE
   * @model name="SHORT_C_TYPE" literal="short"
   * @generated
   * @ordered
   */
  public static final int SHORT_CTYPE_VALUE = 3;

  /**
   * The '<em><b>INT CTYPE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #INT_CTYPE
   * @model name="INT_C_TYPE" literal="int"
   * @generated
   * @ordered
   */
  public static final int INT_CTYPE_VALUE = 4;

  /**
   * The '<em><b>LONG CTYPE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #LONG_CTYPE
   * @model name="LONG_C_TYPE" literal="long"
   * @generated
   * @ordered
   */
  public static final int LONG_CTYPE_VALUE = 5;

  /**
   * The '<em><b>BOOL TYPE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BOOL_TYPE
   * @model literal="bool"
   * @generated
   * @ordered
   */
  public static final int BOOL_TYPE_VALUE = 6;

  /**
   * An array of all the '<em><b>Types</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final Types[] VALUES_ARRAY =
    new Types[]
    {
      VOID_CTYPE,
      FLOAT_CTYPE,
      DOUBLE_CTYPE,
      SHORT_CTYPE,
      INT_CTYPE,
      LONG_CTYPE,
      BOOL_TYPE,
    };

  /**
   * A public read-only list of all the '<em><b>Types</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<Types> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Types</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static Types get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      Types result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Types</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static Types getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      Types result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Types</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static Types get(int value)
  {
    switch (value)
    {
      case VOID_CTYPE_VALUE: return VOID_CTYPE;
      case FLOAT_CTYPE_VALUE: return FLOAT_CTYPE;
      case DOUBLE_CTYPE_VALUE: return DOUBLE_CTYPE;
      case SHORT_CTYPE_VALUE: return SHORT_CTYPE;
      case INT_CTYPE_VALUE: return INT_CTYPE;
      case LONG_CTYPE_VALUE: return LONG_CTYPE;
      case BOOL_TYPE_VALUE: return BOOL_TYPE;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private Types(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //Types
