/**
 * generated by Xtext 2.20.0
 */
package ru.iaie.reflex.reflex.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import ru.iaie.reflex.reflex.CaseStat;
import ru.iaie.reflex.reflex.DefaultStat;
import ru.iaie.reflex.reflex.Expression;
import ru.iaie.reflex.reflex.ReflexPackage;
import ru.iaie.reflex.reflex.SwitchStat;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Switch Stat</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ru.iaie.reflex.reflex.impl.SwitchStatImpl#getExpr <em>Expr</em>}</li>
 *   <li>{@link ru.iaie.reflex.reflex.impl.SwitchStatImpl#getOptions <em>Options</em>}</li>
 *   <li>{@link ru.iaie.reflex.reflex.impl.SwitchStatImpl#getDefaultOption <em>Default Option</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SwitchStatImpl extends StatementImpl implements SwitchStat
{
  /**
   * The cached value of the '{@link #getExpr() <em>Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected Expression expr;

  /**
   * The cached value of the '{@link #getOptions() <em>Options</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOptions()
   * @generated
   * @ordered
   */
  protected EList<CaseStat> options;

  /**
   * The cached value of the '{@link #getDefaultOption() <em>Default Option</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultOption()
   * @generated
   * @ordered
   */
  protected DefaultStat defaultOption;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SwitchStatImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReflexPackage.Literals.SWITCH_STAT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExpr()
  {
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpr(Expression newExpr, NotificationChain msgs)
  {
    Expression oldExpr = expr;
    expr = newExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReflexPackage.SWITCH_STAT__EXPR, oldExpr, newExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpr(Expression newExpr)
  {
    if (newExpr != expr)
    {
      NotificationChain msgs = null;
      if (expr != null)
        msgs = ((InternalEObject)expr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReflexPackage.SWITCH_STAT__EXPR, null, msgs);
      if (newExpr != null)
        msgs = ((InternalEObject)newExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReflexPackage.SWITCH_STAT__EXPR, null, msgs);
      msgs = basicSetExpr(newExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.SWITCH_STAT__EXPR, newExpr, newExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CaseStat> getOptions()
  {
    if (options == null)
    {
      options = new EObjectContainmentEList<CaseStat>(CaseStat.class, this, ReflexPackage.SWITCH_STAT__OPTIONS);
    }
    return options;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DefaultStat getDefaultOption()
  {
    return defaultOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDefaultOption(DefaultStat newDefaultOption, NotificationChain msgs)
  {
    DefaultStat oldDefaultOption = defaultOption;
    defaultOption = newDefaultOption;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReflexPackage.SWITCH_STAT__DEFAULT_OPTION, oldDefaultOption, newDefaultOption);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefaultOption(DefaultStat newDefaultOption)
  {
    if (newDefaultOption != defaultOption)
    {
      NotificationChain msgs = null;
      if (defaultOption != null)
        msgs = ((InternalEObject)defaultOption).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReflexPackage.SWITCH_STAT__DEFAULT_OPTION, null, msgs);
      if (newDefaultOption != null)
        msgs = ((InternalEObject)newDefaultOption).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReflexPackage.SWITCH_STAT__DEFAULT_OPTION, null, msgs);
      msgs = basicSetDefaultOption(newDefaultOption, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.SWITCH_STAT__DEFAULT_OPTION, newDefaultOption, newDefaultOption));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ReflexPackage.SWITCH_STAT__EXPR:
        return basicSetExpr(null, msgs);
      case ReflexPackage.SWITCH_STAT__OPTIONS:
        return ((InternalEList<?>)getOptions()).basicRemove(otherEnd, msgs);
      case ReflexPackage.SWITCH_STAT__DEFAULT_OPTION:
        return basicSetDefaultOption(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReflexPackage.SWITCH_STAT__EXPR:
        return getExpr();
      case ReflexPackage.SWITCH_STAT__OPTIONS:
        return getOptions();
      case ReflexPackage.SWITCH_STAT__DEFAULT_OPTION:
        return getDefaultOption();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReflexPackage.SWITCH_STAT__EXPR:
        setExpr((Expression)newValue);
        return;
      case ReflexPackage.SWITCH_STAT__OPTIONS:
        getOptions().clear();
        getOptions().addAll((Collection<? extends CaseStat>)newValue);
        return;
      case ReflexPackage.SWITCH_STAT__DEFAULT_OPTION:
        setDefaultOption((DefaultStat)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReflexPackage.SWITCH_STAT__EXPR:
        setExpr((Expression)null);
        return;
      case ReflexPackage.SWITCH_STAT__OPTIONS:
        getOptions().clear();
        return;
      case ReflexPackage.SWITCH_STAT__DEFAULT_OPTION:
        setDefaultOption((DefaultStat)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReflexPackage.SWITCH_STAT__EXPR:
        return expr != null;
      case ReflexPackage.SWITCH_STAT__OPTIONS:
        return options != null && !options.isEmpty();
      case ReflexPackage.SWITCH_STAT__DEFAULT_OPTION:
        return defaultOption != null;
    }
    return super.eIsSet(featureID);
  }

} //SwitchStatImpl
