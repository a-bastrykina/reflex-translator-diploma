/**
 * generated by Xtext 2.20.0
 */
package ru.iaie.reflex.reflex.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import ru.iaie.reflex.reflex.ReflexPackage;
import ru.iaie.reflex.reflex.State;
import ru.iaie.reflex.reflex.StatementSequence;
import ru.iaie.reflex.reflex.TimeoutFunction;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>State</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ru.iaie.reflex.reflex.impl.StateImpl#getName <em>Name</em>}</li>
 *   <li>{@link ru.iaie.reflex.reflex.impl.StateImpl#isLooped <em>Looped</em>}</li>
 *   <li>{@link ru.iaie.reflex.reflex.impl.StateImpl#getStateFunction <em>State Function</em>}</li>
 *   <li>{@link ru.iaie.reflex.reflex.impl.StateImpl#getTimeoutFunction <em>Timeout Function</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StateImpl extends MinimalEObjectImpl.Container implements State
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #isLooped() <em>Looped</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isLooped()
   * @generated
   * @ordered
   */
  protected static final boolean LOOPED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isLooped() <em>Looped</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isLooped()
   * @generated
   * @ordered
   */
  protected boolean looped = LOOPED_EDEFAULT;

  /**
   * The cached value of the '{@link #getStateFunction() <em>State Function</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStateFunction()
   * @generated
   * @ordered
   */
  protected StatementSequence stateFunction;

  /**
   * The cached value of the '{@link #getTimeoutFunction() <em>Timeout Function</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeoutFunction()
   * @generated
   * @ordered
   */
  protected TimeoutFunction timeoutFunction;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReflexPackage.Literals.STATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.STATE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isLooped()
  {
    return looped;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLooped(boolean newLooped)
  {
    boolean oldLooped = looped;
    looped = newLooped;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.STATE__LOOPED, oldLooped, looped));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StatementSequence getStateFunction()
  {
    return stateFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStateFunction(StatementSequence newStateFunction, NotificationChain msgs)
  {
    StatementSequence oldStateFunction = stateFunction;
    stateFunction = newStateFunction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReflexPackage.STATE__STATE_FUNCTION, oldStateFunction, newStateFunction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStateFunction(StatementSequence newStateFunction)
  {
    if (newStateFunction != stateFunction)
    {
      NotificationChain msgs = null;
      if (stateFunction != null)
        msgs = ((InternalEObject)stateFunction).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReflexPackage.STATE__STATE_FUNCTION, null, msgs);
      if (newStateFunction != null)
        msgs = ((InternalEObject)newStateFunction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReflexPackage.STATE__STATE_FUNCTION, null, msgs);
      msgs = basicSetStateFunction(newStateFunction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.STATE__STATE_FUNCTION, newStateFunction, newStateFunction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeoutFunction getTimeoutFunction()
  {
    return timeoutFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTimeoutFunction(TimeoutFunction newTimeoutFunction, NotificationChain msgs)
  {
    TimeoutFunction oldTimeoutFunction = timeoutFunction;
    timeoutFunction = newTimeoutFunction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ReflexPackage.STATE__TIMEOUT_FUNCTION, oldTimeoutFunction, newTimeoutFunction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimeoutFunction(TimeoutFunction newTimeoutFunction)
  {
    if (newTimeoutFunction != timeoutFunction)
    {
      NotificationChain msgs = null;
      if (timeoutFunction != null)
        msgs = ((InternalEObject)timeoutFunction).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ReflexPackage.STATE__TIMEOUT_FUNCTION, null, msgs);
      if (newTimeoutFunction != null)
        msgs = ((InternalEObject)newTimeoutFunction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ReflexPackage.STATE__TIMEOUT_FUNCTION, null, msgs);
      msgs = basicSetTimeoutFunction(newTimeoutFunction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.STATE__TIMEOUT_FUNCTION, newTimeoutFunction, newTimeoutFunction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ReflexPackage.STATE__STATE_FUNCTION:
        return basicSetStateFunction(null, msgs);
      case ReflexPackage.STATE__TIMEOUT_FUNCTION:
        return basicSetTimeoutFunction(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReflexPackage.STATE__NAME:
        return getName();
      case ReflexPackage.STATE__LOOPED:
        return isLooped();
      case ReflexPackage.STATE__STATE_FUNCTION:
        return getStateFunction();
      case ReflexPackage.STATE__TIMEOUT_FUNCTION:
        return getTimeoutFunction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReflexPackage.STATE__NAME:
        setName((String)newValue);
        return;
      case ReflexPackage.STATE__LOOPED:
        setLooped((Boolean)newValue);
        return;
      case ReflexPackage.STATE__STATE_FUNCTION:
        setStateFunction((StatementSequence)newValue);
        return;
      case ReflexPackage.STATE__TIMEOUT_FUNCTION:
        setTimeoutFunction((TimeoutFunction)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReflexPackage.STATE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ReflexPackage.STATE__LOOPED:
        setLooped(LOOPED_EDEFAULT);
        return;
      case ReflexPackage.STATE__STATE_FUNCTION:
        setStateFunction((StatementSequence)null);
        return;
      case ReflexPackage.STATE__TIMEOUT_FUNCTION:
        setTimeoutFunction((TimeoutFunction)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReflexPackage.STATE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ReflexPackage.STATE__LOOPED:
        return looped != LOOPED_EDEFAULT;
      case ReflexPackage.STATE__STATE_FUNCTION:
        return stateFunction != null;
      case ReflexPackage.STATE__TIMEOUT_FUNCTION:
        return timeoutFunction != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", looped: ");
    result.append(looped);
    result.append(')');
    return result.toString();
  }

} //StateImpl
