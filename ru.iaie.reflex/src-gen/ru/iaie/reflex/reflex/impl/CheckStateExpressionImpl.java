/**
 * generated by Xtext 2.20.0
 */
package ru.iaie.reflex.reflex.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import ru.iaie.reflex.reflex.CheckStateExpression;
import ru.iaie.reflex.reflex.ReflexPackage;
import ru.iaie.reflex.reflex.State;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Check State Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ru.iaie.reflex.reflex.impl.CheckStateExpressionImpl#getProcess <em>Process</em>}</li>
 *   <li>{@link ru.iaie.reflex.reflex.impl.CheckStateExpressionImpl#getState <em>State</em>}</li>
 *   <li>{@link ru.iaie.reflex.reflex.impl.CheckStateExpressionImpl#isActive <em>Active</em>}</li>
 *   <li>{@link ru.iaie.reflex.reflex.impl.CheckStateExpressionImpl#isPassive <em>Passive</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CheckStateExpressionImpl extends CompareExpressionImpl implements CheckStateExpression
{
  /**
   * The cached value of the '{@link #getProcess() <em>Process</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcess()
   * @generated
   * @ordered
   */
  protected ru.iaie.reflex.reflex.Process process;

  /**
   * The cached value of the '{@link #getState() <em>State</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getState()
   * @generated
   * @ordered
   */
  protected State state;

  /**
   * The default value of the '{@link #isActive() <em>Active</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isActive()
   * @generated
   * @ordered
   */
  protected static final boolean ACTIVE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isActive() <em>Active</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isActive()
   * @generated
   * @ordered
   */
  protected boolean active = ACTIVE_EDEFAULT;

  /**
   * The default value of the '{@link #isPassive() <em>Passive</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPassive()
   * @generated
   * @ordered
   */
  protected static final boolean PASSIVE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isPassive() <em>Passive</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPassive()
   * @generated
   * @ordered
   */
  protected boolean passive = PASSIVE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CheckStateExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReflexPackage.Literals.CHECK_STATE_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ru.iaie.reflex.reflex.Process getProcess()
  {
    if (process != null && process.eIsProxy())
    {
      InternalEObject oldProcess = (InternalEObject)process;
      process = (ru.iaie.reflex.reflex.Process)eResolveProxy(oldProcess);
      if (process != oldProcess)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ReflexPackage.CHECK_STATE_EXPRESSION__PROCESS, oldProcess, process));
      }
    }
    return process;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ru.iaie.reflex.reflex.Process basicGetProcess()
  {
    return process;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProcess(ru.iaie.reflex.reflex.Process newProcess)
  {
    ru.iaie.reflex.reflex.Process oldProcess = process;
    process = newProcess;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.CHECK_STATE_EXPRESSION__PROCESS, oldProcess, process));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public State getState()
  {
    if (state != null && state.eIsProxy())
    {
      InternalEObject oldState = (InternalEObject)state;
      state = (State)eResolveProxy(oldState);
      if (state != oldState)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ReflexPackage.CHECK_STATE_EXPRESSION__STATE, oldState, state));
      }
    }
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public State basicGetState()
  {
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setState(State newState)
  {
    State oldState = state;
    state = newState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.CHECK_STATE_EXPRESSION__STATE, oldState, state));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isActive()
  {
    return active;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setActive(boolean newActive)
  {
    boolean oldActive = active;
    active = newActive;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.CHECK_STATE_EXPRESSION__ACTIVE, oldActive, active));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isPassive()
  {
    return passive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPassive(boolean newPassive)
  {
    boolean oldPassive = passive;
    passive = newPassive;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.CHECK_STATE_EXPRESSION__PASSIVE, oldPassive, passive));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReflexPackage.CHECK_STATE_EXPRESSION__PROCESS:
        if (resolve) return getProcess();
        return basicGetProcess();
      case ReflexPackage.CHECK_STATE_EXPRESSION__STATE:
        if (resolve) return getState();
        return basicGetState();
      case ReflexPackage.CHECK_STATE_EXPRESSION__ACTIVE:
        return isActive();
      case ReflexPackage.CHECK_STATE_EXPRESSION__PASSIVE:
        return isPassive();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReflexPackage.CHECK_STATE_EXPRESSION__PROCESS:
        setProcess((ru.iaie.reflex.reflex.Process)newValue);
        return;
      case ReflexPackage.CHECK_STATE_EXPRESSION__STATE:
        setState((State)newValue);
        return;
      case ReflexPackage.CHECK_STATE_EXPRESSION__ACTIVE:
        setActive((Boolean)newValue);
        return;
      case ReflexPackage.CHECK_STATE_EXPRESSION__PASSIVE:
        setPassive((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReflexPackage.CHECK_STATE_EXPRESSION__PROCESS:
        setProcess((ru.iaie.reflex.reflex.Process)null);
        return;
      case ReflexPackage.CHECK_STATE_EXPRESSION__STATE:
        setState((State)null);
        return;
      case ReflexPackage.CHECK_STATE_EXPRESSION__ACTIVE:
        setActive(ACTIVE_EDEFAULT);
        return;
      case ReflexPackage.CHECK_STATE_EXPRESSION__PASSIVE:
        setPassive(PASSIVE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReflexPackage.CHECK_STATE_EXPRESSION__PROCESS:
        return process != null;
      case ReflexPackage.CHECK_STATE_EXPRESSION__STATE:
        return state != null;
      case ReflexPackage.CHECK_STATE_EXPRESSION__ACTIVE:
        return active != ACTIVE_EDEFAULT;
      case ReflexPackage.CHECK_STATE_EXPRESSION__PASSIVE:
        return passive != PASSIVE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (active: ");
    result.append(active);
    result.append(", passive: ");
    result.append(passive);
    result.append(')');
    return result.toString();
  }

} //CheckStateExpressionImpl
