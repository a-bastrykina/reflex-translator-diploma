/**
 * generated by Xtext 2.20.0
 */
package ru.iaie.reflex.reflex.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import ru.iaie.reflex.reflex.CheckStateExpression;
import ru.iaie.reflex.reflex.ReflexPackage;
import ru.iaie.reflex.reflex.StateQualifier;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Check State Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ru.iaie.reflex.reflex.impl.CheckStateExpressionImpl#getProcess <em>Process</em>}</li>
 *   <li>{@link ru.iaie.reflex.reflex.impl.CheckStateExpressionImpl#getQualfier <em>Qualfier</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CheckStateExpressionImpl extends CompareExpressionImpl implements CheckStateExpression
{
  /**
   * The cached value of the '{@link #getProcess() <em>Process</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcess()
   * @generated
   * @ordered
   */
  protected ru.iaie.reflex.reflex.Process process;

  /**
   * The default value of the '{@link #getQualfier() <em>Qualfier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQualfier()
   * @generated
   * @ordered
   */
  protected static final StateQualifier QUALFIER_EDEFAULT = StateQualifier.ACTIVE;

  /**
   * The cached value of the '{@link #getQualfier() <em>Qualfier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQualfier()
   * @generated
   * @ordered
   */
  protected StateQualifier qualfier = QUALFIER_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CheckStateExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ReflexPackage.Literals.CHECK_STATE_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ru.iaie.reflex.reflex.Process getProcess()
  {
    if (process != null && process.eIsProxy())
    {
      InternalEObject oldProcess = (InternalEObject)process;
      process = (ru.iaie.reflex.reflex.Process)eResolveProxy(oldProcess);
      if (process != oldProcess)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ReflexPackage.CHECK_STATE_EXPRESSION__PROCESS, oldProcess, process));
      }
    }
    return process;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ru.iaie.reflex.reflex.Process basicGetProcess()
  {
    return process;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProcess(ru.iaie.reflex.reflex.Process newProcess)
  {
    ru.iaie.reflex.reflex.Process oldProcess = process;
    process = newProcess;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.CHECK_STATE_EXPRESSION__PROCESS, oldProcess, process));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateQualifier getQualfier()
  {
    return qualfier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setQualfier(StateQualifier newQualfier)
  {
    StateQualifier oldQualfier = qualfier;
    qualfier = newQualfier == null ? QUALFIER_EDEFAULT : newQualfier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ReflexPackage.CHECK_STATE_EXPRESSION__QUALFIER, oldQualfier, qualfier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ReflexPackage.CHECK_STATE_EXPRESSION__PROCESS:
        if (resolve) return getProcess();
        return basicGetProcess();
      case ReflexPackage.CHECK_STATE_EXPRESSION__QUALFIER:
        return getQualfier();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ReflexPackage.CHECK_STATE_EXPRESSION__PROCESS:
        setProcess((ru.iaie.reflex.reflex.Process)newValue);
        return;
      case ReflexPackage.CHECK_STATE_EXPRESSION__QUALFIER:
        setQualfier((StateQualifier)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ReflexPackage.CHECK_STATE_EXPRESSION__PROCESS:
        setProcess((ru.iaie.reflex.reflex.Process)null);
        return;
      case ReflexPackage.CHECK_STATE_EXPRESSION__QUALFIER:
        setQualfier(QUALFIER_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ReflexPackage.CHECK_STATE_EXPRESSION__PROCESS:
        return process != null;
      case ReflexPackage.CHECK_STATE_EXPRESSION__QUALFIER:
        return qualfier != QUALFIER_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (qualfier: ");
    result.append(qualfier);
    result.append(')');
    return result.toString();
  }

} //CheckStateExpressionImpl
