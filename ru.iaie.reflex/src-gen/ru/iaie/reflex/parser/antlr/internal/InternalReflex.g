/*
 * generated by Xtext 2.20.0
 */
grammar InternalReflex;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ru.iaie.reflex.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ru.iaie.reflex.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ru.iaie.reflex.services.ReflexGrammarAccess;

}

@parser::members {

 	private ReflexGrammarAccess grammarAccess;

    public InternalReflexParser(TokenStream input, ReflexGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected ReflexGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='program'
		{
			newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getProgramKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProgramRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getTicksTactParserRuleCall_3_0());
				}
				lv_ticks_3_0=ruleTact
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"ticks",
						true,
						"ru.iaie.reflex.Reflex.Tact");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getConstsConstParserRuleCall_4_0_0());
					}
					lv_consts_4_0=ruleConst
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"consts",
							lv_consts_4_0,
							"ru.iaie.reflex.Reflex.Const");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getEnumsEnumParserRuleCall_4_1_0());
					}
					lv_enums_5_0=ruleEnum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"enums",
							lv_enums_5_0,
							"ru.iaie.reflex.Reflex.Enum");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_4_2_0());
					}
					lv_functions_6_0=ruleFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"functions",
							lv_functions_6_0,
							"ru.iaie.reflex.Reflex.Function");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getRegistersRegisterParserRuleCall_4_3_0());
					}
					lv_registers_7_0=ruleRegister
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"registers",
							lv_registers_7_0,
							"ru.iaie.reflex.Reflex.Register");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getProcessesProcessParserRuleCall_4_4_0());
					}
					lv_processes_8_0=ruleProcess
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"processes",
							lv_processes_8_0,
							"ru.iaie.reflex.Reflex.Process");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleProcess
entryRuleProcess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessRule()); }
	iv_ruleProcess=ruleProcess
	{ $current=$iv_ruleProcess.current; }
	EOF;

// Rule Process
ruleProcess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='proc'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcessAccess().getProcKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProcessAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcessRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getProcessAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessAccess().getVariablesVariableParserRuleCall_3_0());
				}
				lv_variables_3_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessRule());
					}
					add(
						$current,
						"variables",
						lv_variables_3_0,
						"ru.iaie.reflex.Reflex.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessAccess().getStatesStateParserRuleCall_4_0());
				}
				lv_states_4_0=ruleState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessRule());
					}
					add(
						$current,
						"states",
						lv_states_4_0,
						"ru.iaie.reflex.Reflex.State");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getProcessAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getVariableAccess().getImportedVariableParserRuleCall_0_0());
			}
			this_ImportedVariable_0=ruleImportedVariable
			{
				$current = $this_ImportedVariable_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getVariableAccess().getDeclaredVariableParserRuleCall_0_1());
			}
			this_DeclaredVariable_1=ruleDeclaredVariable
			{
				$current = $this_DeclaredVariable_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleImportedVariable
entryRuleImportedVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportedVariableRule()); }
	iv_ruleImportedVariable=ruleImportedVariable
	{ $current=$iv_ruleImportedVariable.current; }
	EOF;

// Rule ImportedVariable
ruleImportedVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='from'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportedVariableAccess().getFromKeyword_0());
		}
		otherlv_1='proc'
		{
			newLeafNode(otherlv_1, grammarAccess.getImportedVariableAccess().getProcKeyword_1());
		}
		(
			(
				lv_procId_2_0=RULE_ID
				{
					newLeafNode(lv_procId_2_0, grammarAccess.getImportedVariableAccess().getProcIdIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportedVariableRule());
					}
					setWithLastConsumed(
						$current,
						"procId",
						lv_procId_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_varNames_3_0=RULE_ID
				{
					newLeafNode(lv_varNames_3_0, grammarAccess.getImportedVariableAccess().getVarNamesIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportedVariableRule());
					}
					addWithLastConsumed(
						$current,
						"varNames",
						lv_varNames_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getImportedVariableAccess().getCommaKeyword_4_0());
			}
			(
				(
					lv_varNames_5_0=RULE_ID
					{
						newLeafNode(lv_varNames_5_0, grammarAccess.getImportedVariableAccess().getVarNamesIDTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImportedVariableRule());
						}
						addWithLastConsumed(
							$current,
							"varNames",
							lv_varNames_5_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDeclaredVariable
entryRuleDeclaredVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclaredVariableRule()); }
	iv_ruleDeclaredVariable=ruleDeclaredVariable
	{ $current=$iv_ruleDeclaredVariable.current; }
	EOF;

// Rule DeclaredVariable
ruleDeclaredVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDeclaredVariableAccess().getPhysicalVariableParserRuleCall_0_0());
			}
			this_PhysicalVariable_0=rulePhysicalVariable
			{
				$current = $this_PhysicalVariable_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getDeclaredVariableAccess().getProgramVariableParserRuleCall_0_1());
			}
			this_ProgramVariable_1=ruleProgramVariable
			{
				$current = $this_ProgramVariable_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaredVariableAccess().getVisibilityVisibilityParserRuleCall_1_0());
				}
				lv_visibility_2_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaredVariableRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_2_0,
						"ru.iaie.reflex.Reflex.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePhysicalVariable
entryRulePhysicalVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPhysicalVariableRule()); }
	iv_rulePhysicalVariable=rulePhysicalVariable
	{ $current=$iv_rulePhysicalVariable.current; }
	EOF;

// Rule PhysicalVariable
rulePhysicalVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPhysicalVariableAccess().getTypeIntegerTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleIntegerType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPhysicalVariableRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"ru.iaie.reflex.Reflex.IntegerType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPhysicalVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPhysicalVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getPhysicalVariableAccess().getEqualsSignKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getPhysicalVariableAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPhysicalVariableAccess().getPortsRegisterPortParserRuleCall_4_0());
				}
				lv_ports_4_0=ruleRegisterPort
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPhysicalVariableRule());
					}
					add(
						$current,
						"ports",
						lv_ports_4_0,
						"ru.iaie.reflex.Reflex.RegisterPort");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getPhysicalVariableAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPhysicalVariableAccess().getPortsRegisterPortParserRuleCall_5_1_0());
					}
					lv_ports_6_0=ruleRegisterPort
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPhysicalVariableRule());
						}
						add(
							$current,
							"ports",
							lv_ports_6_0,
							"ru.iaie.reflex.Reflex.RegisterPort");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getPhysicalVariableAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleRegisterPort
entryRuleRegisterPort returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegisterPortRule()); }
	iv_ruleRegisterPort=ruleRegisterPort
	{ $current=$iv_ruleRegisterPort.current; }
	EOF;

// Rule RegisterPort
ruleRegisterPort returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_regName_0_0=RULE_ID
				{
					newLeafNode(lv_regName_0_0, grammarAccess.getRegisterPortAccess().getRegNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegisterPortRule());
					}
					setWithLastConsumed(
						$current,
						"regName",
						lv_regName_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getRegisterPortAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				lv_port_2_0=RULE_INTEGER
				{
					newLeafNode(lv_port_2_0, grammarAccess.getRegisterPortAccess().getPortINTEGERTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegisterPortRule());
					}
					setWithLastConsumed(
						$current,
						"port",
						lv_port_2_0,
						"ru.iaie.reflex.Reflex.INTEGER");
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getRegisterPortAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleProgramVariable
entryRuleProgramVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramVariableRule()); }
	iv_ruleProgramVariable=ruleProgramVariable
	{ $current=$iv_ruleProgramVariable.current; }
	EOF;

// Rule ProgramVariable
ruleProgramVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramVariableAccess().getTypeReflexTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleReflexType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramVariableRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"ru.iaie.reflex.Reflex.ReflexType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProgramVariableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProgramVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleVisibility
entryRuleVisibility returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVisibilityRule()); }
	iv_ruleVisibility=ruleVisibility
	{ $current=$iv_ruleVisibility.current; }
	EOF;

// Rule Visibility
ruleVisibility returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_LOCAL_0_0='local'
				{
					newLeafNode(lv_LOCAL_0_0, grammarAccess.getVisibilityAccess().getLOCALLocalKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVisibilityRule());
					}
					setWithLastConsumed($current, "LOCAL", lv_LOCAL_0_0, "local");
				}
			)
		)
		    |
		(
			(
				lv_GLOBAL_1_0='global'
				{
					newLeafNode(lv_GLOBAL_1_0, grammarAccess.getVisibilityAccess().getGLOBALGlobalKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVisibilityRule());
					}
					setWithLastConsumed($current, "GLOBAL", lv_GLOBAL_1_0, "global");
				}
			)
		)
		    |
		(
			(
				(
					lv_SHARED_2_0='shared'
					{
						newLeafNode(lv_SHARED_2_0, grammarAccess.getVisibilityAccess().getSHAREDSharedKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVisibilityRule());
						}
						setWithLastConsumed($current, "SHARED", lv_SHARED_2_0, "shared");
					}
				)
			)
			(
				(
					lv_sharingProcs_3_0=RULE_ID
					{
						newLeafNode(lv_sharingProcs_3_0, grammarAccess.getVisibilityAccess().getSharingProcsIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVisibilityRule());
						}
						addWithLastConsumed(
							$current,
							"sharingProcs",
							lv_sharingProcs_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getVisibilityAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						lv_sharingProcs_5_0=RULE_ID
						{
							newLeafNode(lv_sharingProcs_5_0, grammarAccess.getVisibilityAccess().getSharingProcsIDTerminalRuleCall_2_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVisibilityRule());
							}
							addWithLastConsumed(
								$current,
								"sharingProcs",
								lv_sharingProcs_5_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)*
		)
	)
;

// Entry rule entryRuleState
entryRuleState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current; }
	EOF;

// Rule State
ruleState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='state'
		{
			newLeafNode(otherlv_0, grammarAccess.getStateAccess().getStateKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getStateFunctionStatementSequenceParserRuleCall_3_0());
				}
				lv_stateFunction_3_0=ruleStatementSequence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					set(
						$current,
						"stateFunction",
						lv_stateFunction_3_0,
						"ru.iaie.reflex.Reflex.StatementSequence");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getTimeoutFunctionTimeoutFunctionParserRuleCall_4_0());
				}
				lv_timeoutFunction_4_0=ruleTimeoutFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					set(
						$current,
						"timeoutFunction",
						lv_timeoutFunction_4_0,
						"ru.iaie.reflex.Reflex.TimeoutFunction");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getStateAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleStatementSequence
entryRuleStatementSequence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementSequenceRule()); }
	iv_ruleStatementSequence=ruleStatementSequence
	{ $current=$iv_ruleStatementSequence.current; }
	EOF;

// Rule StatementSequence
ruleStatementSequence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStatementSequenceAccess().getStatementSequenceAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementSequenceAccess().getStatementsStatementParserRuleCall_1_0());
				}
				lv_statements_1_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementSequenceRule());
					}
					add(
						$current,
						"statements",
						lv_statements_1_0,
						"ru.iaie.reflex.Reflex.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStatementBlock
entryRuleStatementBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementBlockRule()); }
	iv_ruleStatementBlock=ruleStatementBlock
	{ $current=$iv_ruleStatementBlock.current; }
	EOF;

// Rule StatementBlock
ruleStatementBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStatementBlockAccess().getStatementBlockAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getStatementBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementBlockAccess().getStatementsStatementParserRuleCall_2_0());
				}
				lv_statements_2_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementBlockRule());
					}
					add(
						$current,
						"statements",
						lv_statements_2_0,
						"ru.iaie.reflex.Reflex.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getStatementBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleTimeoutFunction
entryRuleTimeoutFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeoutFunctionRule()); }
	iv_ruleTimeoutFunction=ruleTimeoutFunction
	{ $current=$iv_ruleTimeoutFunction.current; }
	EOF;

// Rule TimeoutFunction
ruleTimeoutFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='timeout'
		{
			newLeafNode(otherlv_0, grammarAccess.getTimeoutFunctionAccess().getTimeoutKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeoutFunctionAccess().getTimeTimeParserRuleCall_1_0());
				}
				lv_time_1_0=ruleTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeoutFunctionRule());
					}
					set(
						$current,
						"time",
						lv_time_1_0,
						"ru.iaie.reflex.Reflex.Time");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeoutFunctionAccess().getBodyStatementParserRuleCall_2_0());
				}
				lv_body_2_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeoutFunctionRule());
					}
					set(
						$current,
						"body",
						lv_body_2_0,
						"ru.iaie.reflex.Reflex.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getStatementAccess().getStatementAction_0_0(),
						$current);
				}
			)
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getSemicolonKeyword_0_1());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getStatementBlockParserRuleCall_1());
		}
		this_StatementBlock_2=ruleStatementBlock
		{
			$current = $this_StatementBlock_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getStartProcStatParserRuleCall_2());
		}
		this_StartProcStat_3=ruleStartProcStat
		{
			$current = $this_StartProcStat_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getStopProcStatParserRuleCall_3());
		}
		this_StopProcStat_4=ruleStopProcStat
		{
			$current = $this_StopProcStat_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getErrorStatParserRuleCall_4());
		}
		this_ErrorStat_5=ruleErrorStat
		{
			$current = $this_ErrorStat_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLoopStatParserRuleCall_5());
		}
		this_LoopStat_6=ruleLoopStat
		{
			$current = $this_LoopStat_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getRestartStatParserRuleCall_6());
		}
		this_RestartStat_7=ruleRestartStat
		{
			$current = $this_RestartStat_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getResetStatParserRuleCall_7());
		}
		this_ResetStat_8=ruleResetStat
		{
			$current = $this_ResetStat_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSetStateStatParserRuleCall_8());
		}
		this_SetStateStat_9=ruleSetStateStat
		{
			$current = $this_SetStateStat_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfElseStatParserRuleCall_9());
		}
		this_IfElseStat_10=ruleIfElseStat
		{
			$current = $this_IfElseStat_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSwitchStatParserRuleCall_10());
		}
		this_SwitchStat_11=ruleSwitchStat
		{
			$current = $this_SwitchStat_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall_11_0());
			}
			this_Expression_12=ruleExpression
			{
				$current = $this_Expression_12.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_13=';'
			{
				newLeafNode(otherlv_13, grammarAccess.getStatementAccess().getSemicolonKeyword_11_1());
			}
		)
	)
;

// Entry rule entryRuleIfElseStat
entryRuleIfElseStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfElseStatRule()); }
	iv_ruleIfElseStat=ruleIfElseStat
	{ $current=$iv_ruleIfElseStat.current; }
	EOF;

// Rule IfElseStat
ruleIfElseStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfElseStatAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIfElseStatAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfElseStatAccess().getCondExpressionParserRuleCall_2_0());
				}
				lv_cond_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfElseStatRule());
					}
					set(
						$current,
						"cond",
						lv_cond_2_0,
						"ru.iaie.reflex.Reflex.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getIfElseStatAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfElseStatAccess().getThenStatementParserRuleCall_4_0());
				}
				lv_then_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfElseStatRule());
					}
					set(
						$current,
						"then",
						lv_then_4_0,
						"ru.iaie.reflex.Reflex.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('else')=>
				otherlv_5='else'
				{
					newLeafNode(otherlv_5, grammarAccess.getIfElseStatAccess().getElseKeyword_5_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIfElseStatAccess().getElseStatementParserRuleCall_5_1_0());
					}
					lv_else_6_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfElseStatRule());
						}
						set(
							$current,
							"else",
							lv_else_6_0,
							"ru.iaie.reflex.Reflex.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleSwitchStat
entryRuleSwitchStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwitchStatRule()); }
	iv_ruleSwitchStat=ruleSwitchStat
	{ $current=$iv_ruleSwitchStat.current; }
	EOF;

// Rule SwitchStat
ruleSwitchStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='switch'
		{
			newLeafNode(otherlv_0, grammarAccess.getSwitchStatAccess().getSwitchKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSwitchStatAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchStatAccess().getExprExpressionParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchStatRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"ru.iaie.reflex.Reflex.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSwitchStatAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getSwitchStatAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchStatAccess().getOptionsCaseStatParserRuleCall_5_0());
				}
				lv_options_5_0=ruleCaseStat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchStatRule());
					}
					add(
						$current,
						"options",
						lv_options_5_0,
						"ru.iaie.reflex.Reflex.CaseStat");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getSwitchStatAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleCaseStat
entryRuleCaseStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseStatRule()); }
	iv_ruleCaseStat=ruleCaseStat
	{ $current=$iv_ruleCaseStat.current; }
	EOF;

// Rule CaseStat
ruleCaseStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseStatAccess().getCaseKeyword_0());
		}
		(
			(
				lv_option_1_0=RULE_INTEGER
				{
					newLeafNode(lv_option_1_0, grammarAccess.getCaseStatAccess().getOptionINTEGERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCaseStatRule());
					}
					setWithLastConsumed(
						$current,
						"option",
						lv_option_1_0,
						"ru.iaie.reflex.Reflex.INTEGER");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getCaseStatAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseStatAccess().getBodyStatementSequenceParserRuleCall_3_0());
				}
				lv_body_3_0=ruleStatementSequence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseStatRule());
					}
					set(
						$current,
						"body",
						lv_body_3_0,
						"ru.iaie.reflex.Reflex.StatementSequence");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseStatAccess().getHasBreakBreakStatParserRuleCall_4_0());
				}
				lv_hasBreak_4_0=ruleBreakStat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseStatRule());
					}
					set(
						$current,
						"hasBreak",
						true,
						"ru.iaie.reflex.Reflex.BreakStat");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getCaseStatAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleBreakStat
entryRuleBreakStat returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBreakStatRule()); }
	iv_ruleBreakStat=ruleBreakStat
	{ $current=$iv_ruleBreakStat.current.getText(); }
	EOF;

// Rule BreakStat
ruleBreakStat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='break'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBreakStatAccess().getBreakKeyword_0());
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBreakStatAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleStartProcStat
entryRuleStartProcStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartProcStatRule()); }
	iv_ruleStartProcStat=ruleStartProcStat
	{ $current=$iv_ruleStartProcStat.current; }
	EOF;

// Rule StartProcStat
ruleStartProcStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='start'
		{
			newLeafNode(otherlv_0, grammarAccess.getStartProcStatAccess().getStartKeyword_0());
		}
		(
			(
				lv_procId_1_0=RULE_ID
				{
					newLeafNode(lv_procId_1_0, grammarAccess.getStartProcStatAccess().getProcIdIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStartProcStatRule());
					}
					setWithLastConsumed(
						$current,
						"procId",
						lv_procId_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getStartProcStatAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleStopProcStat
entryRuleStopProcStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStopProcStatRule()); }
	iv_ruleStopProcStat=ruleStopProcStat
	{ $current=$iv_ruleStopProcStat.current; }
	EOF;

// Rule StopProcStat
ruleStopProcStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStopProcStatAccess().getStopProcStatAction_0(),
					$current);
			}
		)
		otherlv_1='stop'
		{
			newLeafNode(otherlv_1, grammarAccess.getStopProcStatAccess().getStopKeyword_1());
		}
		(
			(
				lv_procId_2_0=RULE_ID
				{
					newLeafNode(lv_procId_2_0, grammarAccess.getStopProcStatAccess().getProcIdIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStopProcStatRule());
					}
					setWithLastConsumed(
						$current,
						"procId",
						lv_procId_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getStopProcStatAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleErrorStat
entryRuleErrorStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getErrorStatRule()); }
	iv_ruleErrorStat=ruleErrorStat
	{ $current=$iv_ruleErrorStat.current; }
	EOF;

// Rule ErrorStat
ruleErrorStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getErrorStatAccess().getErrorStatAction_0(),
					$current);
			}
		)
		otherlv_1='error'
		{
			newLeafNode(otherlv_1, grammarAccess.getErrorStatAccess().getErrorKeyword_1());
		}
		(
			(
				lv_procId_2_0=RULE_ID
				{
					newLeafNode(lv_procId_2_0, grammarAccess.getErrorStatAccess().getProcIdIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getErrorStatRule());
					}
					setWithLastConsumed(
						$current,
						"procId",
						lv_procId_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getErrorStatAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleLoopStat
entryRuleLoopStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopStatRule()); }
	iv_ruleLoopStat=ruleLoopStat
	{ $current=$iv_ruleLoopStat.current; }
	EOF;

// Rule LoopStat
ruleLoopStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLoopStatAccess().getLoopStatAction_0(),
					$current);
			}
		)
		otherlv_1='loop'
		{
			newLeafNode(otherlv_1, grammarAccess.getLoopStatAccess().getLoopKeyword_1());
		}
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getLoopStatAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleRestartStat
entryRuleRestartStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRestartStatRule()); }
	iv_ruleRestartStat=ruleRestartStat
	{ $current=$iv_ruleRestartStat.current; }
	EOF;

// Rule RestartStat
ruleRestartStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRestartStatAccess().getRestartStatAction_0(),
					$current);
			}
		)
		otherlv_1='restart'
		{
			newLeafNode(otherlv_1, grammarAccess.getRestartStatAccess().getRestartKeyword_1());
		}
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getRestartStatAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleResetStat
entryRuleResetStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResetStatRule()); }
	iv_ruleResetStat=ruleResetStat
	{ $current=$iv_ruleResetStat.current; }
	EOF;

// Rule ResetStat
ruleResetStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getResetStatAccess().getResetStatAction_0(),
					$current);
			}
		)
		otherlv_1='reset'
		{
			newLeafNode(otherlv_1, grammarAccess.getResetStatAccess().getResetKeyword_1());
		}
		otherlv_2='timeout'
		{
			newLeafNode(otherlv_2, grammarAccess.getResetStatAccess().getTimeoutKeyword_2());
		}
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getResetStatAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleSetStateStat
entryRuleSetStateStat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetStateStatRule()); }
	iv_ruleSetStateStat=ruleSetStateStat
	{ $current=$iv_ruleSetStateStat.current; }
	EOF;

// Rule SetStateStat
ruleSetStateStat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSetStateStatAccess().getSetStateStatAction_0(),
					$current);
			}
		)
		otherlv_1='set'
		{
			newLeafNode(otherlv_1, grammarAccess.getSetStateStatAccess().getSetKeyword_1());
		}
		(
			(
				otherlv_2='state'
				{
					newLeafNode(otherlv_2, grammarAccess.getSetStateStatAccess().getStateKeyword_2_0_0());
				}
				(
					(
						lv_stateId_3_0=RULE_ID
						{
							newLeafNode(lv_stateId_3_0, grammarAccess.getSetStateStatAccess().getStateIdIDTerminalRuleCall_2_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSetStateStatRule());
							}
							setWithLastConsumed(
								$current,
								"stateId",
								lv_stateId_3_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)
			    |
			(
				(
					lv_next_4_0='next'
					{
						newLeafNode(lv_next_4_0, grammarAccess.getSetStateStatAccess().getNextNextKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSetStateStatRule());
						}
						setWithLastConsumed($current, "next", true, "next");
					}
				)
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getSetStateStatAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getReturnTypeCTypeParserRuleCall_0_0());
				}
				lv_returnType_0_0=ruleCType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_0_0,
						"ru.iaie.reflex.Reflex.CType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getArgTypesCTypeParserRuleCall_3_0());
				}
				lv_argTypes_3_0=ruleCType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					add(
						$current,
						"argTypes",
						lv_argTypes_3_0,
						"ru.iaie.reflex.Reflex.CType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getArgTypesCTypeParserRuleCall_4_1_0());
					}
					lv_argTypes_5_0=ruleCType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						add(
							$current,
							"argTypes",
							lv_argTypes_5_0,
							"ru.iaie.reflex.Reflex.CType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_5());
		}
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getFunctionAccess().getSemicolonKeyword_6());
		}
	)
;

// Entry rule entryRuleRegister
entryRuleRegister returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegisterRule()); }
	iv_ruleRegister=ruleRegister
	{ $current=$iv_ruleRegister.current; }
	EOF;

// Rule Register
ruleRegister returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRegisterAccess().getTypeRegisterTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleRegisterType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRegisterRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"ru.iaie.reflex.Reflex.RegisterType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRegisterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegisterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_addr1_2_0=RULE_INTEGER
				{
					newLeafNode(lv_addr1_2_0, grammarAccess.getRegisterAccess().getAddr1INTEGERTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegisterRule());
					}
					setWithLastConsumed(
						$current,
						"addr1",
						lv_addr1_2_0,
						"ru.iaie.reflex.Reflex.INTEGER");
				}
			)
		)
		(
			(
				lv_addr2_3_0=RULE_INTEGER
				{
					newLeafNode(lv_addr2_3_0, grammarAccess.getRegisterAccess().getAddr2INTEGERTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegisterRule());
					}
					setWithLastConsumed(
						$current,
						"addr2",
						lv_addr2_3_0,
						"ru.iaie.reflex.Reflex.INTEGER");
				}
			)
		)
		(
			(
				lv_regSize_4_0=RULE_INTEGER
				{
					newLeafNode(lv_regSize_4_0, grammarAccess.getRegisterAccess().getRegSizeINTEGERTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegisterRule());
					}
					setWithLastConsumed(
						$current,
						"regSize",
						lv_regSize_4_0,
						"ru.iaie.reflex.Reflex.INTEGER");
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getRegisterAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleConst
entryRuleConst returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstRule()); }
	iv_ruleConst=ruleConst
	{ $current=$iv_ruleConst.current; }
	EOF;

// Rule Const
ruleConst returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='const'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstAccess().getConstKeyword_0());
		}
		(
			(
				lv_constId_1_0=RULE_ID
				{
					newLeafNode(lv_constId_1_0, grammarAccess.getConstAccess().getConstIdIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstRule());
					}
					setWithLastConsumed(
						$current,
						"constId",
						lv_constId_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConstAccess().getConstValueExpressionParserRuleCall_2_0());
				}
				lv_constValue_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstRule());
					}
					set(
						$current,
						"constValue",
						lv_constValue_2_0,
						"ru.iaie.reflex.Reflex.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getConstAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleEnum
entryRuleEnum returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumRule()); }
	iv_ruleEnum=ruleEnum
	{ $current=$iv_ruleEnum.current; }
	EOF;

// Rule Enum
ruleEnum returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='enum'
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumAccess().getEnumKeyword_0());
		}
		(
			(
				lv_enumId_1_0=RULE_ID
				{
					newLeafNode(lv_enumId_1_0, grammarAccess.getEnumAccess().getEnumIdIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumRule());
					}
					setWithLastConsumed(
						$current,
						"enumId",
						lv_enumId_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumAccess().getEnumMembersEnumMemberParserRuleCall_3_0());
				}
				lv_enumMembers_3_0=ruleEnumMember
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumRule());
					}
					add(
						$current,
						"enumMembers",
						lv_enumMembers_3_0,
						"ru.iaie.reflex.Reflex.EnumMember");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getEnumAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumAccess().getEnumMembersEnumMemberParserRuleCall_4_1_0());
					}
					lv_enumMembers_5_0=ruleEnumMember
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumRule());
						}
						add(
							$current,
							"enumMembers",
							lv_enumMembers_5_0,
							"ru.iaie.reflex.Reflex.EnumMember");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEnumMember
entryRuleEnumMember returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumMemberRule()); }
	iv_ruleEnumMember=ruleEnumMember
	{ $current=$iv_ruleEnumMember.current; }
	EOF;

// Rule EnumMember
ruleEnumMember returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getEnumMemberAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumMemberRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumMemberAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumMemberAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumMemberRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"ru.iaie.reflex.Reflex.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInfixOp
entryRuleInfixOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInfixOpRule()); }
	iv_ruleInfixOp=ruleInfixOp
	{ $current=$iv_ruleInfixOp.current; }
	EOF;

// Rule InfixOp
ruleInfixOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInfixOpAccess().getOpInfixPostfixOpEnumRuleCall_0_0());
				}
				lv_op_0_0=ruleInfixPostfixOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInfixOpRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"ru.iaie.reflex.Reflex.InfixPostfixOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_varId_1_0=RULE_ID
				{
					newLeafNode(lv_varId_1_0, grammarAccess.getInfixOpAccess().getVarIdIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInfixOpRule());
					}
					setWithLastConsumed(
						$current,
						"varId",
						lv_varId_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRulePostfixOp
entryRulePostfixOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPostfixOpRule()); }
	iv_rulePostfixOp=rulePostfixOp
	{ $current=$iv_rulePostfixOp.current; }
	EOF;

// Rule PostfixOp
rulePostfixOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_varId_0_0=RULE_ID
				{
					newLeafNode(lv_varId_0_0, grammarAccess.getPostfixOpAccess().getVarIdIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPostfixOpRule());
					}
					setWithLastConsumed(
						$current,
						"varId",
						lv_varId_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPostfixOpAccess().getOpInfixPostfixOpEnumRuleCall_1_0());
				}
				lv_op_1_0=ruleInfixPostfixOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPostfixOpRule());
					}
					set(
						$current,
						"op",
						lv_op_1_0,
						"ru.iaie.reflex.Reflex.InfixPostfixOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	iv_ruleFunctionCall=ruleFunctionCall
	{ $current=$iv_ruleFunctionCall.current; }
	EOF;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_funcId_0_0=RULE_ID
				{
					newLeafNode(lv_funcId_0_0, grammarAccess.getFunctionCallAccess().getFuncIdIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionCallRule());
					}
					setWithLastConsumed(
						$current,
						"funcId",
						lv_funcId_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_2_0_0());
					}
					lv_args_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
						}
						add(
							$current,
							"args",
							lv_args_2_0,
							"ru.iaie.reflex.Reflex.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_2_1_1_0());
						}
						lv_args_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
							}
							add(
								$current,
								"args",
								lv_args_4_0,
								"ru.iaie.reflex.Reflex.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_varId_0_0=RULE_ID
				{
					newLeafNode(lv_varId_0_0, grammarAccess.getPrimaryExpressionAccess().getVarIdIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimaryExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"varId",
						lv_varId_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_1_0(),
						$current);
				}
			)
			this_INTEGER_2=RULE_INTEGER
			{
				newLeafNode(this_INTEGER_2, grammarAccess.getPrimaryExpressionAccess().getINTEGERTerminalRuleCall_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_2_0(),
						$current);
				}
			)
			this_FLOAT_4=RULE_FLOAT
			{
				newLeafNode(this_FLOAT_4, grammarAccess.getPrimaryExpressionAccess().getFLOATTerminalRuleCall_2_1());
			}
		)
		    |
		(
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExprExpressionParserRuleCall_3_1_0());
					}
					lv_expr_6_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
						}
						set(
							$current,
							"expr",
							lv_expr_6_0,
							"ru.iaie.reflex.Reflex.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	iv_ruleUnaryExpression=ruleUnaryExpression
	{ $current=$iv_ruleUnaryExpression.current; }
	EOF;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_0());
		}
		this_PrimaryExpression_0=rulePrimaryExpression
		{
			$current = $this_PrimaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getFunctionCallParserRuleCall_1());
		}
		this_FunctionCall_1=ruleFunctionCall
		{
			$current = $this_FunctionCall_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getPostfixOpParserRuleCall_2());
		}
		this_PostfixOp_2=rulePostfixOp
		{
			$current = $this_PostfixOp_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getInfixOpParserRuleCall_3());
		}
		this_InfixOp_3=ruleInfixOp
		{
			$current = $this_InfixOp_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryOpUnaryOpEnumRuleCall_4_0_0());
					}
					lv_unaryOp_4_0=ruleUnaryOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
						}
						set(
							$current,
							"unaryOp",
							lv_unaryOp_4_0,
							"ru.iaie.reflex.Reflex.UnaryOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getRestCastExpressionParserRuleCall_4_1_0());
					}
					lv_rest_5_0=ruleCastExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
						}
						set(
							$current,
							"rest",
							lv_rest_5_0,
							"ru.iaie.reflex.Reflex.CastExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleCastExpression
entryRuleCastExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCastExpressionRule()); }
	iv_ruleCastExpression=ruleCastExpression
	{ $current=$iv_ruleCastExpression.current; }
	EOF;

// Rule CastExpression
ruleCastExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCastExpressionAccess().getUnaryExpressionParserRuleCall_0());
		}
		this_UnaryExpression_0=ruleUnaryExpression
		{
			$current = $this_UnaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getCastExpressionAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCastExpressionAccess().getTypeReflexTypeParserRuleCall_1_1_0());
					}
					lv_type_2_0=ruleReflexType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCastExpressionRule());
						}
						set(
							$current,
							"type",
							lv_type_2_0,
							"ru.iaie.reflex.Reflex.ReflexType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getCastExpressionAccess().getRightParenthesisKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCastExpressionAccess().getRightCastExpressionParserRuleCall_1_3_0());
					}
					lv_right_4_0=ruleCastExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCastExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_4_0,
							"ru.iaie.reflex.Reflex.CastExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression
	{ $current=$iv_ruleMultiplicativeExpression.current; }
	EOF;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getCastExpressionParserRuleCall_0());
		}
		this_CastExpression_0=ruleCastExpression
		{
			$current = $this_CastExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getMulOpMultiplicativeOpEnumRuleCall_1_1_0());
					}
					lv_mulOp_2_0=ruleMultiplicativeOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
						}
						set(
							$current,
							"mulOp",
							lv_mulOp_2_0,
							"ru.iaie.reflex.Reflex.MultiplicativeOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightCastExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleCastExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ru.iaie.reflex.Reflex.CastExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	iv_ruleAdditiveExpression=ruleAdditiveExpression
	{ $current=$iv_ruleAdditiveExpression.current; }
	EOF;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0());
		}
		this_MultiplicativeExpression_0=ruleMultiplicativeExpression
		{
			$current = $this_MultiplicativeExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getAddOpAdditiveOpEnumRuleCall_1_1_0());
					}
					lv_addOp_2_0=ruleAdditiveOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
						}
						set(
							$current,
							"addOp",
							lv_addOp_2_0,
							"ru.iaie.reflex.Reflex.AdditiveOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRighttAdditiveExpressionParserRuleCall_1_2_0());
					}
					lv_rightt_3_0=ruleAdditiveExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
						}
						set(
							$current,
							"rightt",
							lv_rightt_3_0,
							"ru.iaie.reflex.Reflex.AdditiveExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleShiftExpression
entryRuleShiftExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShiftExpressionRule()); }
	iv_ruleShiftExpression=ruleShiftExpression
	{ $current=$iv_ruleShiftExpression.current; }
	EOF;

// Rule ShiftExpression
ruleShiftExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0());
		}
		this_AdditiveExpression_0=ruleAdditiveExpression
		{
			$current = $this_AdditiveExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getShiftExpressionAccess().getShiftOpShiftOpEnumRuleCall_1_1_0());
					}
					lv_shiftOp_2_0=ruleShiftOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
						}
						set(
							$current,
							"shiftOp",
							lv_shiftOp_2_0,
							"ru.iaie.reflex.Reflex.ShiftOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getShiftExpressionAccess().getRightShiftExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleShiftExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ru.iaie.reflex.Reflex.ShiftExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCompareExpression
entryRuleCompareExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompareExpressionRule()); }
	iv_ruleCompareExpression=ruleCompareExpression
	{ $current=$iv_ruleCompareExpression.current; }
	EOF;

// Rule CompareExpression
ruleCompareExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompareExpressionAccess().getShiftExpressionParserRuleCall_0());
		}
		this_ShiftExpression_0=ruleShiftExpression
		{
			$current = $this_ShiftExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getCompareExpressionAccess().getCompareExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompareExpressionAccess().getCmpOpCompareOpEnumRuleCall_1_1_0());
					}
					lv_cmpOp_2_0=ruleCompareOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompareExpressionRule());
						}
						set(
							$current,
							"cmpOp",
							lv_cmpOp_2_0,
							"ru.iaie.reflex.Reflex.CompareOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompareExpressionAccess().getRightCompareExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleCompareExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompareExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ru.iaie.reflex.Reflex.CompareExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	iv_ruleEqualityExpression=ruleEqualityExpression
	{ $current=$iv_ruleEqualityExpression.current; }
	EOF;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualityExpressionAccess().getCompareExpressionParserRuleCall_0());
		}
		this_CompareExpression_0=ruleCompareExpression
		{
			$current = $this_CompareExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getEqCmpOpCompareEqOpEnumRuleCall_1_1_0());
					}
					lv_eqCmpOp_2_0=ruleCompareEqOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
						}
						set(
							$current,
							"eqCmpOp",
							lv_eqCmpOp_2_0,
							"ru.iaie.reflex.Reflex.CompareEqOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRightEqualityExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleEqualityExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ru.iaie.reflex.Reflex.EqualityExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBitAndExpression
entryRuleBitAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitAndExpressionRule()); }
	iv_ruleBitAndExpression=ruleBitAndExpression
	{ $current=$iv_ruleBitAndExpression.current; }
	EOF;

// Rule BitAndExpression
ruleBitAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBitAndExpressionAccess().getEqualityExpressionParserRuleCall_0());
		}
		this_EqualityExpression_0=ruleEqualityExpression
		{
			$current = $this_EqualityExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBitAndExpressionAccess().getBitAndExpressionLeftAction_1_0(),
						$current);
				}
			)
			this_BIT_AND_2=RULE_BIT_AND
			{
				newLeafNode(this_BIT_AND_2, grammarAccess.getBitAndExpressionAccess().getBIT_ANDTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBitAndExpressionAccess().getRightBitAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBitAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ru.iaie.reflex.Reflex.BitAndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBitXorExpression
entryRuleBitXorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitXorExpressionRule()); }
	iv_ruleBitXorExpression=ruleBitXorExpression
	{ $current=$iv_ruleBitXorExpression.current; }
	EOF;

// Rule BitXorExpression
ruleBitXorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBitXorExpressionAccess().getBitAndExpressionParserRuleCall_0());
		}
		this_BitAndExpression_0=ruleBitAndExpression
		{
			$current = $this_BitAndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBitXorExpressionAccess().getBitXorExpressionLeftAction_1_0(),
						$current);
				}
			)
			this_BIT_XOR_2=RULE_BIT_XOR
			{
				newLeafNode(this_BIT_XOR_2, grammarAccess.getBitXorExpressionAccess().getBIT_XORTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBitXorExpressionAccess().getRightBitXorExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBitXorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitXorExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ru.iaie.reflex.Reflex.BitXorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBitOrExpression
entryRuleBitOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitOrExpressionRule()); }
	iv_ruleBitOrExpression=ruleBitOrExpression
	{ $current=$iv_ruleBitOrExpression.current; }
	EOF;

// Rule BitOrExpression
ruleBitOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBitOrExpressionAccess().getBitXorExpressionParserRuleCall_0());
		}
		this_BitXorExpression_0=ruleBitXorExpression
		{
			$current = $this_BitXorExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBitOrExpressionAccess().getBitOrExpressionLeftAction_1_0(),
						$current);
				}
			)
			this_BIT_OR_2=RULE_BIT_OR
			{
				newLeafNode(this_BIT_OR_2, grammarAccess.getBitOrExpressionAccess().getBIT_ORTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBitOrExpressionAccess().getRightBitOrExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBitOrExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ru.iaie.reflex.Reflex.BitOrExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalAndExpressionRule()); }
	iv_ruleLogicalAndExpression=ruleLogicalAndExpression
	{ $current=$iv_ruleLogicalAndExpression.current; }
	EOF;

// Rule LogicalAndExpression
ruleLogicalAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getBitOrExpressionParserRuleCall_0());
		}
		this_BitOrExpression_0=ruleBitOrExpression
		{
			$current = $this_BitOrExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftAction_1_0(),
						$current);
				}
			)
			this_LOGICAL_AND_2=RULE_LOGICAL_AND
			{
				newLeafNode(this_LOGICAL_AND_2, grammarAccess.getLogicalAndExpressionAccess().getLOGICAL_ANDTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getRightLogicalAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleLogicalAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ru.iaie.reflex.Reflex.LogicalAndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalOrExpressionRule()); }
	iv_ruleLogicalOrExpression=ruleLogicalOrExpression
	{ $current=$iv_ruleLogicalOrExpression.current; }
	EOF;

// Rule LogicalOrExpression
ruleLogicalOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0());
		}
		this_LogicalAndExpression_0=ruleLogicalAndExpression
		{
			$current = $this_LogicalAndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftAction_1_0(),
						$current);
				}
			)
			this_LOGICAL_OR_2=RULE_LOGICAL_OR
			{
				newLeafNode(this_LOGICAL_OR_2, grammarAccess.getLogicalOrExpressionAccess().getLOGICAL_ORTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getRightLogicalOrExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleLogicalOrExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"ru.iaie.reflex.Reflex.LogicalOrExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentExpressionRule()); }
	iv_ruleAssignmentExpression=ruleAssignmentExpression
	{ $current=$iv_ruleAssignmentExpression.current; }
	EOF;

// Rule AssignmentExpression
ruleAssignmentExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getLogicalOrExpressionParserRuleCall_0());
		}
		this_LogicalOrExpression_0=ruleLogicalOrExpression
		{
			$current = $this_LogicalOrExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				(
					lv_assignVar_1_0=RULE_ID
					{
						newLeafNode(lv_assignVar_1_0, grammarAccess.getAssignmentExpressionAccess().getAssignVarIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssignmentExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"assignVar",
							true,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getAssignOpAssignOperatorEnumRuleCall_1_1_0());
					}
					lv_assignOp_2_0=ruleAssignOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
						}
						set(
							$current,
							"assignOp",
							true,
							"ru.iaie.reflex.Reflex.AssignOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getExprLogicalOrExpressionParserRuleCall_1_2_0());
					}
					lv_expr_3_0=ruleLogicalOrExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
						}
						set(
							$current,
							"expr",
							lv_expr_3_0,
							"ru.iaie.reflex.Reflex.LogicalOrExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall());
	}
	this_AssignmentExpression_0=ruleAssignmentExpression
	{
		$current = $this_AssignmentExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleCType
entryRuleCType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCTypeRule()); }
	iv_ruleCType=ruleCType
	{ $current=$iv_ruleCType.current; }
	EOF;

// Rule CType
ruleCType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCTypeAccess().getCTypeAction_0_0(),
						$current);
				}
			)
			this_VOID_C_TYPE_1=RULE_VOID_C_TYPE
			{
				newLeafNode(this_VOID_C_TYPE_1, grammarAccess.getCTypeAccess().getVOID_C_TYPETerminalRuleCall_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCTypeAccess().getCTypeAction_1_0(),
						$current);
				}
			)
			this_FLOAT_C_TYPE_3=RULE_FLOAT_C_TYPE
			{
				newLeafNode(this_FLOAT_C_TYPE_3, grammarAccess.getCTypeAccess().getFLOAT_C_TYPETerminalRuleCall_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCTypeAccess().getCTypeAction_2_0(),
						$current);
				}
			)
			this_DOUBLE_C_TYPE_5=RULE_DOUBLE_C_TYPE
			{
				newLeafNode(this_DOUBLE_C_TYPE_5, grammarAccess.getCTypeAccess().getDOUBLE_C_TYPETerminalRuleCall_2_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCTypeAccess().getCTypeAction_3_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCTypeAccess().getSignSpecCTypeSignSpecEnumRuleCall_3_1_0());
					}
					lv_signSpec_7_0=ruleCTypeSignSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCTypeRule());
						}
						set(
							$current,
							"signSpec",
							true,
							"ru.iaie.reflex.Reflex.CTypeSignSpec");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				this_SHORT_C_TYPE_8=RULE_SHORT_C_TYPE
				{
					newLeafNode(this_SHORT_C_TYPE_8, grammarAccess.getCTypeAccess().getSHORT_C_TYPETerminalRuleCall_3_2_0());
				}
				    |
				this_INT_C_TYPE_9=RULE_INT_C_TYPE
				{
					newLeafNode(this_INT_C_TYPE_9, grammarAccess.getCTypeAccess().getINT_C_TYPETerminalRuleCall_3_2_1());
				}
				    |
				this_LONG_C_TYPE_10=RULE_LONG_C_TYPE
				{
					newLeafNode(this_LONG_C_TYPE_10, grammarAccess.getCTypeAccess().getLONG_C_TYPETerminalRuleCall_3_2_2());
				}
			)
		)
	)
;

// Entry rule entryRuleIntegerType
entryRuleIntegerType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntegerTypeRule()); }
	iv_ruleIntegerType=ruleIntegerType
	{ $current=$iv_ruleIntegerType.current.getText(); }
	EOF;

// Rule IntegerType
ruleIntegerType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_BOOL_TYPE_0=RULE_BOOL_TYPE
		{
			$current.merge(this_BOOL_TYPE_0);
		}
		{
			newLeafNode(this_BOOL_TYPE_0, grammarAccess.getIntegerTypeAccess().getBOOL_TYPETerminalRuleCall_0());
		}
		    |
		this_INT_C_TYPE_1=RULE_INT_C_TYPE
		{
			$current.merge(this_INT_C_TYPE_1);
		}
		{
			newLeafNode(this_INT_C_TYPE_1, grammarAccess.getIntegerTypeAccess().getINT_C_TYPETerminalRuleCall_1());
		}
		    |
		this_SHORT_C_TYPE_2=RULE_SHORT_C_TYPE
		{
			$current.merge(this_SHORT_C_TYPE_2);
		}
		{
			newLeafNode(this_SHORT_C_TYPE_2, grammarAccess.getIntegerTypeAccess().getSHORT_C_TYPETerminalRuleCall_2());
		}
		    |
		this_LONG_C_TYPE_3=RULE_LONG_C_TYPE
		{
			$current.merge(this_LONG_C_TYPE_3);
		}
		{
			newLeafNode(this_LONG_C_TYPE_3, grammarAccess.getIntegerTypeAccess().getLONG_C_TYPETerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleReflexType
entryRuleReflexType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReflexTypeRule()); }
	iv_ruleReflexType=ruleReflexType
	{ $current=$iv_ruleReflexType.current; }
	EOF;

// Rule ReflexType
ruleReflexType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getReflexTypeAccess().getCTypeParserRuleCall_0());
		}
		this_CType_0=ruleCType
		{
			$current = $this_CType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getReflexTypeAccess().getReflexTypeAction_1_0(),
						$current);
				}
			)
			this_BOOL_TYPE_2=RULE_BOOL_TYPE
			{
				newLeafNode(this_BOOL_TYPE_2, grammarAccess.getReflexTypeAccess().getBOOL_TYPETerminalRuleCall_1_1());
			}
		)
	)
;

// Entry rule entryRuleTact
entryRuleTact returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTactRule()); }
	iv_ruleTact=ruleTact
	{ $current=$iv_ruleTact.current; }
	EOF;

// Rule Tact
ruleTact returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='tact'
		{
			newLeafNode(otherlv_0, grammarAccess.getTactAccess().getTactKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_INTEGER
				{
					newLeafNode(lv_value_1_0, grammarAccess.getTactAccess().getValueINTEGERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTactRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"ru.iaie.reflex.Reflex.INTEGER");
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getTactAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleTime
entryRuleTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeRule()); }
	iv_ruleTime=ruleTime
	{ $current=$iv_ruleTime.current; }
	EOF;

// Rule Time
ruleTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_ticks_0_0=RULE_INTEGER
			{
				newLeafNode(lv_ticks_0_0, grammarAccess.getTimeAccess().getTicksINTEGERTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTimeRule());
				}
				setWithLastConsumed(
					$current,
					"ticks",
					lv_ticks_0_0,
					"ru.iaie.reflex.Reflex.INTEGER");
			}
		)
	)
;

// Rule RegisterType
ruleRegisterType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='input'
			{
				$current = grammarAccess.getRegisterTypeAccess().getINPUTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRegisterTypeAccess().getINPUTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='output'
			{
				$current = grammarAccess.getRegisterTypeAccess().getOUTPUTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRegisterTypeAccess().getOUTPUTEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule InfixPostfixOp
ruleInfixPostfixOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='++'
			{
				$current = grammarAccess.getInfixPostfixOpAccess().getINCEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getInfixPostfixOpAccess().getINCEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='--'
			{
				$current = grammarAccess.getInfixPostfixOpAccess().getDECEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getInfixPostfixOpAccess().getDECEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule AssignOperator
ruleAssignOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getAssignOperatorAccess().getASSIGNEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAssignOperatorAccess().getASSIGNEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='*='
			{
				$current = grammarAccess.getAssignOperatorAccess().getMULEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAssignOperatorAccess().getMULEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='/='
			{
				$current = grammarAccess.getAssignOperatorAccess().getDIVEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAssignOperatorAccess().getDIVEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='+='
			{
				$current = grammarAccess.getAssignOperatorAccess().getMODEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAssignOperatorAccess().getMODEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='-='
			{
				$current = grammarAccess.getAssignOperatorAccess().getSUBEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getAssignOperatorAccess().getSUBEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='<<='
			{
				$current = grammarAccess.getAssignOperatorAccess().getCINEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getAssignOperatorAccess().getCINEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='>>='
			{
				$current = grammarAccess.getAssignOperatorAccess().getCOUTEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getAssignOperatorAccess().getCOUTEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='&='
			{
				$current = grammarAccess.getAssignOperatorAccess().getBIT_ANDEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getAssignOperatorAccess().getBIT_ANDEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='^='
			{
				$current = grammarAccess.getAssignOperatorAccess().getBIT_XOREnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getAssignOperatorAccess().getBIT_XOREnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='|='
			{
				$current = grammarAccess.getAssignOperatorAccess().getBIT_OREnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getAssignOperatorAccess().getBIT_OREnumLiteralDeclaration_9());
			}
		)
	)
;

// Rule UnaryOp
ruleUnaryOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getUnaryOpAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnaryOpAccess().getPLUSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getUnaryOpAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnaryOpAccess().getMINUSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='~'
			{
				$current = grammarAccess.getUnaryOpAccess().getBIT_NOTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getUnaryOpAccess().getBIT_NOTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='!'
			{
				$current = grammarAccess.getUnaryOpAccess().getLOGICAL_NOTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getUnaryOpAccess().getLOGICAL_NOTEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule CompareOp
ruleCompareOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='<'
			{
				$current = grammarAccess.getCompareOpAccess().getLESSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompareOpAccess().getLESSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>'
			{
				$current = grammarAccess.getCompareOpAccess().getGREATEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompareOpAccess().getGREATEREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='=<'
			{
				$current = grammarAccess.getCompareOpAccess().getLESS_EQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCompareOpAccess().getLESS_EQEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>='
			{
				$current = grammarAccess.getCompareOpAccess().getGREATER_EQEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCompareOpAccess().getGREATER_EQEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule CompareEqOp
ruleCompareEqOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=='
			{
				$current = grammarAccess.getCompareEqOpAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompareEqOpAccess().getEQEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='!='
			{
				$current = grammarAccess.getCompareEqOpAccess().getNOT_EQEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompareEqOpAccess().getNOT_EQEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule ShiftOp
ruleShiftOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='>>'
			{
				$current = grammarAccess.getShiftOpAccess().getLEFT_SHIFTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getShiftOpAccess().getLEFT_SHIFTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<<'
			{
				$current = grammarAccess.getShiftOpAccess().getRIGHT_SHIFTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getShiftOpAccess().getRIGHT_SHIFTEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule AdditiveOp
ruleAdditiveOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getAdditiveOpAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAdditiveOpAccess().getPLUSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getAdditiveOpAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAdditiveOpAccess().getMINUSEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule MultiplicativeOp
ruleMultiplicativeOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='*'
			{
				$current = grammarAccess.getMultiplicativeOpAccess().getMULEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMultiplicativeOpAccess().getMULEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='/'
			{
				$current = grammarAccess.getMultiplicativeOpAccess().getDIVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMultiplicativeOpAccess().getDIVEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='%'
			{
				$current = grammarAccess.getMultiplicativeOpAccess().getMODEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMultiplicativeOpAccess().getMODEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule CTypeSignSpec
ruleCTypeSignSpec returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='signed'
			{
				$current = grammarAccess.getCTypeSignSpecAccess().getSIGNEDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCTypeSignSpecAccess().getSIGNEDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='unsigned'
			{
				$current = grammarAccess.getCTypeSignSpecAccess().getUNSIGNEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCTypeSignSpecAccess().getUNSIGNEDEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_LOGICAL_OR : '||';

RULE_LOGICAL_AND : '&&';

RULE_BIT_OR : '|';

RULE_BIT_XOR : '^';

RULE_BIT_AND : '&';

RULE_VOID_C_TYPE : 'void';

RULE_FLOAT_C_TYPE : 'float';

RULE_DOUBLE_C_TYPE : 'double';

RULE_SHORT_C_TYPE : 'short';

RULE_INT_C_TYPE : 'int';

RULE_LONG_C_TYPE : 'long';

RULE_BOOL_TYPE : 'bool';

RULE_INTEGER : (RULE_HEX|RULE_OCTAL|RULE_DECIMAL) (RULE_LONG|RULE_UNSIGNED)?;

RULE_FLOAT : (RULE_DEC_FLOAT|RULE_HEX_FLOAT);

fragment RULE_DEC_FLOAT : RULE_DEC_SEQUENCE? '.' RULE_DEC_SEQUENCE (RULE_EXPONENT RULE_SIGN RULE_DEC_SEQUENCE)? (RULE_LONG|RULE_FLOAT_SUFFIX)?;

fragment RULE_HEX_FLOAT : RULE_HEX_SEQUENCE? '.' RULE_HEX_SEQUENCE (RULE_BIN_EXPONENT RULE_SIGN RULE_DEC_SEQUENCE)? (RULE_LONG|RULE_FLOAT_SUFFIX)?;

fragment RULE_DEC_SEQUENCE : ('0'..'9')+;

fragment RULE_HEX_SEQUENCE : ('0'..'9'|'a'..'f'|'A'..'F')+;

fragment RULE_BIN_EXPONENT : ('p'|'P');

fragment RULE_EXPONENT : ('e'|'E');

fragment RULE_SIGN : ('+'|'-');

fragment RULE_DECIMAL : ('0'|'1'..'9' ('0'..'9')*);

fragment RULE_OCTAL : '0' ('0'..'7')+;

fragment RULE_HEX : RULE_HEX_PREFIX RULE_HEX_SEQUENCE;

fragment RULE_HEX_PREFIX : '0' ('x'|'X');

fragment RULE_LONG : ('L'|'l');

fragment RULE_FLOAT_SUFFIX : ('F'|'f');

fragment RULE_UNSIGNED : ('U'|'u');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
