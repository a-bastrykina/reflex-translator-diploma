grammar ru.iaie.reflex.Reflex with org.eclipse.xtext.common.Terminals

generate reflex "http://www.iaie.ru/reflex/Reflex"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program:
	"program" name=ID "{"
	(ticks?=Tact)?
	(consts+=Const |
	enums+=Enum |
	functions+=Function |
	registers+=Register |
	processes+=Process)*
	"}";

Process:
	"proc" name=ID "{"
	variables+=Variable*
	states+=State*
	"}";

Variable:
	(ImportedVariable | DeclaredVariable) ";";

ImportedVariable:
	"from" "proc" procId=ID varNames+=ID ("," varNames+=ID)*;

DeclaredVariable:
	(PhysicalVariable | ProgramVariable) visibility=Visibility;

PhysicalVariable:
	type=IntegerType name=ID "=" "{" ports+=RegisterPort ("," ports+=RegisterPort)* "}";

RegisterPort:
	regName=ID "[" port=INTEGER "]";

ProgramVariable:
	type=ReflexType name=ID;

Visibility:
	LOCAL="local" | GLOBAL="global" | SHARED="shared" sharingProcs+=ID ("," sharingProcs+=ID)*;

State:
	"state" name=ID "{"
	stateFunction=StatementSequence
	(timeoutFunction=TimeoutFunction)?
	"}";

StatementSequence:
	{StatementSequence} statements+=Statement*;

StatementBlock:
	{StatementBlock} "{" statements+=Statement* "}";

TimeoutFunction:
	"timeout" time=Time body=Statement;

Statement:
	{Statement} ";" | StatementBlock |
	StartProcStat | StopProcStat | ErrorStat |
	LoopStat | RestartStat | ResetStat
	| SetStateStat | IfElseStat | SwitchStat | Expression ";";

IfElseStat:
	"if" "(" cond=Expression ")"
	then=Statement
	(=> "else" else=Statement)?;

SwitchStat:
	"switch" "(" expr=Expression ")" "{" options+=CaseStat* "}";

	//TODO: add flag for break statement absence
CaseStat:
	"case" option=INTEGER ":" body=StatementSequence hasBreak?=BreakStat "}";

BreakStat:
	"break" ";";

StartProcStat:
	"start" procId=ID ";";

StopProcStat:
	{StopProcStat} "stop" (procId=ID)? ";";

ErrorStat:
	{ErrorStat} "error" (procId=ID)? ";";

LoopStat:
	{LoopStat} "loop" ";";

RestartStat:
	{RestartStat} "restart" ";";

ResetStat:
	{ResetStat} "reset" "timeout" ";";

SetStateStat:
	{SetStateStat} "set" (("state" stateId=ID) | next?="next") ";";

Function:
	returnType=CType name=ID "(" argTypes+=CType ("," argTypes+=CType)* ")" ";";

enum RegisterType:
	INPUT='input' | OUTPUT='output';

Register:
	type=RegisterType name=ID addr1=INTEGER addr2=INTEGER regSize=INTEGER ";";

Const:
	"const" constId=ID constValue=Expression ";";

Enum:
	"enum" enumId=ID "{" enumMembers+=EnumMember (',' enumMembers+=EnumMember)* "}";

EnumMember:
	name=ID "=" value=Expression;

	// Expression	
InfixOp:
	op=InfixPostfixOp varId=ID;

PostfixOp:
	varId=ID op=InfixPostfixOp;

FunctionCall:
	funcId=ID "(" (args+=Expression ("," args+=Expression)*)? ")";

PrimaryExpression:
	varId=ID | {PrimaryExpression} INTEGER | {PrimaryExpression} FLOAT | "(" expr=Expression ")";

UnaryExpression:
	PrimaryExpression |
	FunctionCall |
	PostfixOp |
	InfixOp |
	unaryOp=UnaryOp rest=CastExpression;

CastExpression:
	UnaryExpression |
	"(" type=ReflexType ")" right=CastExpression;

MultiplicativeExpression:
	CastExpression ({MultiplicativeExpression.left=current} mulOp=MultiplicativeOp right=CastExpression)*;

AdditiveExpression:
	MultiplicativeExpression ({AdditiveExpression.left=current} addOp=AdditiveOp rightt=AdditiveExpression)*;

ShiftExpression:
	AdditiveExpression ({ShiftExpression.left=current} shiftOp=ShiftOp right=ShiftExpression)*;

CompareExpression:
	ShiftExpression ({CompareExpression.left=current} cmpOp=CompareOp right=CompareExpression)*;

EqualityExpression:
	CompareExpression ({EqualityExpression.left=current} eqCmpOp=CompareEqOp right=EqualityExpression)*;

BitAndExpression:
	EqualityExpression ({BitAndExpression.left=current} BIT_AND right=BitAndExpression)*;

BitXorExpression:
	BitAndExpression ({BitXorExpression.left=current} BIT_XOR right=BitXorExpression)*;

BitOrExpression:
	BitXorExpression ({BitOrExpression.left=current} BIT_OR right=BitOrExpression)*;

LogicalAndExpression:
	BitOrExpression ({LogicalAndExpression.left=current} LOGICAL_AND right=LogicalAndExpression)*;

LogicalOrExpression:
	LogicalAndExpression ({LogicalOrExpression.left=current} LOGICAL_OR right=LogicalOrExpression)*;

AssignmentExpression:
	LogicalOrExpression |
	assignVar?=ID assignOp?=AssignOperator expr=LogicalOrExpression;

Expression:
	AssignmentExpression;

enum InfixPostfixOp:
	INC="++" | DEC="--";

enum AssignOperator:
	ASSIGN="=" | MUL='*=' | DIV="/=" | MOD="+=" | SUB="-=" | CIN="<<=" | COUT=">>=" | BIT_AND="&=" | BIT_XOR="^=" |
	BIT_OR="|=";

enum UnaryOp:
	PLUS="+" | MINUS="-" | BIT_NOT="~" | LOGICAL_NOT="!";

enum CompareOp:
	LESS="<" | GREATER=">" | LESS_EQ="=<" | GREATER_EQ=">=";

enum CompareEqOp:
	EQ="==" | NOT_EQ="!=";

enum ShiftOp:
	LEFT_SHIFT=">>" | RIGHT_SHIFT="<<";

enum AdditiveOp:
	PLUS="+" | MINUS="-";

enum MultiplicativeOp:
	MUL="*" | DIV="/" | MOD="%";


// TODO: fix types

CType:
	{CType} VOID_C_TYPE | {CType} FLOAT_C_TYPE | {CType} DOUBLE_C_TYPE | {CType} (signSpec?=CTypeSignSpec)? (SHORT_C_TYPE
	| INT_C_TYPE | LONG_C_TYPE);

enum CTypeSignSpec:
	SIGNED="signed" | UNSIGNED="unsigned";

IntegerType:
	BOOL_TYPE | INT_C_TYPE | SHORT_C_TYPE | LONG_C_TYPE;

ReflexType:
	CType | {ReflexType} BOOL_TYPE;

terminal LOGICAL_OR:
	"||";

terminal LOGICAL_AND:
	"&&";

terminal BIT_OR:
	"|";

terminal BIT_XOR:
	"^";

terminal BIT_AND:
	"&";

	// TODO: move to another file
terminal VOID_C_TYPE:
	"void";

terminal FLOAT_C_TYPE:
	"float";

terminal DOUBLE_C_TYPE:
	"double";

terminal SHORT_C_TYPE:
	"short";

terminal INT_C_TYPE:
	"int";

terminal LONG_C_TYPE:
	"long";

terminal BOOL_TYPE:
	"bool";

Tact:
	"tact" value=INTEGER ";";

	// LITERALS
terminal INTEGER:
	(HEX | OCTAL | DECIMAL) (LONG | UNSIGNED)?;

terminal FLOAT:
	DEC_FLOAT | HEX_FLOAT;

terminal fragment DEC_FLOAT:
	DEC_SEQUENCE? '.' DEC_SEQUENCE (EXPONENT SIGN DEC_SEQUENCE)? (LONG | FLOAT_SUFFIX)?;

terminal fragment HEX_FLOAT:
	HEX_SEQUENCE? '.' HEX_SEQUENCE (BIN_EXPONENT SIGN DEC_SEQUENCE)? (LONG | FLOAT_SUFFIX)?;

terminal fragment DEC_SEQUENCE:
	('0'..'9')+;

terminal fragment HEX_SEQUENCE:
	('0'..'9' | 'a'..'f' | 'A'..'F')+;

terminal fragment BIN_EXPONENT:
	('p' | 'P');

terminal fragment EXPONENT:
	'e' | 'E';

terminal fragment SIGN:
	'+' | '-';

	//terminal REG_SIZE returns ecore::EInt:
//	("8" | "16");
terminal fragment DECIMAL:
	"0" | ('1'..'9') ('0'..'9')*;

terminal fragment OCTAL:
	'0' ('0'..'7')+;

terminal fragment HEX:
	HEX_PREFIX HEX_SEQUENCE;

terminal fragment HEX_PREFIX:
	'0' ('x' | 'X');

	// Time
Time:
	ticks = INTEGER;
//	{Time} ("0t" | "0T") (isDay?=DAY (days=DECIMAL))? (isHour?=HOUR (hours=DECIMAL))?; //(MINUTE minutes=DECIMAL)?(SECOND seconds=DECIMAL)?(MILISECOND milis=DECIMAL)?(MICROSECOND micros=DECIMAL)?(NANOSECOND nanos=DECIMAL)?;
terminal fragment LONG:
	"L" | "l";

terminal fragment FLOAT_SUFFIX:
	"F" | "f";

terminal fragment UNSIGNED:
	"U" | "u";

//terminal fragment DAY:
//	"D" | "d";
//
//terminal fragment HOUR:
//	"H" | "h";
//
//terminal fragment MINUTE:
//	"M" | "m";
//
//terminal fragment SECOND:
//	"S" | "s";
//
//terminal fragment MILISECOND:
//	"MS" | "ms";
//
//terminal fragment MICROSECOND:
//	"US" | "us";
//
//terminal fragment NANOSECOND:
//	"NS" | "ns";