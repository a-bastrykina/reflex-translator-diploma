/**
 * generated by Xtext 2.20.0
 */
package ru.iaie.reflex.scoping;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import ru.iaie.reflex.reflex.ReflexPackage;
import ru.iaie.reflex.reflex.State;
import ru.iaie.reflex.scoping.AbstractReflexScopeProvider;

/**
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class ReflexScopeProvider extends AbstractReflexScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    boolean _matched = false;
    if (Objects.equal(context, State.class)) {
      _matched=true;
      EReference _setStateStat_State = ReflexPackage.eINSTANCE.getSetStateStat_State();
      boolean _equals = Objects.equal(reference, _setStateStat_State);
      if (_equals) {
        EList<State> candidates = EcoreUtil2.<ru.iaie.reflex.reflex.Process>getContainerOfType(context, ru.iaie.reflex.reflex.Process.class).getStates();
        return Scopes.scopeFor(candidates);
      }
    }
    return super.getScope(context, reference);
  }
}
