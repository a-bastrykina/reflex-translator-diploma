/**
 * generated by Xtext 2.20.0
 */
package ru.iaie.reflex.generator;

import com.google.common.collect.Iterables;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import ru.iaie.reflex.generator.ReflexIdentifiers;
import ru.iaie.reflex.reflex.Body;
import ru.iaie.reflex.reflex.Program;
import ru.iaie.reflex.reflex.State;
import ru.iaie.reflex.reflex.StopProcStat;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ReflexGenerator extends AbstractGenerator {
  private Map<String, String> procIdentifiers = new HashMap<String, String>();
  
  private Map<String, String> stateIdentifiers = new HashMap<String, String>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Program program = ((Program[])Conversions.unwrapArray((Iterables.<Program>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Program.class)), Program.class))[0];
    final String fileContent = this.translateProgram(program);
    StringConcatenation _builder = new StringConcatenation();
    String _lowerCase = program.getName().toLowerCase();
    _builder.append(_lowerCase);
    _builder.append(".c");
    fsa.generateFile(_builder.toString(), fileContent);
  }
  
  public String getProcessId(final ru.iaie.reflex.reflex.Process proc) {
    boolean _containsKey = this.procIdentifiers.containsKey(proc.getName());
    boolean _not = (!_containsKey);
    if (_not) {
      final String id = proc.getName().toUpperCase();
      this.procIdentifiers.put(proc.getName(), id);
    }
    return this.procIdentifiers.get(proc.getName());
  }
  
  public String generateProcessesEnum(final Program prog) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("enum ");
    _builder.append(ReflexIdentifiers.PROC_ENUM_ID);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<ru.iaie.reflex.reflex.Process> _processes = prog.getProcesses();
      for(final ru.iaie.reflex.reflex.Process proc : _processes) {
        _builder.append("\t");
        String _processId = this.getProcessId(proc);
        _builder.append(_processId, "\t");
        _builder.append(",");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String getStateId(final ru.iaie.reflex.reflex.Process proc, final State state) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = proc.getName();
    _builder.append(_name);
    _builder.append(".");
    String _name_1 = state.getName();
    _builder.append(_name_1);
    final String key = _builder.toString();
    boolean _containsKey = this.stateIdentifiers.containsKey(key);
    boolean _not = (!_containsKey);
    if (_not) {
      StringConcatenation _builder_1 = new StringConcatenation();
      String _upperCase = proc.getName().toUpperCase();
      _builder_1.append(_upperCase);
      _builder_1.append("_");
      String _upperCase_1 = state.getName().toUpperCase();
      _builder_1.append(_upperCase_1);
      final String id = _builder_1.toString();
      this.stateIdentifiers.put(key, id);
    }
    return this.stateIdentifiers.get(key);
  }
  
  public String generateStateEnum(final ru.iaie.reflex.reflex.Process proc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("enum ");
    String _name = proc.getName();
    _builder.append(_name);
    _builder.append("_STATES {");
    _builder.newLineIfNotEmpty();
    {
      EList<State> _states = proc.getStates();
      for(final State state : _states) {
        _builder.append("\t");
        String _stateId = this.getStateId(proc, state);
        _builder.append(_stateId, "\t");
        _builder.append(",");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    String _name_1 = proc.getName();
    _builder.append(_name_1, "\t");
    _builder.append(ReflexIdentifiers.STOP_STATE_ID_SUFFIX, "\t");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_2 = proc.getName();
    _builder.append(_name_2, "\t");
    _builder.append(ReflexIdentifiers.ERR_STATE_ID_SUFFIX, "\t");
    _builder.append("\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String generateTimers(final Program prog) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("int ");
    _builder.append(ReflexIdentifiers.TIMER_ARRAY_NAME);
    _builder.append("[");
    _builder.append(ReflexIdentifiers.PROC_COUNT_VAR);
    _builder.append("];");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String generateStatesArray(final Program prog) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("int ");
    _builder.append(ReflexIdentifiers.PROC_STATES_ARRAY_NAME);
    _builder.append("[");
    _builder.append(ReflexIdentifiers.PROC_COUNT_VAR);
    _builder.append("];");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String translateProgram(final Program prog) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#include <stdio.h>");
    _builder.newLine();
    _builder.append("#include <stdlib.h>");
    _builder.newLine();
    String _generateProgramInfo = this.generateProgramInfo(prog);
    _builder.append(_generateProgramInfo);
    _builder.newLineIfNotEmpty();
    _builder.append("int main() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while (1) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int i = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (; i < ");
    _builder.append(ReflexIdentifiers.PROC_COUNT_VAR, "\t\t");
    _builder.append("; i++) {");
    _builder.newLineIfNotEmpty();
    {
      EList<ru.iaie.reflex.reflex.Process> _processes = prog.getProcesses();
      for(final ru.iaie.reflex.reflex.Process proc : _processes) {
        _builder.append("\t\t");
        String _translateProcess = this.translateProcess(proc);
        _builder.append(_translateProcess, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String generateProgramInfo(final Program prog) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("int ");
    _builder.append(ReflexIdentifiers.PROC_COUNT_VAR);
    _builder.append(" = ");
    int _length = ((Object[])Conversions.unwrapArray(prog.getProcesses(), Object.class)).length;
    _builder.append(_length);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    String _generateTimers = this.generateTimers(prog);
    _builder.append(_generateTimers);
    _builder.newLineIfNotEmpty();
    String _generateStatesArray = this.generateStatesArray(prog);
    _builder.append(_generateStatesArray);
    _builder.newLineIfNotEmpty();
    String _generateProcessesEnum = this.generateProcessesEnum(prog);
    _builder.append(_generateProcessesEnum);
    _builder.newLineIfNotEmpty();
    {
      EList<ru.iaie.reflex.reflex.Process> _processes = prog.getProcesses();
      for(final ru.iaie.reflex.reflex.Process proc : _processes) {
        String _generateStateEnum = this.generateStateEnum(proc);
        _builder.append(_generateStateEnum);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public String translateProcess(final ru.iaie.reflex.reflex.Process proc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("switch (");
    _builder.append(ReflexIdentifiers.PROC_STATES_ARRAY_NAME);
    _builder.append("[");
    String _processId = this.getProcessId(proc);
    _builder.append(_processId);
    _builder.append("]) {");
    _builder.newLineIfNotEmpty();
    {
      EList<State> _states = proc.getStates();
      for(final State state : _states) {
        _builder.append("\t");
        String _translateState = this.translateState(proc, state);
        _builder.append(_translateState, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String translateState(final ru.iaie.reflex.reflex.Process proc, final State state) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("case ");
    String _stateId = this.getStateId(proc, state);
    _builder.append(_stateId);
    _builder.append(": {");
    _builder.newLineIfNotEmpty();
    {
      EList<Body> _statements = state.getStateFunction().getStatements();
      for(final Body stat : _statements) {
        String _translateStatement = this.translateStatement(proc, state, stat);
        _builder.append(_translateStatement);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String translateStatement(final ru.iaie.reflex.reflex.Process proc, final State state, final EObject statement) {
    if ((statement instanceof StopProcStat)) {
      return this.translateStopProcStat(proc, state, ((StopProcStat)statement));
    } else {
      if ((statement instanceof Body)) {
        StringConcatenation _builder = new StringConcatenation();
        {
          EList<EObject> _statements = ((Body)statement).getStatements();
          for(final EObject stat : _statements) {
            Object _translateStatement = this.translateStatement(proc, state, stat);
            _builder.append(_translateStatement);
            _builder.newLineIfNotEmpty();
          }
        }
        return _builder.toString();
      }
    }
    return null;
  }
  
  public String translateStopProcStat(final ru.iaie.reflex.reflex.Process proc, final State state, final StopProcStat sps) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(ReflexIdentifiers.PROC_STATES_ARRAY_NAME);
    _builder.append("[");
    String _processId = this.getProcessId(proc);
    _builder.append(_processId);
    _builder.append("] =  ");
    String _name = proc.getName();
    _builder.append(_name);
    _builder.append(ReflexIdentifiers.STOP_STATE_ID_SUFFIX);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
}
