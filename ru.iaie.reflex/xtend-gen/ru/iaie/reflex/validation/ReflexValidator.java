/**
 * generated by Xtext 2.20.0
 */
package ru.iaie.reflex.validation;

import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Conversions;
import ru.iaie.reflex.reflex.ReflexPackage;
import ru.iaie.reflex.reflex.SetStateStat;
import ru.iaie.reflex.validation.AbstractReflexValidator;

/**
 * This class contains custom validation rules.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class ReflexValidator extends AbstractReflexValidator {
  @Check
  public void checkNextState(final SetStateStat setStateStat) {
    boolean _isNext = setStateStat.isNext();
    if (_isNext) {
      final ru.iaie.reflex.reflex.State state = EcoreUtil2.<ru.iaie.reflex.reflex.State>getContainerOfType(setStateStat, ru.iaie.reflex.reflex.State.class);
      final ru.iaie.reflex.reflex.Process process = EcoreUtil2.<ru.iaie.reflex.reflex.Process>getContainerOfType(setStateStat, ru.iaie.reflex.reflex.Process.class);
      final int callingStateIndex = process.getStates().indexOf(state);
      int _length = ((Object[])Conversions.unwrapArray(process.getStates(), Object.class)).length;
      boolean _greaterEqualsThan = ((callingStateIndex + 1) >= _length);
      if (_greaterEqualsThan) {
        this.error("Invalid state transition: no next state in the process", ReflexPackage.eINSTANCE.getSetStateStat_Next());
      }
    }
  }
}
