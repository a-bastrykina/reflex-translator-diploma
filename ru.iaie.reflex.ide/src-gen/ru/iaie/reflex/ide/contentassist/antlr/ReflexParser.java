/*
 * generated by Xtext 2.20.0
 */
package ru.iaie.reflex.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import ru.iaie.reflex.ide.contentassist.antlr.internal.InternalReflexParser;
import ru.iaie.reflex.services.ReflexGrammarAccess;

public class ReflexParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ReflexGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ReflexGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getProgramAccess().getAlternatives_4(), "rule__Program__Alternatives_4");
			builder.put(grammarAccess.getVariableAccess().getAlternatives(), "rule__Variable__Alternatives");
			builder.put(grammarAccess.getDeclaredVariableAccess().getAlternatives_0(), "rule__DeclaredVariable__Alternatives_0");
			builder.put(grammarAccess.getVisibilityAccess().getAlternatives(), "rule__Visibility__Alternatives");
			builder.put(grammarAccess.getBodyAccess().getAlternatives(), "rule__Body__Alternatives");
			builder.put(grammarAccess.getSetStateStatAccess().getAlternatives_2(), "rule__SetStateStat__Alternatives_2");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
			builder.put(grammarAccess.getUnaryExpressionAccess().getAlternatives(), "rule__UnaryExpression__Alternatives");
			builder.put(grammarAccess.getCastExpressionAccess().getAlternatives(), "rule__CastExpression__Alternatives");
			builder.put(grammarAccess.getAssignmentExpressionAccess().getAlternatives(), "rule__AssignmentExpression__Alternatives");
			builder.put(grammarAccess.getCTypeAccess().getAlternatives(), "rule__CType__Alternatives");
			builder.put(grammarAccess.getCTypeAccess().getAlternatives_3_2(), "rule__CType__Alternatives_3_2");
			builder.put(grammarAccess.getIntegerTypeAccess().getAlternatives(), "rule__IntegerType__Alternatives");
			builder.put(grammarAccess.getReflexTypeAccess().getAlternatives(), "rule__ReflexType__Alternatives");
			builder.put(grammarAccess.getIntegerAccess().getValueAlternatives_0_0(), "rule__Integer__ValueAlternatives_0_0");
			builder.put(grammarAccess.getIntegerAccess().getQualfierAlternatives_1_0(), "rule__Integer__QualfierAlternatives_1_0");
			builder.put(grammarAccess.getTimeAccess().getAlternatives_1(), "rule__Time__Alternatives_1");
			builder.put(grammarAccess.getRegisterTypeAccess().getAlternatives(), "rule__RegisterType__Alternatives");
			builder.put(grammarAccess.getInfixPostfixOpAccess().getAlternatives(), "rule__InfixPostfixOp__Alternatives");
			builder.put(grammarAccess.getAssignOperatorAccess().getAlternatives(), "rule__AssignOperator__Alternatives");
			builder.put(grammarAccess.getUnaryOpAccess().getAlternatives(), "rule__UnaryOp__Alternatives");
			builder.put(grammarAccess.getCompareOpAccess().getAlternatives(), "rule__CompareOp__Alternatives");
			builder.put(grammarAccess.getCompareEqOpAccess().getAlternatives(), "rule__CompareEqOp__Alternatives");
			builder.put(grammarAccess.getShiftOpAccess().getAlternatives(), "rule__ShiftOp__Alternatives");
			builder.put(grammarAccess.getAdditiveOpAccess().getAlternatives(), "rule__AdditiveOp__Alternatives");
			builder.put(grammarAccess.getMultiplicativeOpAccess().getAlternatives(), "rule__MultiplicativeOp__Alternatives");
			builder.put(grammarAccess.getCTypeSignSpecAccess().getAlternatives(), "rule__CTypeSignSpec__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getProcessAccess().getGroup(), "rule__Process__Group__0");
			builder.put(grammarAccess.getVariableAccess().getGroup_1(), "rule__Variable__Group_1__0");
			builder.put(grammarAccess.getImportedVariableAccess().getGroup(), "rule__ImportedVariable__Group__0");
			builder.put(grammarAccess.getDeclaredVariableAccess().getGroup(), "rule__DeclaredVariable__Group__0");
			builder.put(grammarAccess.getPhysicalVariableAccess().getGroup(), "rule__PhysicalVariable__Group__0");
			builder.put(grammarAccess.getPhysicalVariableAccess().getGroup_5(), "rule__PhysicalVariable__Group_5__0");
			builder.put(grammarAccess.getRegisterPortAccess().getGroup(), "rule__RegisterPort__Group__0");
			builder.put(grammarAccess.getProgramVariableAccess().getGroup(), "rule__ProgramVariable__Group__0");
			builder.put(grammarAccess.getVisibilityAccess().getGroup_2(), "rule__Visibility__Group_2__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getStateFunctionAccess().getGroup(), "rule__StateFunction__Group__0");
			builder.put(grammarAccess.getTimeoutFunctionAccess().getGroup(), "rule__TimeoutFunction__Group__0");
			builder.put(grammarAccess.getBodyAccess().getGroup_0(), "rule__Body__Group_0__0");
			builder.put(grammarAccess.getBodyAccess().getGroup_1(), "rule__Body__Group_1__0");
			builder.put(grammarAccess.getBodyAccess().getGroup_11(), "rule__Body__Group_11__0");
			builder.put(grammarAccess.getIfElseStatAccess().getGroup(), "rule__IfElseStat__Group__0");
			builder.put(grammarAccess.getIfElseStatAccess().getGroup_5(), "rule__IfElseStat__Group_5__0");
			builder.put(grammarAccess.getSwitchStatAccess().getGroup(), "rule__SwitchStat__Group__0");
			builder.put(grammarAccess.getCaseStatAccess().getGroup(), "rule__CaseStat__Group__0");
			builder.put(grammarAccess.getCaseStatAccess().getGroup_4(), "rule__CaseStat__Group_4__0");
			builder.put(grammarAccess.getStartProcStatAccess().getGroup(), "rule__StartProcStat__Group__0");
			builder.put(grammarAccess.getStopProcStatAccess().getGroup(), "rule__StopProcStat__Group__0");
			builder.put(grammarAccess.getErrorStatAccess().getGroup(), "rule__ErrorStat__Group__0");
			builder.put(grammarAccess.getLoopStatAccess().getGroup(), "rule__LoopStat__Group__0");
			builder.put(grammarAccess.getRestartStatAccess().getGroup(), "rule__RestartStat__Group__0");
			builder.put(grammarAccess.getResetStatAccess().getGroup(), "rule__ResetStat__Group__0");
			builder.put(grammarAccess.getSetStateStatAccess().getGroup(), "rule__SetStateStat__Group__0");
			builder.put(grammarAccess.getSetStateStatAccess().getGroup_2_0(), "rule__SetStateStat__Group_2_0__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup_4(), "rule__Function__Group_4__0");
			builder.put(grammarAccess.getRegisterAccess().getGroup(), "rule__Register__Group__0");
			builder.put(grammarAccess.getConstAccess().getGroup(), "rule__Const__Group__0");
			builder.put(grammarAccess.getEnumAccess().getGroup(), "rule__Enum__Group__0");
			builder.put(grammarAccess.getEnumAccess().getGroup_2(), "rule__Enum__Group_2__0");
			builder.put(grammarAccess.getEnumMemberAccess().getGroup(), "rule__EnumMember__Group__0");
			builder.put(grammarAccess.getInfixOpAccess().getGroup(), "rule__InfixOp__Group__0");
			builder.put(grammarAccess.getPostfixOpAccess().getGroup(), "rule__PostfixOp__Group__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_3(), "rule__FunctionCall__Group_3__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_2(), "rule__PrimaryExpression__Group_2__0");
			builder.put(grammarAccess.getUnaryExpressionAccess().getGroup_4(), "rule__UnaryExpression__Group_4__0");
			builder.put(grammarAccess.getCastExpressionAccess().getGroup_1(), "rule__CastExpression__Group_1__0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1(), "rule__MultiplicativeExpression__Group_1__0");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getGroup(), "rule__AdditiveExpression__Group__0");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getGroup_1(), "rule__AdditiveExpression__Group_1__0");
			builder.put(grammarAccess.getShiftExpressionAccess().getGroup(), "rule__ShiftExpression__Group__0");
			builder.put(grammarAccess.getShiftExpressionAccess().getGroup_1(), "rule__ShiftExpression__Group_1__0");
			builder.put(grammarAccess.getCompareExpressionAccess().getGroup(), "rule__CompareExpression__Group__0");
			builder.put(grammarAccess.getCompareExpressionAccess().getGroup_1(), "rule__CompareExpression__Group_1__0");
			builder.put(grammarAccess.getEqualityExpressionAccess().getGroup(), "rule__EqualityExpression__Group__0");
			builder.put(grammarAccess.getEqualityExpressionAccess().getGroup_1(), "rule__EqualityExpression__Group_1__0");
			builder.put(grammarAccess.getBitAndExpressionAccess().getGroup(), "rule__BitAndExpression__Group__0");
			builder.put(grammarAccess.getBitAndExpressionAccess().getGroup_1(), "rule__BitAndExpression__Group_1__0");
			builder.put(grammarAccess.getBitXorExpressionAccess().getGroup(), "rule__BitXorExpression__Group__0");
			builder.put(grammarAccess.getBitXorExpressionAccess().getGroup_1(), "rule__BitXorExpression__Group_1__0");
			builder.put(grammarAccess.getBitOrExpressionAccess().getGroup(), "rule__BitOrExpression__Group__0");
			builder.put(grammarAccess.getBitOrExpressionAccess().getGroup_1(), "rule__BitOrExpression__Group_1__0");
			builder.put(grammarAccess.getLogicalAndExpressionAccess().getGroup(), "rule__LogicalAndExpression__Group__0");
			builder.put(grammarAccess.getLogicalAndExpressionAccess().getGroup_1(), "rule__LogicalAndExpression__Group_1__0");
			builder.put(grammarAccess.getLogicalOrExpressionAccess().getGroup(), "rule__LogicalOrExpression__Group__0");
			builder.put(grammarAccess.getLogicalOrExpressionAccess().getGroup_1(), "rule__LogicalOrExpression__Group_1__0");
			builder.put(grammarAccess.getAssignmentExpressionAccess().getGroup_1(), "rule__AssignmentExpression__Group_1__0");
			builder.put(grammarAccess.getCTypeAccess().getGroup_0(), "rule__CType__Group_0__0");
			builder.put(grammarAccess.getCTypeAccess().getGroup_1(), "rule__CType__Group_1__0");
			builder.put(grammarAccess.getCTypeAccess().getGroup_2(), "rule__CType__Group_2__0");
			builder.put(grammarAccess.getCTypeAccess().getGroup_3(), "rule__CType__Group_3__0");
			builder.put(grammarAccess.getReflexTypeAccess().getGroup_1(), "rule__ReflexType__Group_1__0");
			builder.put(grammarAccess.getIntegerAccess().getGroup(), "rule__Integer__Group__0");
			builder.put(grammarAccess.getTimeAccess().getGroup(), "rule__Time__Group__0");
			builder.put(grammarAccess.getTimeAccess().getGroup_2(), "rule__Time__Group_2__0");
			builder.put(grammarAccess.getTimeAccess().getGroup_3(), "rule__Time__Group_3__0");
			builder.put(grammarAccess.getTimeAccess().getGroup_4(), "rule__Time__Group_4__0");
			builder.put(grammarAccess.getTimeAccess().getGroup_5(), "rule__Time__Group_5__0");
			builder.put(grammarAccess.getTimeAccess().getGroup_6(), "rule__Time__Group_6__0");
			builder.put(grammarAccess.getTimeAccess().getGroup_7(), "rule__Time__Group_7__0");
			builder.put(grammarAccess.getTimeAccess().getGroup_8(), "rule__Time__Group_8__0");
			builder.put(grammarAccess.getProgramAccess().getNameAssignment_1(), "rule__Program__NameAssignment_1");
			builder.put(grammarAccess.getProgramAccess().getTicksAssignment_3(), "rule__Program__TicksAssignment_3");
			builder.put(grammarAccess.getProgramAccess().getConstsAssignment_4_0(), "rule__Program__ConstsAssignment_4_0");
			builder.put(grammarAccess.getProgramAccess().getEnumsAssignment_4_1(), "rule__Program__EnumsAssignment_4_1");
			builder.put(grammarAccess.getProgramAccess().getFunctionsAssignment_4_2(), "rule__Program__FunctionsAssignment_4_2");
			builder.put(grammarAccess.getProgramAccess().getRegistersAssignment_4_3(), "rule__Program__RegistersAssignment_4_3");
			builder.put(grammarAccess.getProgramAccess().getProcessesAssignment_4_4(), "rule__Program__ProcessesAssignment_4_4");
			builder.put(grammarAccess.getProcessAccess().getNameAssignment_1(), "rule__Process__NameAssignment_1");
			builder.put(grammarAccess.getProcessAccess().getVariableAssignment_3(), "rule__Process__VariableAssignment_3");
			builder.put(grammarAccess.getProcessAccess().getStatesAssignment_4(), "rule__Process__StatesAssignment_4");
			builder.put(grammarAccess.getImportedVariableAccess().getProcIdAssignment_2(), "rule__ImportedVariable__ProcIdAssignment_2");
			builder.put(grammarAccess.getImportedVariableAccess().getVarNamesAssignment_3(), "rule__ImportedVariable__VarNamesAssignment_3");
			builder.put(grammarAccess.getDeclaredVariableAccess().getVisibilityAssignment_1(), "rule__DeclaredVariable__VisibilityAssignment_1");
			builder.put(grammarAccess.getPhysicalVariableAccess().getTypeAssignment_0(), "rule__PhysicalVariable__TypeAssignment_0");
			builder.put(grammarAccess.getPhysicalVariableAccess().getNameAssignment_1(), "rule__PhysicalVariable__NameAssignment_1");
			builder.put(grammarAccess.getPhysicalVariableAccess().getPortsAssignment_4(), "rule__PhysicalVariable__PortsAssignment_4");
			builder.put(grammarAccess.getPhysicalVariableAccess().getPortsAssignment_5_1(), "rule__PhysicalVariable__PortsAssignment_5_1");
			builder.put(grammarAccess.getRegisterPortAccess().getRegNameAssignment_0(), "rule__RegisterPort__RegNameAssignment_0");
			builder.put(grammarAccess.getRegisterPortAccess().getPortAssignment_2(), "rule__RegisterPort__PortAssignment_2");
			builder.put(grammarAccess.getProgramVariableAccess().getTypeAssignment_0(), "rule__ProgramVariable__TypeAssignment_0");
			builder.put(grammarAccess.getProgramVariableAccess().getNameAssignment_1(), "rule__ProgramVariable__NameAssignment_1");
			builder.put(grammarAccess.getVisibilityAccess().getLOCALAssignment_0(), "rule__Visibility__LOCALAssignment_0");
			builder.put(grammarAccess.getVisibilityAccess().getGLOBALAssignment_1(), "rule__Visibility__GLOBALAssignment_1");
			builder.put(grammarAccess.getVisibilityAccess().getSHAREDAssignment_2_0(), "rule__Visibility__SHAREDAssignment_2_0");
			builder.put(grammarAccess.getVisibilityAccess().getSharingProcsAssignment_2_1(), "rule__Visibility__SharingProcsAssignment_2_1");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
			builder.put(grammarAccess.getStateAccess().getStateFunctionAssignment_3(), "rule__State__StateFunctionAssignment_3");
			builder.put(grammarAccess.getStateAccess().getTimeoutFunctionAssignment_4(), "rule__State__TimeoutFunctionAssignment_4");
			builder.put(grammarAccess.getStateFunctionAccess().getStatementsAssignment_1(), "rule__StateFunction__StatementsAssignment_1");
			builder.put(grammarAccess.getTimeoutFunctionAccess().getTimeAssignment_1(), "rule__TimeoutFunction__TimeAssignment_1");
			builder.put(grammarAccess.getTimeoutFunctionAccess().getBodyAssignment_2(), "rule__TimeoutFunction__BodyAssignment_2");
			builder.put(grammarAccess.getBodyAccess().getStatementsAssignment_1_2(), "rule__Body__StatementsAssignment_1_2");
			builder.put(grammarAccess.getBodyAccess().getStatementsAssignment_2(), "rule__Body__StatementsAssignment_2");
			builder.put(grammarAccess.getBodyAccess().getStatementsAssignment_3(), "rule__Body__StatementsAssignment_3");
			builder.put(grammarAccess.getBodyAccess().getStatementsAssignment_4(), "rule__Body__StatementsAssignment_4");
			builder.put(grammarAccess.getBodyAccess().getLoopAssignment_5(), "rule__Body__LoopAssignment_5");
			builder.put(grammarAccess.getBodyAccess().getRestartAssignment_6(), "rule__Body__RestartAssignment_6");
			builder.put(grammarAccess.getBodyAccess().getResetAssignment_7(), "rule__Body__ResetAssignment_7");
			builder.put(grammarAccess.getBodyAccess().getStatementsAssignment_8(), "rule__Body__StatementsAssignment_8");
			builder.put(grammarAccess.getBodyAccess().getStatementsAssignment_9(), "rule__Body__StatementsAssignment_9");
			builder.put(grammarAccess.getBodyAccess().getStatementsAssignment_10(), "rule__Body__StatementsAssignment_10");
			builder.put(grammarAccess.getBodyAccess().getStatementsAssignment_11_0(), "rule__Body__StatementsAssignment_11_0");
			builder.put(grammarAccess.getIfElseStatAccess().getCondAssignment_2(), "rule__IfElseStat__CondAssignment_2");
			builder.put(grammarAccess.getIfElseStatAccess().getThenAssignment_4(), "rule__IfElseStat__ThenAssignment_4");
			builder.put(grammarAccess.getIfElseStatAccess().getElseAssignment_5_1(), "rule__IfElseStat__ElseAssignment_5_1");
			builder.put(grammarAccess.getSwitchStatAccess().getExprAssignment_2(), "rule__SwitchStat__ExprAssignment_2");
			builder.put(grammarAccess.getSwitchStatAccess().getOptionsAssignment_5(), "rule__SwitchStat__OptionsAssignment_5");
			builder.put(grammarAccess.getCaseStatAccess().getOptionAssignment_1(), "rule__CaseStat__OptionAssignment_1");
			builder.put(grammarAccess.getCaseStatAccess().getBodyAssignment_3(), "rule__CaseStat__BodyAssignment_3");
			builder.put(grammarAccess.getStartProcStatAccess().getProcIdAssignment_1(), "rule__StartProcStat__ProcIdAssignment_1");
			builder.put(grammarAccess.getStopProcStatAccess().getProcIdAssignment_2(), "rule__StopProcStat__ProcIdAssignment_2");
			builder.put(grammarAccess.getErrorStatAccess().getProcIdAssignment_2(), "rule__ErrorStat__ProcIdAssignment_2");
			builder.put(grammarAccess.getSetStateStatAccess().getStateIdAssignment_2_0_1(), "rule__SetStateStat__StateIdAssignment_2_0_1");
			builder.put(grammarAccess.getSetStateStatAccess().getNextAssignment_2_1(), "rule__SetStateStat__NextAssignment_2_1");
			builder.put(grammarAccess.getFunctionAccess().getReturnTypeAssignment_0(), "rule__Function__ReturnTypeAssignment_0");
			builder.put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
			builder.put(grammarAccess.getFunctionAccess().getArgTypesAssignment_3(), "rule__Function__ArgTypesAssignment_3");
			builder.put(grammarAccess.getFunctionAccess().getArgTypesAssignment_4_1(), "rule__Function__ArgTypesAssignment_4_1");
			builder.put(grammarAccess.getRegisterAccess().getTypeAssignment_0(), "rule__Register__TypeAssignment_0");
			builder.put(grammarAccess.getRegisterAccess().getNameAssignment_1(), "rule__Register__NameAssignment_1");
			builder.put(grammarAccess.getRegisterAccess().getAddr1Assignment_2(), "rule__Register__Addr1Assignment_2");
			builder.put(grammarAccess.getRegisterAccess().getAddr2Assignment_3(), "rule__Register__Addr2Assignment_3");
			builder.put(grammarAccess.getRegisterAccess().getRegSizeAssignment_4(), "rule__Register__RegSizeAssignment_4");
			builder.put(grammarAccess.getConstAccess().getConstIdAssignment_1(), "rule__Const__ConstIdAssignment_1");
			builder.put(grammarAccess.getConstAccess().getConstValueAssignment_2(), "rule__Const__ConstValueAssignment_2");
			builder.put(grammarAccess.getEnumAccess().getEnumMembersAssignment_1(), "rule__Enum__EnumMembersAssignment_1");
			builder.put(grammarAccess.getEnumAccess().getEnumMembersAssignment_2_1(), "rule__Enum__EnumMembersAssignment_2_1");
			builder.put(grammarAccess.getEnumMemberAccess().getNameAssignment_0(), "rule__EnumMember__NameAssignment_0");
			builder.put(grammarAccess.getEnumMemberAccess().getValueAssignment_2(), "rule__EnumMember__ValueAssignment_2");
			builder.put(grammarAccess.getInfixOpAccess().getOpAssignment_0(), "rule__InfixOp__OpAssignment_0");
			builder.put(grammarAccess.getInfixOpAccess().getVarIdAssignment_1(), "rule__InfixOp__VarIdAssignment_1");
			builder.put(grammarAccess.getPostfixOpAccess().getVarIdAssignment_0(), "rule__PostfixOp__VarIdAssignment_0");
			builder.put(grammarAccess.getPostfixOpAccess().getOpAssignment_1(), "rule__PostfixOp__OpAssignment_1");
			builder.put(grammarAccess.getFunctionCallAccess().getFuncIdAssignment_0(), "rule__FunctionCall__FuncIdAssignment_0");
			builder.put(grammarAccess.getFunctionCallAccess().getArgsAssignment_2(), "rule__FunctionCall__ArgsAssignment_2");
			builder.put(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_1(), "rule__FunctionCall__ArgsAssignment_3_1");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getVarIdAssignment_0(), "rule__PrimaryExpression__VarIdAssignment_0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getLiteralAssignment_1(), "rule__PrimaryExpression__LiteralAssignment_1");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getExprAssignment_2_1(), "rule__PrimaryExpression__ExprAssignment_2_1");
			builder.put(grammarAccess.getUnaryExpressionAccess().getUnaryOpAssignment_4_0(), "rule__UnaryExpression__UnaryOpAssignment_4_0");
			builder.put(grammarAccess.getUnaryExpressionAccess().getRestAssignment_4_1(), "rule__UnaryExpression__RestAssignment_4_1");
			builder.put(grammarAccess.getCastExpressionAccess().getTypeAssignment_1_1(), "rule__CastExpression__TypeAssignment_1_1");
			builder.put(grammarAccess.getCastExpressionAccess().getRightAssignment_1_3(), "rule__CastExpression__RightAssignment_1_3");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getMulOpAssignment_1_1(), "rule__MultiplicativeExpression__MulOpAssignment_1_1");
			builder.put(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2(), "rule__MultiplicativeExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getAddOpAssignment_1_1(), "rule__AdditiveExpression__AddOpAssignment_1_1");
			builder.put(grammarAccess.getAdditiveExpressionAccess().getRighttAssignment_1_2(), "rule__AdditiveExpression__RighttAssignment_1_2");
			builder.put(grammarAccess.getShiftExpressionAccess().getShiftOpAssignment_1_1(), "rule__ShiftExpression__ShiftOpAssignment_1_1");
			builder.put(grammarAccess.getShiftExpressionAccess().getRightAssignment_1_2(), "rule__ShiftExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getCompareExpressionAccess().getCmpOpAssignment_1_1(), "rule__CompareExpression__CmpOpAssignment_1_1");
			builder.put(grammarAccess.getCompareExpressionAccess().getRightAssignment_1_2(), "rule__CompareExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getEqualityExpressionAccess().getEqCmpOpAssignment_1_1(), "rule__EqualityExpression__EqCmpOpAssignment_1_1");
			builder.put(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_2(), "rule__EqualityExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getBitAndExpressionAccess().getRightAssignment_1_2(), "rule__BitAndExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getBitXorExpressionAccess().getRightAssignment_1_2(), "rule__BitXorExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getBitOrExpressionAccess().getRightAssignment_1_2(), "rule__BitOrExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getLogicalAndExpressionAccess().getRightAssignment_1_2(), "rule__LogicalAndExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getLogicalOrExpressionAccess().getRightAssignment_1_2(), "rule__LogicalOrExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getAssignmentExpressionAccess().getAssignVarAssignment_1_0(), "rule__AssignmentExpression__AssignVarAssignment_1_0");
			builder.put(grammarAccess.getAssignmentExpressionAccess().getAssignOpAssignment_1_1(), "rule__AssignmentExpression__AssignOpAssignment_1_1");
			builder.put(grammarAccess.getAssignmentExpressionAccess().getExprAssignment_1_2(), "rule__AssignmentExpression__ExprAssignment_1_2");
			builder.put(grammarAccess.getCTypeAccess().getSignSpecAssignment_3_1(), "rule__CType__SignSpecAssignment_3_1");
			builder.put(grammarAccess.getIntegerAccess().getValueAssignment_0(), "rule__Integer__ValueAssignment_0");
			builder.put(grammarAccess.getIntegerAccess().getQualfierAssignment_1(), "rule__Integer__QualfierAssignment_1");
			builder.put(grammarAccess.getTimeAccess().getDaysAssignment_2_1(), "rule__Time__DaysAssignment_2_1");
			builder.put(grammarAccess.getTimeAccess().getHoursAssignment_3_1(), "rule__Time__HoursAssignment_3_1");
			builder.put(grammarAccess.getTimeAccess().getMinutesAssignment_4_1(), "rule__Time__MinutesAssignment_4_1");
			builder.put(grammarAccess.getTimeAccess().getSecondsAssignment_5_1(), "rule__Time__SecondsAssignment_5_1");
			builder.put(grammarAccess.getTimeAccess().getMilisAssignment_6_1(), "rule__Time__MilisAssignment_6_1");
			builder.put(grammarAccess.getTimeAccess().getMicrosAssignment_7_1(), "rule__Time__MicrosAssignment_7_1");
			builder.put(grammarAccess.getTimeAccess().getNanosAssignment_8_1(), "rule__Time__NanosAssignment_8_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ReflexGrammarAccess grammarAccess;

	@Override
	protected InternalReflexParser createParser() {
		InternalReflexParser result = new InternalReflexParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ReflexGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ReflexGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
