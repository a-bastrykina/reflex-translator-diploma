/*
 * generated by Xtext 2.20.0
 */
grammar InternalReflex;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package ru.iaie.reflex.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ru.iaie.reflex.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import ru.iaie.reflex.services.ReflexGrammarAccess;

}
@parser::members {
	private ReflexGrammarAccess grammarAccess;

	public void setGrammarAccess(ReflexGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcess
entryRuleProcess
:
{ before(grammarAccess.getProcessRule()); }
	 ruleProcess
{ after(grammarAccess.getProcessRule()); } 
	 EOF 
;

// Rule Process
ruleProcess 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcessAccess().getGroup()); }
		(rule__Process__Group__0)
		{ after(grammarAccess.getProcessAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getAlternatives()); }
		(rule__Variable__Alternatives)
		{ after(grammarAccess.getVariableAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImportedVariable
entryRuleImportedVariable
:
{ before(grammarAccess.getImportedVariableRule()); }
	 ruleImportedVariable
{ after(grammarAccess.getImportedVariableRule()); } 
	 EOF 
;

// Rule ImportedVariable
ruleImportedVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportedVariableAccess().getGroup()); }
		(rule__ImportedVariable__Group__0)
		{ after(grammarAccess.getImportedVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaredVariable
entryRuleDeclaredVariable
:
{ before(grammarAccess.getDeclaredVariableRule()); }
	 ruleDeclaredVariable
{ after(grammarAccess.getDeclaredVariableRule()); } 
	 EOF 
;

// Rule DeclaredVariable
ruleDeclaredVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclaredVariableAccess().getGroup()); }
		(rule__DeclaredVariable__Group__0)
		{ after(grammarAccess.getDeclaredVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePhysicalVariable
entryRulePhysicalVariable
:
{ before(grammarAccess.getPhysicalVariableRule()); }
	 rulePhysicalVariable
{ after(grammarAccess.getPhysicalVariableRule()); } 
	 EOF 
;

// Rule PhysicalVariable
rulePhysicalVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPhysicalVariableAccess().getGroup()); }
		(rule__PhysicalVariable__Group__0)
		{ after(grammarAccess.getPhysicalVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRegisterPort
entryRuleRegisterPort
:
{ before(grammarAccess.getRegisterPortRule()); }
	 ruleRegisterPort
{ after(grammarAccess.getRegisterPortRule()); } 
	 EOF 
;

// Rule RegisterPort
ruleRegisterPort 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegisterPortAccess().getGroup()); }
		(rule__RegisterPort__Group__0)
		{ after(grammarAccess.getRegisterPortAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProgramVariable
entryRuleProgramVariable
:
{ before(grammarAccess.getProgramVariableRule()); }
	 ruleProgramVariable
{ after(grammarAccess.getProgramVariableRule()); } 
	 EOF 
;

// Rule ProgramVariable
ruleProgramVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramVariableAccess().getGroup()); }
		(rule__ProgramVariable__Group__0)
		{ after(grammarAccess.getProgramVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVisibility
entryRuleVisibility
:
{ before(grammarAccess.getVisibilityRule()); }
	 ruleVisibility
{ after(grammarAccess.getVisibilityRule()); } 
	 EOF 
;

// Rule Visibility
ruleVisibility 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVisibilityAccess().getAlternatives()); }
		(rule__Visibility__Alternatives)
		{ after(grammarAccess.getVisibilityAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleState
entryRuleState
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateAccess().getGroup()); }
		(rule__State__Group__0)
		{ after(grammarAccess.getStateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStateFunction
entryRuleStateFunction
:
{ before(grammarAccess.getStateFunctionRule()); }
	 ruleStateFunction
{ after(grammarAccess.getStateFunctionRule()); } 
	 EOF 
;

// Rule StateFunction
ruleStateFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateFunctionAccess().getGroup()); }
		(rule__StateFunction__Group__0)
		{ after(grammarAccess.getStateFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimeoutFunction
entryRuleTimeoutFunction
:
{ before(grammarAccess.getTimeoutFunctionRule()); }
	 ruleTimeoutFunction
{ after(grammarAccess.getTimeoutFunctionRule()); } 
	 EOF 
;

// Rule TimeoutFunction
ruleTimeoutFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeoutFunctionAccess().getGroup()); }
		(rule__TimeoutFunction__Group__0)
		{ after(grammarAccess.getTimeoutFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBody
entryRuleBody
:
{ before(grammarAccess.getBodyRule()); }
	 ruleBody
{ after(grammarAccess.getBodyRule()); } 
	 EOF 
;

// Rule Body
ruleBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBodyAccess().getAlternatives()); }
		(rule__Body__Alternatives)
		{ after(grammarAccess.getBodyAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfElseStat
entryRuleIfElseStat
:
{ before(grammarAccess.getIfElseStatRule()); }
	 ruleIfElseStat
{ after(grammarAccess.getIfElseStatRule()); } 
	 EOF 
;

// Rule IfElseStat
ruleIfElseStat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfElseStatAccess().getGroup()); }
		(rule__IfElseStat__Group__0)
		{ after(grammarAccess.getIfElseStatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSwitchStat
entryRuleSwitchStat
:
{ before(grammarAccess.getSwitchStatRule()); }
	 ruleSwitchStat
{ after(grammarAccess.getSwitchStatRule()); } 
	 EOF 
;

// Rule SwitchStat
ruleSwitchStat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSwitchStatAccess().getGroup()); }
		(rule__SwitchStat__Group__0)
		{ after(grammarAccess.getSwitchStatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCaseStat
entryRuleCaseStat
:
{ before(grammarAccess.getCaseStatRule()); }
	 ruleCaseStat
{ after(grammarAccess.getCaseStatRule()); } 
	 EOF 
;

// Rule CaseStat
ruleCaseStat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseStatAccess().getGroup()); }
		(rule__CaseStat__Group__0)
		{ after(grammarAccess.getCaseStatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStartProcStat
entryRuleStartProcStat
:
{ before(grammarAccess.getStartProcStatRule()); }
	 ruleStartProcStat
{ after(grammarAccess.getStartProcStatRule()); } 
	 EOF 
;

// Rule StartProcStat
ruleStartProcStat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStartProcStatAccess().getGroup()); }
		(rule__StartProcStat__Group__0)
		{ after(grammarAccess.getStartProcStatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStopProcStat
entryRuleStopProcStat
:
{ before(grammarAccess.getStopProcStatRule()); }
	 ruleStopProcStat
{ after(grammarAccess.getStopProcStatRule()); } 
	 EOF 
;

// Rule StopProcStat
ruleStopProcStat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStopProcStatAccess().getGroup()); }
		(rule__StopProcStat__Group__0)
		{ after(grammarAccess.getStopProcStatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleErrorStat
entryRuleErrorStat
:
{ before(grammarAccess.getErrorStatRule()); }
	 ruleErrorStat
{ after(grammarAccess.getErrorStatRule()); } 
	 EOF 
;

// Rule ErrorStat
ruleErrorStat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getErrorStatAccess().getGroup()); }
		(rule__ErrorStat__Group__0)
		{ after(grammarAccess.getErrorStatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoopStat
entryRuleLoopStat
:
{ before(grammarAccess.getLoopStatRule()); }
	 ruleLoopStat
{ after(grammarAccess.getLoopStatRule()); } 
	 EOF 
;

// Rule LoopStat
ruleLoopStat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopStatAccess().getGroup()); }
		(rule__LoopStat__Group__0)
		{ after(grammarAccess.getLoopStatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRestartStat
entryRuleRestartStat
:
{ before(grammarAccess.getRestartStatRule()); }
	 ruleRestartStat
{ after(grammarAccess.getRestartStatRule()); } 
	 EOF 
;

// Rule RestartStat
ruleRestartStat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRestartStatAccess().getGroup()); }
		(rule__RestartStat__Group__0)
		{ after(grammarAccess.getRestartStatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleResetStat
entryRuleResetStat
:
{ before(grammarAccess.getResetStatRule()); }
	 ruleResetStat
{ after(grammarAccess.getResetStatRule()); } 
	 EOF 
;

// Rule ResetStat
ruleResetStat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getResetStatAccess().getGroup()); }
		(rule__ResetStat__Group__0)
		{ after(grammarAccess.getResetStatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSetStateStat
entryRuleSetStateStat
:
{ before(grammarAccess.getSetStateStatRule()); }
	 ruleSetStateStat
{ after(grammarAccess.getSetStateStatRule()); } 
	 EOF 
;

// Rule SetStateStat
ruleSetStateStat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSetStateStatAccess().getGroup()); }
		(rule__SetStateStat__Group__0)
		{ after(grammarAccess.getSetStateStatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRegister
entryRuleRegister
:
{ before(grammarAccess.getRegisterRule()); }
	 ruleRegister
{ after(grammarAccess.getRegisterRule()); } 
	 EOF 
;

// Rule Register
ruleRegister 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRegisterAccess().getGroup()); }
		(rule__Register__Group__0)
		{ after(grammarAccess.getRegisterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConst
entryRuleConst
:
{ before(grammarAccess.getConstRule()); }
	 ruleConst
{ after(grammarAccess.getConstRule()); } 
	 EOF 
;

// Rule Const
ruleConst 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstAccess().getGroup()); }
		(rule__Const__Group__0)
		{ after(grammarAccess.getConstAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnum
entryRuleEnum
:
{ before(grammarAccess.getEnumRule()); }
	 ruleEnum
{ after(grammarAccess.getEnumRule()); } 
	 EOF 
;

// Rule Enum
ruleEnum 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumAccess().getGroup()); }
		(rule__Enum__Group__0)
		{ after(grammarAccess.getEnumAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumMember
entryRuleEnumMember
:
{ before(grammarAccess.getEnumMemberRule()); }
	 ruleEnumMember
{ after(grammarAccess.getEnumMemberRule()); } 
	 EOF 
;

// Rule EnumMember
ruleEnumMember 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumMemberAccess().getGroup()); }
		(rule__EnumMember__Group__0)
		{ after(grammarAccess.getEnumMemberAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInfixOp
entryRuleInfixOp
:
{ before(grammarAccess.getInfixOpRule()); }
	 ruleInfixOp
{ after(grammarAccess.getInfixOpRule()); } 
	 EOF 
;

// Rule InfixOp
ruleInfixOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInfixOpAccess().getGroup()); }
		(rule__InfixOp__Group__0)
		{ after(grammarAccess.getInfixOpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePostfixOp
entryRulePostfixOp
:
{ before(grammarAccess.getPostfixOpRule()); }
	 rulePostfixOp
{ after(grammarAccess.getPostfixOpRule()); } 
	 EOF 
;

// Rule PostfixOp
rulePostfixOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPostfixOpAccess().getGroup()); }
		(rule__PostfixOp__Group__0)
		{ after(grammarAccess.getPostfixOpAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
		(rule__FunctionCall__Group__0)
		{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
		(rule__UnaryExpression__Alternatives)
		{ after(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCastExpression
entryRuleCastExpression
:
{ before(grammarAccess.getCastExpressionRule()); }
	 ruleCastExpression
{ after(grammarAccess.getCastExpressionRule()); } 
	 EOF 
;

// Rule CastExpression
ruleCastExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCastExpressionAccess().getAlternatives()); }
		(rule__CastExpression__Alternatives)
		{ after(grammarAccess.getCastExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
		(rule__MultiplicativeExpression__Group__0)
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
		(rule__AdditiveExpression__Group__0)
		{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShiftExpression
entryRuleShiftExpression
:
{ before(grammarAccess.getShiftExpressionRule()); }
	 ruleShiftExpression
{ after(grammarAccess.getShiftExpressionRule()); } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShiftExpressionAccess().getGroup()); }
		(rule__ShiftExpression__Group__0)
		{ after(grammarAccess.getShiftExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompareExpression
entryRuleCompareExpression
:
{ before(grammarAccess.getCompareExpressionRule()); }
	 ruleCompareExpression
{ after(grammarAccess.getCompareExpressionRule()); } 
	 EOF 
;

// Rule CompareExpression
ruleCompareExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompareExpressionAccess().getGroup()); }
		(rule__CompareExpression__Group__0)
		{ after(grammarAccess.getCompareExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
		(rule__EqualityExpression__Group__0)
		{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBitAndExpression
entryRuleBitAndExpression
:
{ before(grammarAccess.getBitAndExpressionRule()); }
	 ruleBitAndExpression
{ after(grammarAccess.getBitAndExpressionRule()); } 
	 EOF 
;

// Rule BitAndExpression
ruleBitAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBitAndExpressionAccess().getGroup()); }
		(rule__BitAndExpression__Group__0)
		{ after(grammarAccess.getBitAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBitXorExpression
entryRuleBitXorExpression
:
{ before(grammarAccess.getBitXorExpressionRule()); }
	 ruleBitXorExpression
{ after(grammarAccess.getBitXorExpressionRule()); } 
	 EOF 
;

// Rule BitXorExpression
ruleBitXorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBitXorExpressionAccess().getGroup()); }
		(rule__BitXorExpression__Group__0)
		{ after(grammarAccess.getBitXorExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBitOrExpression
entryRuleBitOrExpression
:
{ before(grammarAccess.getBitOrExpressionRule()); }
	 ruleBitOrExpression
{ after(grammarAccess.getBitOrExpressionRule()); } 
	 EOF 
;

// Rule BitOrExpression
ruleBitOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBitOrExpressionAccess().getGroup()); }
		(rule__BitOrExpression__Group__0)
		{ after(grammarAccess.getBitOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression
:
{ before(grammarAccess.getLogicalAndExpressionRule()); }
	 ruleLogicalAndExpression
{ after(grammarAccess.getLogicalAndExpressionRule()); } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
		(rule__LogicalAndExpression__Group__0)
		{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression
:
{ before(grammarAccess.getLogicalOrExpressionRule()); }
	 ruleLogicalOrExpression
{ after(grammarAccess.getLogicalOrExpressionRule()); } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
		(rule__LogicalOrExpression__Group__0)
		{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression
:
{ before(grammarAccess.getAssignmentExpressionRule()); }
	 ruleAssignmentExpression
{ after(grammarAccess.getAssignmentExpressionRule()); } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentExpressionAccess().getAlternatives()); }
		(rule__AssignmentExpression__Alternatives)
		{ after(grammarAccess.getAssignmentExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall()); }
		ruleAssignmentExpression
		{ after(grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCType
entryRuleCType
:
{ before(grammarAccess.getCTypeRule()); }
	 ruleCType
{ after(grammarAccess.getCTypeRule()); } 
	 EOF 
;

// Rule CType
ruleCType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCTypeAccess().getAlternatives()); }
		(rule__CType__Alternatives)
		{ after(grammarAccess.getCTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntegerType
entryRuleIntegerType
:
{ before(grammarAccess.getIntegerTypeRule()); }
	 ruleIntegerType
{ after(grammarAccess.getIntegerTypeRule()); } 
	 EOF 
;

// Rule IntegerType
ruleIntegerType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerTypeAccess().getAlternatives()); }
		(rule__IntegerType__Alternatives)
		{ after(grammarAccess.getIntegerTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReflexType
entryRuleReflexType
:
{ before(grammarAccess.getReflexTypeRule()); }
	 ruleReflexType
{ after(grammarAccess.getReflexTypeRule()); } 
	 EOF 
;

// Rule ReflexType
ruleReflexType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReflexTypeAccess().getAlternatives()); }
		(rule__ReflexType__Alternatives)
		{ after(grammarAccess.getReflexTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInteger
entryRuleInteger
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerAccess().getGroup()); }
		(rule__Integer__Group__0)
		{ after(grammarAccess.getIntegerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTime
entryRuleTime
:
{ before(grammarAccess.getTimeRule()); }
	 ruleTime
{ after(grammarAccess.getTimeRule()); } 
	 EOF 
;

// Rule Time
ruleTime 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeAccess().getGroup()); }
		(rule__Time__Group__0)
		{ after(grammarAccess.getTimeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule RegisterType
ruleRegisterType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterTypeAccess().getAlternatives()); }
		(rule__RegisterType__Alternatives)
		{ after(grammarAccess.getRegisterTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule InfixPostfixOp
ruleInfixPostfixOp
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInfixPostfixOpAccess().getAlternatives()); }
		(rule__InfixPostfixOp__Alternatives)
		{ after(grammarAccess.getInfixPostfixOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AssignOperator
ruleAssignOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignOperatorAccess().getAlternatives()); }
		(rule__AssignOperator__Alternatives)
		{ after(grammarAccess.getAssignOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule UnaryOp
ruleUnaryOp
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOpAccess().getAlternatives()); }
		(rule__UnaryOp__Alternatives)
		{ after(grammarAccess.getUnaryOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule CompareOp
ruleCompareOp
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareOpAccess().getAlternatives()); }
		(rule__CompareOp__Alternatives)
		{ after(grammarAccess.getCompareOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule CompareEqOp
ruleCompareEqOp
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareEqOpAccess().getAlternatives()); }
		(rule__CompareEqOp__Alternatives)
		{ after(grammarAccess.getCompareEqOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ShiftOp
ruleShiftOp
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShiftOpAccess().getAlternatives()); }
		(rule__ShiftOp__Alternatives)
		{ after(grammarAccess.getShiftOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AdditiveOp
ruleAdditiveOp
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveOpAccess().getAlternatives()); }
		(rule__AdditiveOp__Alternatives)
		{ after(grammarAccess.getAdditiveOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule MultiplicativeOp
ruleMultiplicativeOp
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeOpAccess().getAlternatives()); }
		(rule__MultiplicativeOp__Alternatives)
		{ after(grammarAccess.getMultiplicativeOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule CTypeSignSpec
ruleCTypeSignSpec
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCTypeSignSpecAccess().getAlternatives()); }
		(rule__CTypeSignSpec__Alternatives)
		{ after(grammarAccess.getCTypeSignSpecAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Alternatives_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getConstsAssignment_4_0()); }
		(rule__Program__ConstsAssignment_4_0)
		{ after(grammarAccess.getProgramAccess().getConstsAssignment_4_0()); }
	)
	|
	(
		{ before(grammarAccess.getProgramAccess().getEnumsAssignment_4_1()); }
		(rule__Program__EnumsAssignment_4_1)
		{ after(grammarAccess.getProgramAccess().getEnumsAssignment_4_1()); }
	)
	|
	(
		{ before(grammarAccess.getProgramAccess().getFunctionsAssignment_4_2()); }
		(rule__Program__FunctionsAssignment_4_2)
		{ after(grammarAccess.getProgramAccess().getFunctionsAssignment_4_2()); }
	)
	|
	(
		{ before(grammarAccess.getProgramAccess().getRegistersAssignment_4_3()); }
		(rule__Program__RegistersAssignment_4_3)
		{ after(grammarAccess.getProgramAccess().getRegistersAssignment_4_3()); }
	)
	|
	(
		{ before(grammarAccess.getProgramAccess().getProcessesAssignment_4_4()); }
		(rule__Program__ProcessesAssignment_4_4)
		{ after(grammarAccess.getProgramAccess().getProcessesAssignment_4_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getImportedVariableParserRuleCall_0()); }
		ruleImportedVariable
		{ after(grammarAccess.getVariableAccess().getImportedVariableParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getGroup_1()); }
		(rule__Variable__Group_1__0)
		{ after(grammarAccess.getVariableAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVariable__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclaredVariableAccess().getPhysicalVariableParserRuleCall_0_0()); }
		rulePhysicalVariable
		{ after(grammarAccess.getDeclaredVariableAccess().getPhysicalVariableParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDeclaredVariableAccess().getProgramVariableParserRuleCall_0_1()); }
		ruleProgramVariable
		{ after(grammarAccess.getDeclaredVariableAccess().getProgramVariableParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visibility__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVisibilityAccess().getLOCALAssignment_0()); }
		(rule__Visibility__LOCALAssignment_0)
		{ after(grammarAccess.getVisibilityAccess().getLOCALAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getVisibilityAccess().getGLOBALAssignment_1()); }
		(rule__Visibility__GLOBALAssignment_1)
		{ after(grammarAccess.getVisibilityAccess().getGLOBALAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getVisibilityAccess().getGroup_2()); }
		(rule__Visibility__Group_2__0)
		{ after(grammarAccess.getVisibilityAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getGroup_0()); }
		(rule__Body__Group_0__0)
		{ after(grammarAccess.getBodyAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getBodyAccess().getGroup_1()); }
		(rule__Body__Group_1__0)
		{ after(grammarAccess.getBodyAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getBodyAccess().getStatementsAssignment_2()); }
		(rule__Body__StatementsAssignment_2)
		{ after(grammarAccess.getBodyAccess().getStatementsAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getBodyAccess().getStatementsAssignment_3()); }
		(rule__Body__StatementsAssignment_3)
		{ after(grammarAccess.getBodyAccess().getStatementsAssignment_3()); }
	)
	|
	(
		{ before(grammarAccess.getBodyAccess().getStatementsAssignment_4()); }
		(rule__Body__StatementsAssignment_4)
		{ after(grammarAccess.getBodyAccess().getStatementsAssignment_4()); }
	)
	|
	(
		{ before(grammarAccess.getBodyAccess().getLoopAssignment_5()); }
		(rule__Body__LoopAssignment_5)
		{ after(grammarAccess.getBodyAccess().getLoopAssignment_5()); }
	)
	|
	(
		{ before(grammarAccess.getBodyAccess().getRestartAssignment_6()); }
		(rule__Body__RestartAssignment_6)
		{ after(grammarAccess.getBodyAccess().getRestartAssignment_6()); }
	)
	|
	(
		{ before(grammarAccess.getBodyAccess().getResetAssignment_7()); }
		(rule__Body__ResetAssignment_7)
		{ after(grammarAccess.getBodyAccess().getResetAssignment_7()); }
	)
	|
	(
		{ before(grammarAccess.getBodyAccess().getStatementsAssignment_8()); }
		(rule__Body__StatementsAssignment_8)
		{ after(grammarAccess.getBodyAccess().getStatementsAssignment_8()); }
	)
	|
	(
		{ before(grammarAccess.getBodyAccess().getStatementsAssignment_9()); }
		(rule__Body__StatementsAssignment_9)
		{ after(grammarAccess.getBodyAccess().getStatementsAssignment_9()); }
	)
	|
	(
		{ before(grammarAccess.getBodyAccess().getStatementsAssignment_10()); }
		(rule__Body__StatementsAssignment_10)
		{ after(grammarAccess.getBodyAccess().getStatementsAssignment_10()); }
	)
	|
	(
		{ before(grammarAccess.getBodyAccess().getGroup_11()); }
		(rule__Body__Group_11__0)
		{ after(grammarAccess.getBodyAccess().getGroup_11()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetStateStat__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetStateStatAccess().getGroup_2_0()); }
		(rule__SetStateStat__Group_2_0__0)
		{ after(grammarAccess.getSetStateStatAccess().getGroup_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getSetStateStatAccess().getNextAssignment_2_1()); }
		(rule__SetStateStat__NextAssignment_2_1)
		{ after(grammarAccess.getSetStateStatAccess().getNextAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getVarIdAssignment_0()); }
		(rule__PrimaryExpression__VarIdAssignment_0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getVarIdAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralAssignment_1()); }
		(rule__PrimaryExpression__LiteralAssignment_1)
		{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
		(rule__PrimaryExpression__Group_2__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getFunctionCallParserRuleCall_1()); }
		ruleFunctionCall
		{ after(grammarAccess.getUnaryExpressionAccess().getFunctionCallParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getPostfixOpParserRuleCall_2()); }
		rulePostfixOp
		{ after(grammarAccess.getUnaryExpressionAccess().getPostfixOpParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getInfixOpParserRuleCall_3()); }
		ruleInfixOp
		{ after(grammarAccess.getUnaryExpressionAccess().getInfixOpParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getGroup_4()); }
		(rule__UnaryExpression__Group_4__0)
		{ after(grammarAccess.getUnaryExpressionAccess().getGroup_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCastExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
		ruleUnaryExpression
		{ after(grammarAccess.getCastExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCastExpressionAccess().getGroup_1()); }
		(rule__CastExpression__Group_1__0)
		{ after(grammarAccess.getCastExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); }
		ruleLogicalOrExpression
		{ after(grammarAccess.getAssignmentExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentExpressionAccess().getGroup_1()); }
		(rule__AssignmentExpression__Group_1__0)
		{ after(grammarAccess.getAssignmentExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCTypeAccess().getGroup_0()); }
		(rule__CType__Group_0__0)
		{ after(grammarAccess.getCTypeAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getCTypeAccess().getGroup_1()); }
		(rule__CType__Group_1__0)
		{ after(grammarAccess.getCTypeAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getCTypeAccess().getGroup_2()); }
		(rule__CType__Group_2__0)
		{ after(grammarAccess.getCTypeAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getCTypeAccess().getGroup_3()); }
		(rule__CType__Group_3__0)
		{ after(grammarAccess.getCTypeAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Alternatives_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCTypeAccess().getSHORT_C_TYPETerminalRuleCall_3_2_0()); }
		RULE_SHORT_C_TYPE
		{ after(grammarAccess.getCTypeAccess().getSHORT_C_TYPETerminalRuleCall_3_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getCTypeAccess().getINT_C_TYPETerminalRuleCall_3_2_1()); }
		RULE_INT_C_TYPE
		{ after(grammarAccess.getCTypeAccess().getINT_C_TYPETerminalRuleCall_3_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getCTypeAccess().getLONG_C_TYPETerminalRuleCall_3_2_2()); }
		RULE_LONG_C_TYPE
		{ after(grammarAccess.getCTypeAccess().getLONG_C_TYPETerminalRuleCall_3_2_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerTypeAccess().getBOOL_TYPETerminalRuleCall_0()); }
		RULE_BOOL_TYPE
		{ after(grammarAccess.getIntegerTypeAccess().getBOOL_TYPETerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getIntegerTypeAccess().getINT_C_TYPETerminalRuleCall_1()); }
		RULE_INT_C_TYPE
		{ after(grammarAccess.getIntegerTypeAccess().getINT_C_TYPETerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getIntegerTypeAccess().getSHORT_C_TYPETerminalRuleCall_2()); }
		RULE_SHORT_C_TYPE
		{ after(grammarAccess.getIntegerTypeAccess().getSHORT_C_TYPETerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getIntegerTypeAccess().getLONG_C_TYPETerminalRuleCall_3()); }
		RULE_LONG_C_TYPE
		{ after(grammarAccess.getIntegerTypeAccess().getLONG_C_TYPETerminalRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReflexType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReflexTypeAccess().getCTypeParserRuleCall_0()); }
		ruleCType
		{ after(grammarAccess.getReflexTypeAccess().getCTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getReflexTypeAccess().getGroup_1()); }
		(rule__ReflexType__Group_1__0)
		{ after(grammarAccess.getReflexTypeAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__ValueAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerAccess().getValueDECIMALTerminalRuleCall_0_0_0()); }
		RULE_DECIMAL
		{ after(grammarAccess.getIntegerAccess().getValueDECIMALTerminalRuleCall_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getIntegerAccess().getValueOCTALTerminalRuleCall_0_0_1()); }
		RULE_OCTAL
		{ after(grammarAccess.getIntegerAccess().getValueOCTALTerminalRuleCall_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getIntegerAccess().getValueHEXTerminalRuleCall_0_0_2()); }
		RULE_HEX
		{ after(grammarAccess.getIntegerAccess().getValueHEXTerminalRuleCall_0_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__QualfierAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerAccess().getQualfierLONGTerminalRuleCall_1_0_0()); }
		RULE_LONG
		{ after(grammarAccess.getIntegerAccess().getQualfierLONGTerminalRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getIntegerAccess().getQualfierUNSIGNEDTerminalRuleCall_1_0_1()); }
		RULE_UNSIGNED
		{ after(grammarAccess.getIntegerAccess().getQualfierUNSIGNEDTerminalRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeAccess().getTKeyword_1_0()); }
		'0t'
		{ after(grammarAccess.getTimeAccess().getTKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getTimeAccess().getTKeyword_1_1()); }
		'0T'
		{ after(grammarAccess.getTimeAccess().getTKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisterType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterTypeAccess().getINPUTEnumLiteralDeclaration_0()); }
		('input')
		{ after(grammarAccess.getRegisterTypeAccess().getINPUTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getRegisterTypeAccess().getOUTPUTEnumLiteralDeclaration_1()); }
		('output')
		{ after(grammarAccess.getRegisterTypeAccess().getOUTPUTEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixPostfixOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInfixPostfixOpAccess().getINCEnumLiteralDeclaration_0()); }
		('++')
		{ after(grammarAccess.getInfixPostfixOpAccess().getINCEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getInfixPostfixOpAccess().getDECEnumLiteralDeclaration_1()); }
		('--')
		{ after(grammarAccess.getInfixPostfixOpAccess().getDECEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignOperatorAccess().getASSIGNEnumLiteralDeclaration_0()); }
		('=')
		{ after(grammarAccess.getAssignOperatorAccess().getASSIGNEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssignOperatorAccess().getMULEnumLiteralDeclaration_1()); }
		('*=')
		{ after(grammarAccess.getAssignOperatorAccess().getMULEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getAssignOperatorAccess().getDIVEnumLiteralDeclaration_2()); }
		('/=')
		{ after(grammarAccess.getAssignOperatorAccess().getDIVEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getAssignOperatorAccess().getMODEnumLiteralDeclaration_3()); }
		('+=')
		{ after(grammarAccess.getAssignOperatorAccess().getMODEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getAssignOperatorAccess().getSUBEnumLiteralDeclaration_4()); }
		('-=')
		{ after(grammarAccess.getAssignOperatorAccess().getSUBEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getAssignOperatorAccess().getCINEnumLiteralDeclaration_5()); }
		('<<=')
		{ after(grammarAccess.getAssignOperatorAccess().getCINEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getAssignOperatorAccess().getCOUTEnumLiteralDeclaration_6()); }
		('>>=')
		{ after(grammarAccess.getAssignOperatorAccess().getCOUTEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getAssignOperatorAccess().getBIT_ANDEnumLiteralDeclaration_7()); }
		('&=')
		{ after(grammarAccess.getAssignOperatorAccess().getBIT_ANDEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getAssignOperatorAccess().getBIT_XOREnumLiteralDeclaration_8()); }
		('^=')
		{ after(grammarAccess.getAssignOperatorAccess().getBIT_XOREnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getAssignOperatorAccess().getBIT_OREnumLiteralDeclaration_9()); }
		('|=')
		{ after(grammarAccess.getAssignOperatorAccess().getBIT_OREnumLiteralDeclaration_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOpAccess().getPLUSEnumLiteralDeclaration_0()); }
		('+')
		{ after(grammarAccess.getUnaryOpAccess().getPLUSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOpAccess().getMINUSEnumLiteralDeclaration_1()); }
		('-')
		{ after(grammarAccess.getUnaryOpAccess().getMINUSEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOpAccess().getBIT_NOTEnumLiteralDeclaration_2()); }
		('~')
		{ after(grammarAccess.getUnaryOpAccess().getBIT_NOTEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOpAccess().getLOGICAL_NOTEnumLiteralDeclaration_3()); }
		('!')
		{ after(grammarAccess.getUnaryOpAccess().getLOGICAL_NOTEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareOpAccess().getLESSEnumLiteralDeclaration_0()); }
		('<')
		{ after(grammarAccess.getCompareOpAccess().getLESSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompareOpAccess().getGREATEREnumLiteralDeclaration_1()); }
		('>')
		{ after(grammarAccess.getCompareOpAccess().getGREATEREnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getCompareOpAccess().getLESS_EQEnumLiteralDeclaration_2()); }
		('=<')
		{ after(grammarAccess.getCompareOpAccess().getLESS_EQEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getCompareOpAccess().getGREATER_EQEnumLiteralDeclaration_3()); }
		('>=')
		{ after(grammarAccess.getCompareOpAccess().getGREATER_EQEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareEqOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareEqOpAccess().getEQEnumLiteralDeclaration_0()); }
		('==')
		{ after(grammarAccess.getCompareEqOpAccess().getEQEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompareEqOpAccess().getNOT_EQEnumLiteralDeclaration_1()); }
		('!=')
		{ after(grammarAccess.getCompareEqOpAccess().getNOT_EQEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShiftOpAccess().getLEFT_SHIFTEnumLiteralDeclaration_0()); }
		('>>')
		{ after(grammarAccess.getShiftOpAccess().getLEFT_SHIFTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getShiftOpAccess().getRIGHT_SHIFTEnumLiteralDeclaration_1()); }
		('<<')
		{ after(grammarAccess.getShiftOpAccess().getRIGHT_SHIFTEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveOpAccess().getPLUSEnumLiteralDeclaration_0()); }
		('+')
		{ after(grammarAccess.getAdditiveOpAccess().getPLUSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditiveOpAccess().getMINUSEnumLiteralDeclaration_1()); }
		('-')
		{ after(grammarAccess.getAdditiveOpAccess().getMINUSEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeOpAccess().getMULEnumLiteralDeclaration_0()); }
		('*')
		{ after(grammarAccess.getMultiplicativeOpAccess().getMULEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeOpAccess().getDIVEnumLiteralDeclaration_1()); }
		('/')
		{ after(grammarAccess.getMultiplicativeOpAccess().getDIVEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeOpAccess().getMODEnumLiteralDeclaration_2()); }
		('%')
		{ after(grammarAccess.getMultiplicativeOpAccess().getMODEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CTypeSignSpec__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCTypeSignSpecAccess().getSIGNEDEnumLiteralDeclaration_0()); }
		('signed')
		{ after(grammarAccess.getCTypeSignSpecAccess().getSIGNEDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCTypeSignSpecAccess().getUNSIGNEDEnumLiteralDeclaration_1()); }
		('unsigned')
		{ after(grammarAccess.getCTypeSignSpecAccess().getUNSIGNEDEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getProgramKeyword_0()); }
	'program'
	{ after(grammarAccess.getProgramAccess().getProgramKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getNameAssignment_1()); }
	(rule__Program__NameAssignment_1)
	{ after(grammarAccess.getProgramAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__2__Impl
	rule__Program__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__3__Impl
	rule__Program__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getTicksAssignment_3()); }
	(rule__Program__TicksAssignment_3)?
	{ after(grammarAccess.getProgramAccess().getTicksAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__4__Impl
	rule__Program__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getAlternatives_4()); }
	(rule__Program__Alternatives_4)*
	{ after(grammarAccess.getProgramAccess().getAlternatives_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__0__Impl
	rule__Process__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getProcKeyword_0()); }
	'proc'
	{ after(grammarAccess.getProcessAccess().getProcKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__1__Impl
	rule__Process__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getNameAssignment_1()); }
	(rule__Process__NameAssignment_1)
	{ after(grammarAccess.getProcessAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__2__Impl
	rule__Process__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getProcessAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__3__Impl
	rule__Process__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getVariableAssignment_3()); }
	(rule__Process__VariableAssignment_3)*
	{ after(grammarAccess.getProcessAccess().getVariableAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__4__Impl
	rule__Process__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getStatesAssignment_4()); }
	(rule__Process__StatesAssignment_4)*
	{ after(grammarAccess.getProcessAccess().getStatesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Process__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getProcessAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1__0__Impl
	rule__Variable__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getDeclaredVariableParserRuleCall_1_0()); }
	ruleDeclaredVariable
	{ after(grammarAccess.getVariableAccess().getDeclaredVariableParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getSemicolonKeyword_1_1()); }
	';'
	{ after(grammarAccess.getVariableAccess().getSemicolonKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportedVariable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportedVariable__Group__0__Impl
	rule__ImportedVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedVariable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportedVariableAccess().getFromKeyword_0()); }
	'from'
	{ after(grammarAccess.getImportedVariableAccess().getFromKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedVariable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportedVariable__Group__1__Impl
	rule__ImportedVariable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedVariable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportedVariableAccess().getProcKeyword_1()); }
	'proc'
	{ after(grammarAccess.getImportedVariableAccess().getProcKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedVariable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportedVariable__Group__2__Impl
	rule__ImportedVariable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedVariable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportedVariableAccess().getProcIdAssignment_2()); }
	(rule__ImportedVariable__ProcIdAssignment_2)
	{ after(grammarAccess.getImportedVariableAccess().getProcIdAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedVariable__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportedVariable__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedVariable__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportedVariableAccess().getVarNamesAssignment_3()); }
	(rule__ImportedVariable__VarNamesAssignment_3)*
	{ after(grammarAccess.getImportedVariableAccess().getVarNamesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaredVariable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredVariable__Group__0__Impl
	rule__DeclaredVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVariable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredVariableAccess().getAlternatives_0()); }
	(rule__DeclaredVariable__Alternatives_0)
	{ after(grammarAccess.getDeclaredVariableAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVariable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredVariable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVariable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredVariableAccess().getVisibilityAssignment_1()); }
	(rule__DeclaredVariable__VisibilityAssignment_1)
	{ after(grammarAccess.getDeclaredVariableAccess().getVisibilityAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PhysicalVariable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PhysicalVariable__Group__0__Impl
	rule__PhysicalVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhysicalVariableAccess().getTypeAssignment_0()); }
	(rule__PhysicalVariable__TypeAssignment_0)
	{ after(grammarAccess.getPhysicalVariableAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PhysicalVariable__Group__1__Impl
	rule__PhysicalVariable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhysicalVariableAccess().getNameAssignment_1()); }
	(rule__PhysicalVariable__NameAssignment_1)
	{ after(grammarAccess.getPhysicalVariableAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PhysicalVariable__Group__2__Impl
	rule__PhysicalVariable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhysicalVariableAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getPhysicalVariableAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PhysicalVariable__Group__3__Impl
	rule__PhysicalVariable__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhysicalVariableAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getPhysicalVariableAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PhysicalVariable__Group__4__Impl
	rule__PhysicalVariable__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhysicalVariableAccess().getPortsAssignment_4()); }
	(rule__PhysicalVariable__PortsAssignment_4)
	{ after(grammarAccess.getPhysicalVariableAccess().getPortsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PhysicalVariable__Group__5__Impl
	rule__PhysicalVariable__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhysicalVariableAccess().getGroup_5()); }
	(rule__PhysicalVariable__Group_5__0)*
	{ after(grammarAccess.getPhysicalVariableAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PhysicalVariable__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhysicalVariableAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getPhysicalVariableAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PhysicalVariable__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PhysicalVariable__Group_5__0__Impl
	rule__PhysicalVariable__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhysicalVariableAccess().getCommaKeyword_5_0()); }
	','
	{ after(grammarAccess.getPhysicalVariableAccess().getCommaKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PhysicalVariable__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhysicalVariableAccess().getPortsAssignment_5_1()); }
	(rule__PhysicalVariable__PortsAssignment_5_1)
	{ after(grammarAccess.getPhysicalVariableAccess().getPortsAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RegisterPort__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegisterPort__Group__0__Impl
	rule__RegisterPort__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisterPort__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterPortAccess().getRegNameAssignment_0()); }
	(rule__RegisterPort__RegNameAssignment_0)
	{ after(grammarAccess.getRegisterPortAccess().getRegNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisterPort__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegisterPort__Group__1__Impl
	rule__RegisterPort__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisterPort__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterPortAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getRegisterPortAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisterPort__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegisterPort__Group__2__Impl
	rule__RegisterPort__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisterPort__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterPortAccess().getPortAssignment_2()); }
	(rule__RegisterPort__PortAssignment_2)
	{ after(grammarAccess.getRegisterPortAccess().getPortAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisterPort__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RegisterPort__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisterPort__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterPortAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getRegisterPortAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProgramVariable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProgramVariable__Group__0__Impl
	rule__ProgramVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramVariable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramVariableAccess().getTypeAssignment_0()); }
	(rule__ProgramVariable__TypeAssignment_0)
	{ after(grammarAccess.getProgramVariableAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramVariable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProgramVariable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramVariable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramVariableAccess().getNameAssignment_1()); }
	(rule__ProgramVariable__NameAssignment_1)
	{ after(grammarAccess.getProgramVariableAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Visibility__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Visibility__Group_2__0__Impl
	rule__Visibility__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Visibility__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVisibilityAccess().getSHAREDAssignment_2_0()); }
	(rule__Visibility__SHAREDAssignment_2_0)
	{ after(grammarAccess.getVisibilityAccess().getSHAREDAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visibility__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Visibility__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Visibility__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVisibilityAccess().getSharingProcsAssignment_2_1()); }
	(rule__Visibility__SharingProcsAssignment_2_1)*
	{ after(grammarAccess.getVisibilityAccess().getSharingProcsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__0__Impl
	rule__State__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getStateKeyword_0()); }
	'state'
	{ after(grammarAccess.getStateAccess().getStateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__1__Impl
	rule__State__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getNameAssignment_1()); }
	(rule__State__NameAssignment_1)
	{ after(grammarAccess.getStateAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__2__Impl
	rule__State__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__3__Impl
	rule__State__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getStateFunctionAssignment_3()); }
	(rule__State__StateFunctionAssignment_3)
	{ after(grammarAccess.getStateAccess().getStateFunctionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__4__Impl
	rule__State__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getTimeoutFunctionAssignment_4()); }
	(rule__State__TimeoutFunctionAssignment_4)?
	{ after(grammarAccess.getStateAccess().getTimeoutFunctionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateFunction__Group__0__Impl
	rule__StateFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateFunctionAccess().getStateFunctionAction_0()); }
	()
	{ after(grammarAccess.getStateFunctionAccess().getStateFunctionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateFunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateFunctionAccess().getStatementsAssignment_1()); }
	(rule__StateFunction__StatementsAssignment_1)*
	{ after(grammarAccess.getStateFunctionAccess().getStatementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TimeoutFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeoutFunction__Group__0__Impl
	rule__TimeoutFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeoutFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeoutFunctionAccess().getTimeoutKeyword_0()); }
	'timeout'
	{ after(grammarAccess.getTimeoutFunctionAccess().getTimeoutKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeoutFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeoutFunction__Group__1__Impl
	rule__TimeoutFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeoutFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeoutFunctionAccess().getTimeAssignment_1()); }
	(rule__TimeoutFunction__TimeAssignment_1)
	{ after(grammarAccess.getTimeoutFunctionAccess().getTimeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeoutFunction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeoutFunction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeoutFunction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeoutFunctionAccess().getBodyAssignment_2()); }
	(rule__TimeoutFunction__BodyAssignment_2)
	{ after(grammarAccess.getTimeoutFunctionAccess().getBodyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group_0__0__Impl
	rule__Body__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getBodyAction_0_0()); }
	()
	{ after(grammarAccess.getBodyAccess().getBodyAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getSemicolonKeyword_0_1()); }
	';'
	{ after(grammarAccess.getBodyAccess().getSemicolonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group_1__0__Impl
	rule__Body__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getBodyAction_1_0()); }
	()
	{ after(grammarAccess.getBodyAccess().getBodyAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group_1__1__Impl
	rule__Body__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getLeftCurlyBracketKeyword_1_1()); }
	'{'
	{ after(grammarAccess.getBodyAccess().getLeftCurlyBracketKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group_1__2__Impl
	rule__Body__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getStatementsAssignment_1_2()); }
	(rule__Body__StatementsAssignment_1_2)*
	{ after(grammarAccess.getBodyAccess().getStatementsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getRightCurlyBracketKeyword_1_3()); }
	'}'
	{ after(grammarAccess.getBodyAccess().getRightCurlyBracketKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group_11__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group_11__0__Impl
	rule__Body__Group_11__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_11__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getStatementsAssignment_11_0()); }
	(rule__Body__StatementsAssignment_11_0)
	{ after(grammarAccess.getBodyAccess().getStatementsAssignment_11_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_11__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group_11__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group_11__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getSemicolonKeyword_11_1()); }
	';'
	{ after(grammarAccess.getBodyAccess().getSemicolonKeyword_11_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseStat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElseStat__Group__0__Impl
	rule__IfElseStat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseStatAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfElseStatAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElseStat__Group__1__Impl
	rule__IfElseStat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseStatAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getIfElseStatAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElseStat__Group__2__Impl
	rule__IfElseStat__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseStatAccess().getCondAssignment_2()); }
	(rule__IfElseStat__CondAssignment_2)
	{ after(grammarAccess.getIfElseStatAccess().getCondAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStat__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElseStat__Group__3__Impl
	rule__IfElseStat__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStat__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseStatAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getIfElseStatAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStat__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElseStat__Group__4__Impl
	rule__IfElseStat__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStat__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseStatAccess().getThenAssignment_4()); }
	(rule__IfElseStat__ThenAssignment_4)
	{ after(grammarAccess.getIfElseStatAccess().getThenAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStat__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElseStat__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStat__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseStatAccess().getGroup_5()); }
	(rule__IfElseStat__Group_5__0)?
	{ after(grammarAccess.getIfElseStatAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseStat__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElseStat__Group_5__0__Impl
	rule__IfElseStat__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStat__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseStatAccess().getElseKeyword_5_0()); }
	('else')
	{ after(grammarAccess.getIfElseStatAccess().getElseKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStat__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElseStat__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStat__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseStatAccess().getElseAssignment_5_1()); }
	(rule__IfElseStat__ElseAssignment_5_1)
	{ after(grammarAccess.getIfElseStatAccess().getElseAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStat__Group__0__Impl
	rule__SwitchStat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStatAccess().getSwitchKeyword_0()); }
	'switch'
	{ after(grammarAccess.getSwitchStatAccess().getSwitchKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStat__Group__1__Impl
	rule__SwitchStat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStatAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getSwitchStatAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStat__Group__2__Impl
	rule__SwitchStat__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStatAccess().getExprAssignment_2()); }
	(rule__SwitchStat__ExprAssignment_2)
	{ after(grammarAccess.getSwitchStatAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStat__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStat__Group__3__Impl
	rule__SwitchStat__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStat__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStatAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getSwitchStatAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStat__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStat__Group__4__Impl
	rule__SwitchStat__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStat__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStatAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getSwitchStatAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStat__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStat__Group__5__Impl
	rule__SwitchStat__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStat__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStatAccess().getOptionsAssignment_5()); }
	(rule__SwitchStat__OptionsAssignment_5)*
	{ after(grammarAccess.getSwitchStatAccess().getOptionsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStat__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStat__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStat__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStatAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getSwitchStatAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStat__Group__0__Impl
	rule__CaseStat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatAccess().getCaseKeyword_0()); }
	'case'
	{ after(grammarAccess.getCaseStatAccess().getCaseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStat__Group__1__Impl
	rule__CaseStat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatAccess().getOptionAssignment_1()); }
	(rule__CaseStat__OptionAssignment_1)
	{ after(grammarAccess.getCaseStatAccess().getOptionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStat__Group__2__Impl
	rule__CaseStat__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getCaseStatAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStat__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStat__Group__3__Impl
	rule__CaseStat__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStat__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatAccess().getBodyAssignment_3()); }
	(rule__CaseStat__BodyAssignment_3)
	{ after(grammarAccess.getCaseStatAccess().getBodyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStat__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStat__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStat__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatAccess().getGroup_4()); }
	(rule__CaseStat__Group_4__0)
	{ after(grammarAccess.getCaseStatAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStat__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStat__Group_4__0__Impl
	rule__CaseStat__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStat__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatAccess().getBreakKeyword_4_0()); }
	'break'
	{ after(grammarAccess.getCaseStatAccess().getBreakKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStat__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseStat__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStat__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseStatAccess().getSemicolonKeyword_4_1()); }
	';'
	{ after(grammarAccess.getCaseStatAccess().getSemicolonKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StartProcStat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StartProcStat__Group__0__Impl
	rule__StartProcStat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StartProcStat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartProcStatAccess().getStartKeyword_0()); }
	'start'
	{ after(grammarAccess.getStartProcStatAccess().getStartKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StartProcStat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StartProcStat__Group__1__Impl
	rule__StartProcStat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StartProcStat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartProcStatAccess().getProcIdAssignment_1()); }
	(rule__StartProcStat__ProcIdAssignment_1)
	{ after(grammarAccess.getStartProcStatAccess().getProcIdAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StartProcStat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StartProcStat__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StartProcStat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartProcStatAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getStartProcStatAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StopProcStat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StopProcStat__Group__0__Impl
	rule__StopProcStat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StopProcStat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopProcStatAccess().getStopProcStatAction_0()); }
	()
	{ after(grammarAccess.getStopProcStatAccess().getStopProcStatAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StopProcStat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StopProcStat__Group__1__Impl
	rule__StopProcStat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StopProcStat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopProcStatAccess().getStopKeyword_1()); }
	'stop'
	{ after(grammarAccess.getStopProcStatAccess().getStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StopProcStat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StopProcStat__Group__2__Impl
	rule__StopProcStat__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StopProcStat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopProcStatAccess().getProcIdAssignment_2()); }
	(rule__StopProcStat__ProcIdAssignment_2)?
	{ after(grammarAccess.getStopProcStatAccess().getProcIdAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StopProcStat__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StopProcStat__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StopProcStat__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStopProcStatAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getStopProcStatAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ErrorStat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorStat__Group__0__Impl
	rule__ErrorStat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorStat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorStatAccess().getErrorStatAction_0()); }
	()
	{ after(grammarAccess.getErrorStatAccess().getErrorStatAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorStat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorStat__Group__1__Impl
	rule__ErrorStat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorStat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorStatAccess().getErrorKeyword_1()); }
	'error'
	{ after(grammarAccess.getErrorStatAccess().getErrorKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorStat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorStat__Group__2__Impl
	rule__ErrorStat__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorStat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorStatAccess().getProcIdAssignment_2()); }
	(rule__ErrorStat__ProcIdAssignment_2)?
	{ after(grammarAccess.getErrorStatAccess().getProcIdAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorStat__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ErrorStat__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorStat__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getErrorStatAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getErrorStatAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStat__Group__0__Impl
	rule__LoopStat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatAccess().getLoopKeyword_0()); }
	'loop'
	{ after(grammarAccess.getLoopStatAccess().getLoopKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStat__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getLoopStatAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RestartStat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RestartStat__Group__0__Impl
	rule__RestartStat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RestartStat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRestartStatAccess().getRestartKeyword_0()); }
	'restart'
	{ after(grammarAccess.getRestartStatAccess().getRestartKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RestartStat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RestartStat__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RestartStat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRestartStatAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getRestartStatAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ResetStat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ResetStat__Group__0__Impl
	rule__ResetStat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResetStat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResetStatAccess().getResetKeyword_0()); }
	'reset'
	{ after(grammarAccess.getResetStatAccess().getResetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ResetStat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ResetStat__Group__1__Impl
	rule__ResetStat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ResetStat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResetStatAccess().getTimeoutKeyword_1()); }
	'timeout'
	{ after(grammarAccess.getResetStatAccess().getTimeoutKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ResetStat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ResetStat__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResetStat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResetStatAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getResetStatAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetStateStat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetStateStat__Group__0__Impl
	rule__SetStateStat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetStateStat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetStateStatAccess().getSetStateStatAction_0()); }
	()
	{ after(grammarAccess.getSetStateStatAccess().getSetStateStatAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetStateStat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetStateStat__Group__1__Impl
	rule__SetStateStat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetStateStat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetStateStatAccess().getSetKeyword_1()); }
	'set'
	{ after(grammarAccess.getSetStateStatAccess().getSetKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetStateStat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetStateStat__Group__2__Impl
	rule__SetStateStat__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetStateStat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetStateStatAccess().getAlternatives_2()); }
	(rule__SetStateStat__Alternatives_2)
	{ after(grammarAccess.getSetStateStatAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetStateStat__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetStateStat__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetStateStat__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetStateStatAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getSetStateStatAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SetStateStat__Group_2_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetStateStat__Group_2_0__0__Impl
	rule__SetStateStat__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetStateStat__Group_2_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetStateStatAccess().getStateKeyword_2_0_0()); }
	'state'
	{ after(grammarAccess.getSetStateStatAccess().getStateKeyword_2_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetStateStat__Group_2_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SetStateStat__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetStateStat__Group_2_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSetStateStatAccess().getStateIdAssignment_2_0_1()); }
	(rule__SetStateStat__StateIdAssignment_2_0_1)
	{ after(grammarAccess.getSetStateStatAccess().getStateIdAssignment_2_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getReturnTypeAssignment_0()); }
	(rule__Function__ReturnTypeAssignment_0)
	{ after(grammarAccess.getFunctionAccess().getReturnTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
	(rule__Function__NameAssignment_1)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getArgTypesAssignment_3()); }
	(rule__Function__ArgTypesAssignment_3)
	{ after(grammarAccess.getFunctionAccess().getArgTypesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getGroup_4()); }
	(rule__Function__Group_4__0)*
	{ after(grammarAccess.getFunctionAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__5__Impl
	rule__Function__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getSemicolonKeyword_6()); }
	';'
	{ after(grammarAccess.getFunctionAccess().getSemicolonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_4__0__Impl
	rule__Function__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getFunctionAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getArgTypesAssignment_4_1()); }
	(rule__Function__ArgTypesAssignment_4_1)
	{ after(grammarAccess.getFunctionAccess().getArgTypesAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Register__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Register__Group__0__Impl
	rule__Register__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterAccess().getTypeAssignment_0()); }
	(rule__Register__TypeAssignment_0)
	{ after(grammarAccess.getRegisterAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Register__Group__1__Impl
	rule__Register__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterAccess().getNameAssignment_1()); }
	(rule__Register__NameAssignment_1)
	{ after(grammarAccess.getRegisterAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Register__Group__2__Impl
	rule__Register__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterAccess().getAddr1Assignment_2()); }
	(rule__Register__Addr1Assignment_2)
	{ after(grammarAccess.getRegisterAccess().getAddr1Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Register__Group__3__Impl
	rule__Register__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterAccess().getAddr2Assignment_3()); }
	(rule__Register__Addr2Assignment_3)
	{ after(grammarAccess.getRegisterAccess().getAddr2Assignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Register__Group__4__Impl
	rule__Register__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterAccess().getRegSizeAssignment_4()); }
	(rule__Register__RegSizeAssignment_4)
	{ after(grammarAccess.getRegisterAccess().getRegSizeAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Register__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRegisterAccess().getSemicolonKeyword_5()); }
	';'
	{ after(grammarAccess.getRegisterAccess().getSemicolonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Const__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Const__Group__0__Impl
	rule__Const__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstAccess().getConstKeyword_0()); }
	'const'
	{ after(grammarAccess.getConstAccess().getConstKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Const__Group__1__Impl
	rule__Const__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstAccess().getConstIdAssignment_1()); }
	(rule__Const__ConstIdAssignment_1)
	{ after(grammarAccess.getConstAccess().getConstIdAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Const__Group__2__Impl
	rule__Const__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstAccess().getConstValueAssignment_2()); }
	(rule__Const__ConstValueAssignment_2)
	{ after(grammarAccess.getConstAccess().getConstValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Const__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getConstAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group__0__Impl
	rule__Enum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getEnumKeyword_0()); }
	'enum'
	{ after(grammarAccess.getEnumAccess().getEnumKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group__1__Impl
	rule__Enum__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getEnumMembersAssignment_1()); }
	(rule__Enum__EnumMembersAssignment_1)
	{ after(grammarAccess.getEnumAccess().getEnumMembersAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group__2__Impl
	rule__Enum__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getGroup_2()); }
	(rule__Enum__Group_2__0)*
	{ after(grammarAccess.getEnumAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getEnumAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group_2__0__Impl
	rule__Enum__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getEnumAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enum__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumAccess().getEnumMembersAssignment_2_1()); }
	(rule__Enum__EnumMembersAssignment_2_1)
	{ after(grammarAccess.getEnumAccess().getEnumMembersAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumMember__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumMember__Group__0__Impl
	rule__EnumMember__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumMemberAccess().getNameAssignment_0()); }
	(rule__EnumMember__NameAssignment_0)
	{ after(grammarAccess.getEnumMemberAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumMember__Group__1__Impl
	rule__EnumMember__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumMemberAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getEnumMemberAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumMember__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumMemberAccess().getValueAssignment_2()); }
	(rule__EnumMember__ValueAssignment_2)
	{ after(grammarAccess.getEnumMemberAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InfixOp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InfixOp__Group__0__Impl
	rule__InfixOp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixOp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInfixOpAccess().getOpAssignment_0()); }
	(rule__InfixOp__OpAssignment_0)
	{ after(grammarAccess.getInfixOpAccess().getOpAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixOp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InfixOp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixOp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInfixOpAccess().getVarIdAssignment_1()); }
	(rule__InfixOp__VarIdAssignment_1)
	{ after(grammarAccess.getInfixOpAccess().getVarIdAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixOp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PostfixOp__Group__0__Impl
	rule__PostfixOp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostfixOpAccess().getVarIdAssignment_0()); }
	(rule__PostfixOp__VarIdAssignment_0)
	{ after(grammarAccess.getPostfixOpAccess().getVarIdAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PostfixOp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPostfixOpAccess().getOpAssignment_1()); }
	(rule__PostfixOp__OpAssignment_1)
	{ after(grammarAccess.getPostfixOpAccess().getOpAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getFuncIdAssignment_0()); }
	(rule__FunctionCall__FuncIdAssignment_0)
	{ after(grammarAccess.getFunctionCallAccess().getFuncIdAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getArgsAssignment_2()); }
	(rule__FunctionCall__ArgsAssignment_2)
	{ after(grammarAccess.getFunctionCallAccess().getArgsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__3__Impl
	rule__FunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGroup_3()); }
	(rule__FunctionCall__Group_3__0)*
	{ after(grammarAccess.getFunctionCallAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_3__0__Impl
	rule__FunctionCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_1()); }
	(rule__FunctionCall__ArgsAssignment_3_1)
	{ after(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__0__Impl
	rule__PrimaryExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__1__Impl
	rule__PrimaryExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getExprAssignment_2_1()); }
	(rule__PrimaryExpression__ExprAssignment_2_1)
	{ after(grammarAccess.getPrimaryExpressionAccess().getExprAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_4__0__Impl
	rule__UnaryExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getUnaryOpAssignment_4_0()); }
	(rule__UnaryExpression__UnaryOpAssignment_4_0)
	{ after(grammarAccess.getUnaryExpressionAccess().getUnaryOpAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getRestAssignment_4_1()); }
	(rule__UnaryExpression__RestAssignment_4_1)
	{ after(grammarAccess.getUnaryExpressionAccess().getRestAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CastExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CastExpression__Group_1__0__Impl
	rule__CastExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastExpressionAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getCastExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CastExpression__Group_1__1__Impl
	rule__CastExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastExpressionAccess().getTypeAssignment_1_1()); }
	(rule__CastExpression__TypeAssignment_1_1)
	{ after(grammarAccess.getCastExpressionAccess().getTypeAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CastExpression__Group_1__2__Impl
	rule__CastExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastExpressionAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getCastExpressionAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CastExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCastExpressionAccess().getRightAssignment_1_3()); }
	(rule__CastExpression__RightAssignment_1_3)
	{ after(grammarAccess.getCastExpressionAccess().getRightAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getCastExpressionParserRuleCall_0()); }
	ruleCastExpression
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getCastExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
	(rule__MultiplicativeExpression__Group_1__0)*
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__1__Impl
	rule__MultiplicativeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getMulOpAssignment_1_1()); }
	(rule__MultiplicativeExpression__MulOpAssignment_1_1)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getMulOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2()); }
	(rule__MultiplicativeExpression__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
	{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
	(rule__AdditiveExpression__Group_1__0)*
	{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__1__Impl
	rule__AdditiveExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getAddOpAssignment_1_1()); }
	(rule__AdditiveExpression__AddOpAssignment_1_1)
	{ after(grammarAccess.getAdditiveExpressionAccess().getAddOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getRighttAssignment_1_2()); }
	(rule__AdditiveExpression__RighttAssignment_1_2)
	{ after(grammarAccess.getAdditiveExpressionAccess().getRighttAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShiftExpression__Group__0__Impl
	rule__ShiftExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
	{ after(grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShiftExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftExpressionAccess().getGroup_1()); }
	(rule__ShiftExpression__Group_1__0)*
	{ after(grammarAccess.getShiftExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShiftExpression__Group_1__0__Impl
	rule__ShiftExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShiftExpression__Group_1__1__Impl
	rule__ShiftExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftExpressionAccess().getShiftOpAssignment_1_1()); }
	(rule__ShiftExpression__ShiftOpAssignment_1_1)
	{ after(grammarAccess.getShiftExpressionAccess().getShiftOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShiftExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftExpressionAccess().getRightAssignment_1_2()); }
	(rule__ShiftExpression__RightAssignment_1_2)
	{ after(grammarAccess.getShiftExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompareExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareExpression__Group__0__Impl
	rule__CompareExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareExpressionAccess().getShiftExpressionParserRuleCall_0()); }
	ruleShiftExpression
	{ after(grammarAccess.getCompareExpressionAccess().getShiftExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareExpressionAccess().getGroup_1()); }
	(rule__CompareExpression__Group_1__0)*
	{ after(grammarAccess.getCompareExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompareExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareExpression__Group_1__0__Impl
	rule__CompareExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareExpressionAccess().getCompareExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getCompareExpressionAccess().getCompareExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareExpression__Group_1__1__Impl
	rule__CompareExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareExpressionAccess().getCmpOpAssignment_1_1()); }
	(rule__CompareExpression__CmpOpAssignment_1_1)
	{ after(grammarAccess.getCompareExpressionAccess().getCmpOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareExpressionAccess().getRightAssignment_1_2()); }
	(rule__CompareExpression__RightAssignment_1_2)
	{ after(grammarAccess.getCompareExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getCompareExpressionParserRuleCall_0()); }
	ruleCompareExpression
	{ after(grammarAccess.getEqualityExpressionAccess().getCompareExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
	(rule__EqualityExpression__Group_1__0)*
	{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group_1__0__Impl
	rule__EqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group_1__1__Impl
	rule__EqualityExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getEqCmpOpAssignment_1_1()); }
	(rule__EqualityExpression__EqCmpOpAssignment_1_1)
	{ after(grammarAccess.getEqualityExpressionAccess().getEqCmpOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_2()); }
	(rule__EqualityExpression__RightAssignment_1_2)
	{ after(grammarAccess.getEqualityExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitAndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitAndExpression__Group__0__Impl
	rule__BitAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitAndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
	ruleEqualityExpression
	{ after(grammarAccess.getBitAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitAndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitAndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitAndExpressionAccess().getGroup_1()); }
	(rule__BitAndExpression__Group_1__0)*
	{ after(grammarAccess.getBitAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitAndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitAndExpression__Group_1__0__Impl
	rule__BitAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitAndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitAndExpressionAccess().getBitAndExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getBitAndExpressionAccess().getBitAndExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitAndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitAndExpression__Group_1__1__Impl
	rule__BitAndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitAndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitAndExpressionAccess().getBIT_ANDTerminalRuleCall_1_1()); }
	RULE_BIT_AND
	{ after(grammarAccess.getBitAndExpressionAccess().getBIT_ANDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitAndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitAndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitAndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitAndExpressionAccess().getRightAssignment_1_2()); }
	(rule__BitAndExpression__RightAssignment_1_2)
	{ after(grammarAccess.getBitAndExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitXorExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitXorExpression__Group__0__Impl
	rule__BitXorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitXorExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitXorExpressionAccess().getBitAndExpressionParserRuleCall_0()); }
	ruleBitAndExpression
	{ after(grammarAccess.getBitXorExpressionAccess().getBitAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitXorExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitXorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitXorExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitXorExpressionAccess().getGroup_1()); }
	(rule__BitXorExpression__Group_1__0)*
	{ after(grammarAccess.getBitXorExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitXorExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitXorExpression__Group_1__0__Impl
	rule__BitXorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitXorExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitXorExpressionAccess().getBitXorExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getBitXorExpressionAccess().getBitXorExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitXorExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitXorExpression__Group_1__1__Impl
	rule__BitXorExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitXorExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitXorExpressionAccess().getBIT_XORTerminalRuleCall_1_1()); }
	RULE_BIT_XOR
	{ after(grammarAccess.getBitXorExpressionAccess().getBIT_XORTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitXorExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitXorExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitXorExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitXorExpressionAccess().getRightAssignment_1_2()); }
	(rule__BitXorExpression__RightAssignment_1_2)
	{ after(grammarAccess.getBitXorExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitOrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitOrExpression__Group__0__Impl
	rule__BitOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitOrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitOrExpressionAccess().getBitXorExpressionParserRuleCall_0()); }
	ruleBitXorExpression
	{ after(grammarAccess.getBitOrExpressionAccess().getBitXorExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitOrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitOrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitOrExpressionAccess().getGroup_1()); }
	(rule__BitOrExpression__Group_1__0)*
	{ after(grammarAccess.getBitOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BitOrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitOrExpression__Group_1__0__Impl
	rule__BitOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitOrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitOrExpressionAccess().getBitOrExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getBitOrExpressionAccess().getBitOrExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitOrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitOrExpression__Group_1__1__Impl
	rule__BitOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitOrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitOrExpressionAccess().getBIT_ORTerminalRuleCall_1_1()); }
	RULE_BIT_OR
	{ after(grammarAccess.getBitOrExpressionAccess().getBIT_ORTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitOrExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BitOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitOrExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBitOrExpressionAccess().getRightAssignment_1_2()); }
	(rule__BitOrExpression__RightAssignment_1_2)
	{ after(grammarAccess.getBitOrExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalAndExpression__Group__0__Impl
	rule__LogicalAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalAndExpressionAccess().getBitOrExpressionParserRuleCall_0()); }
	ruleBitOrExpression
	{ after(grammarAccess.getLogicalAndExpressionAccess().getBitOrExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
	(rule__LogicalAndExpression__Group_1__0)*
	{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalAndExpression__Group_1__0__Impl
	rule__LogicalAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalAndExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalAndExpression__Group_1__1__Impl
	rule__LogicalAndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalAndExpressionAccess().getLOGICAL_ANDTerminalRuleCall_1_1()); }
	RULE_LOGICAL_AND
	{ after(grammarAccess.getLogicalAndExpressionAccess().getLOGICAL_ANDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalAndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalAndExpressionAccess().getRightAssignment_1_2()); }
	(rule__LogicalAndExpression__RightAssignment_1_2)
	{ after(grammarAccess.getLogicalAndExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalOrExpression__Group__0__Impl
	rule__LogicalOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
	ruleLogicalAndExpression
	{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
	(rule__LogicalOrExpression__Group_1__0)*
	{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalOrExpression__Group_1__0__Impl
	rule__LogicalOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalOrExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalOrExpression__Group_1__1__Impl
	rule__LogicalOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalOrExpressionAccess().getLOGICAL_ORTerminalRuleCall_1_1()); }
	RULE_LOGICAL_OR
	{ after(grammarAccess.getLogicalOrExpressionAccess().getLOGICAL_ORTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicalOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicalOrExpressionAccess().getRightAssignment_1_2()); }
	(rule__LogicalOrExpression__RightAssignment_1_2)
	{ after(grammarAccess.getLogicalOrExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentExpression__Group_1__0__Impl
	rule__AssignmentExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentExpressionAccess().getAssignVarAssignment_1_0()); }
	(rule__AssignmentExpression__AssignVarAssignment_1_0)
	{ after(grammarAccess.getAssignmentExpressionAccess().getAssignVarAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentExpression__Group_1__1__Impl
	rule__AssignmentExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentExpressionAccess().getAssignOpAssignment_1_1()); }
	(rule__AssignmentExpression__AssignOpAssignment_1_1)
	{ after(grammarAccess.getAssignmentExpressionAccess().getAssignOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentExpressionAccess().getExprAssignment_1_2()); }
	(rule__AssignmentExpression__ExprAssignment_1_2)
	{ after(grammarAccess.getAssignmentExpressionAccess().getExprAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CType__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_0__0__Impl
	rule__CType__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getCTypeAction_0_0()); }
	()
	{ after(grammarAccess.getCTypeAccess().getCTypeAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getVOID_C_TYPETerminalRuleCall_0_1()); }
	RULE_VOID_C_TYPE
	{ after(grammarAccess.getCTypeAccess().getVOID_C_TYPETerminalRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CType__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_1__0__Impl
	rule__CType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getCTypeAction_1_0()); }
	()
	{ after(grammarAccess.getCTypeAccess().getCTypeAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getFLOAT_C_TYPETerminalRuleCall_1_1()); }
	RULE_FLOAT_C_TYPE
	{ after(grammarAccess.getCTypeAccess().getFLOAT_C_TYPETerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CType__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_2__0__Impl
	rule__CType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getCTypeAction_2_0()); }
	()
	{ after(grammarAccess.getCTypeAccess().getCTypeAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getDOUBLE_C_TYPETerminalRuleCall_2_1()); }
	RULE_DOUBLE_C_TYPE
	{ after(grammarAccess.getCTypeAccess().getDOUBLE_C_TYPETerminalRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CType__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_3__0__Impl
	rule__CType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getCTypeAction_3_0()); }
	()
	{ after(grammarAccess.getCTypeAccess().getCTypeAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_3__1__Impl
	rule__CType__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getSignSpecAssignment_3_1()); }
	(rule__CType__SignSpecAssignment_3_1)?
	{ after(grammarAccess.getCTypeAccess().getSignSpecAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CType__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCTypeAccess().getAlternatives_3_2()); }
	(rule__CType__Alternatives_3_2)
	{ after(grammarAccess.getCTypeAccess().getAlternatives_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReflexType__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReflexType__Group_1__0__Impl
	rule__ReflexType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReflexType__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReflexTypeAccess().getReflexTypeAction_1_0()); }
	()
	{ after(grammarAccess.getReflexTypeAccess().getReflexTypeAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReflexType__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReflexType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReflexType__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReflexTypeAccess().getBOOL_TYPETerminalRuleCall_1_1()); }
	RULE_BOOL_TYPE
	{ after(grammarAccess.getReflexTypeAccess().getBOOL_TYPETerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Integer__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Integer__Group__0__Impl
	rule__Integer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerAccess().getValueAssignment_0()); }
	(rule__Integer__ValueAssignment_0)
	{ after(grammarAccess.getIntegerAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Integer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerAccess().getQualfierAssignment_1()); }
	(rule__Integer__QualfierAssignment_1)?
	{ after(grammarAccess.getIntegerAccess().getQualfierAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Time__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group__0__Impl
	rule__Time__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getTimeAction_0()); }
	()
	{ after(grammarAccess.getTimeAccess().getTimeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group__1__Impl
	rule__Time__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getAlternatives_1()); }
	(rule__Time__Alternatives_1)
	{ after(grammarAccess.getTimeAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group__2__Impl
	rule__Time__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getGroup_2()); }
	(rule__Time__Group_2__0)?
	{ after(grammarAccess.getTimeAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group__3__Impl
	rule__Time__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getGroup_3()); }
	(rule__Time__Group_3__0)?
	{ after(grammarAccess.getTimeAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group__4__Impl
	rule__Time__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getGroup_4()); }
	(rule__Time__Group_4__0)?
	{ after(grammarAccess.getTimeAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group__5__Impl
	rule__Time__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getGroup_5()); }
	(rule__Time__Group_5__0)?
	{ after(grammarAccess.getTimeAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group__6__Impl
	rule__Time__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getGroup_6()); }
	(rule__Time__Group_6__0)?
	{ after(grammarAccess.getTimeAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group__7__Impl
	rule__Time__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getGroup_7()); }
	(rule__Time__Group_7__0)?
	{ after(grammarAccess.getTimeAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getGroup_8()); }
	(rule__Time__Group_8__0)?
	{ after(grammarAccess.getTimeAccess().getGroup_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Time__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group_2__0__Impl
	rule__Time__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getDAYTerminalRuleCall_2_0()); }
	RULE_DAY
	{ after(grammarAccess.getTimeAccess().getDAYTerminalRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getDaysAssignment_2_1()); }
	(rule__Time__DaysAssignment_2_1)
	{ after(grammarAccess.getTimeAccess().getDaysAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Time__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group_3__0__Impl
	rule__Time__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getHOURTerminalRuleCall_3_0()); }
	RULE_HOUR
	{ after(grammarAccess.getTimeAccess().getHOURTerminalRuleCall_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getHoursAssignment_3_1()); }
	(rule__Time__HoursAssignment_3_1)
	{ after(grammarAccess.getTimeAccess().getHoursAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Time__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group_4__0__Impl
	rule__Time__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getMINUTETerminalRuleCall_4_0()); }
	RULE_MINUTE
	{ after(grammarAccess.getTimeAccess().getMINUTETerminalRuleCall_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getMinutesAssignment_4_1()); }
	(rule__Time__MinutesAssignment_4_1)
	{ after(grammarAccess.getTimeAccess().getMinutesAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Time__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group_5__0__Impl
	rule__Time__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getSECONDTerminalRuleCall_5_0()); }
	RULE_SECOND
	{ after(grammarAccess.getTimeAccess().getSECONDTerminalRuleCall_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getSecondsAssignment_5_1()); }
	(rule__Time__SecondsAssignment_5_1)
	{ after(grammarAccess.getTimeAccess().getSecondsAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Time__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group_6__0__Impl
	rule__Time__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getMILISECONDTerminalRuleCall_6_0()); }
	RULE_MILISECOND
	{ after(grammarAccess.getTimeAccess().getMILISECONDTerminalRuleCall_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getMilisAssignment_6_1()); }
	(rule__Time__MilisAssignment_6_1)
	{ after(grammarAccess.getTimeAccess().getMilisAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Time__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group_7__0__Impl
	rule__Time__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getMICROSECONDTerminalRuleCall_7_0()); }
	RULE_MICROSECOND
	{ after(grammarAccess.getTimeAccess().getMICROSECONDTerminalRuleCall_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getMicrosAssignment_7_1()); }
	(rule__Time__MicrosAssignment_7_1)
	{ after(grammarAccess.getTimeAccess().getMicrosAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Time__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group_8__0__Impl
	rule__Time__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getNANOSECONDTerminalRuleCall_8_0()); }
	RULE_NANOSECOND
	{ after(grammarAccess.getTimeAccess().getNANOSECONDTerminalRuleCall_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getNanosAssignment_8_1()); }
	(rule__Time__NanosAssignment_8_1)
	{ after(grammarAccess.getTimeAccess().getNanosAssignment_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__TicksAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getTicksTACTTerminalRuleCall_3_0()); }
		RULE_TACT
		{ after(grammarAccess.getProgramAccess().getTicksTACTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__ConstsAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getConstsConstParserRuleCall_4_0_0()); }
		ruleConst
		{ after(grammarAccess.getProgramAccess().getConstsConstParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__EnumsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getEnumsEnumParserRuleCall_4_1_0()); }
		ruleEnum
		{ after(grammarAccess.getProgramAccess().getEnumsEnumParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__FunctionsAssignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_4_2_0()); }
		ruleFunction
		{ after(grammarAccess.getProgramAccess().getFunctionsFunctionParserRuleCall_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__RegistersAssignment_4_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getRegistersRegisterParserRuleCall_4_3_0()); }
		ruleRegister
		{ after(grammarAccess.getProgramAccess().getRegistersRegisterParserRuleCall_4_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__ProcessesAssignment_4_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getProcessesProcessParserRuleCall_4_4_0()); }
		ruleProcess
		{ after(grammarAccess.getProgramAccess().getProcessesProcessParserRuleCall_4_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProcessAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__VariableAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessAccess().getVariableVariableParserRuleCall_3_0()); }
		ruleVariable
		{ after(grammarAccess.getProcessAccess().getVariableVariableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__StatesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessAccess().getStatesStateParserRuleCall_4_0()); }
		ruleState
		{ after(grammarAccess.getProcessAccess().getStatesStateParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedVariable__ProcIdAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportedVariableAccess().getProcIdIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getImportedVariableAccess().getProcIdIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedVariable__VarNamesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportedVariableAccess().getVarNamesIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getImportedVariableAccess().getVarNamesIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVariable__VisibilityAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclaredVariableAccess().getVisibilityVisibilityParserRuleCall_1_0()); }
		ruleVisibility
		{ after(grammarAccess.getDeclaredVariableAccess().getVisibilityVisibilityParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPhysicalVariableAccess().getTypeIntegerTypeParserRuleCall_0_0()); }
		ruleIntegerType
		{ after(grammarAccess.getPhysicalVariableAccess().getTypeIntegerTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPhysicalVariableAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPhysicalVariableAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__PortsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPhysicalVariableAccess().getPortsRegisterPortParserRuleCall_4_0()); }
		ruleRegisterPort
		{ after(grammarAccess.getPhysicalVariableAccess().getPortsRegisterPortParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalVariable__PortsAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPhysicalVariableAccess().getPortsRegisterPortParserRuleCall_5_1_0()); }
		ruleRegisterPort
		{ after(grammarAccess.getPhysicalVariableAccess().getPortsRegisterPortParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisterPort__RegNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterPortAccess().getRegNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getRegisterPortAccess().getRegNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RegisterPort__PortAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterPortAccess().getPortIntegerParserRuleCall_2_0()); }
		ruleInteger
		{ after(grammarAccess.getRegisterPortAccess().getPortIntegerParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramVariable__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramVariableAccess().getTypeReflexTypeParserRuleCall_0_0()); }
		ruleReflexType
		{ after(grammarAccess.getProgramVariableAccess().getTypeReflexTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProgramVariable__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramVariableAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getProgramVariableAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visibility__LOCALAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVisibilityAccess().getLOCALLocalKeyword_0_0()); }
		(
			{ before(grammarAccess.getVisibilityAccess().getLOCALLocalKeyword_0_0()); }
			'local'
			{ after(grammarAccess.getVisibilityAccess().getLOCALLocalKeyword_0_0()); }
		)
		{ after(grammarAccess.getVisibilityAccess().getLOCALLocalKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visibility__GLOBALAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVisibilityAccess().getGLOBALGlobalKeyword_1_0()); }
		(
			{ before(grammarAccess.getVisibilityAccess().getGLOBALGlobalKeyword_1_0()); }
			'global'
			{ after(grammarAccess.getVisibilityAccess().getGLOBALGlobalKeyword_1_0()); }
		)
		{ after(grammarAccess.getVisibilityAccess().getGLOBALGlobalKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visibility__SHAREDAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVisibilityAccess().getSHAREDSharedKeyword_2_0_0()); }
		(
			{ before(grammarAccess.getVisibilityAccess().getSHAREDSharedKeyword_2_0_0()); }
			'shared'
			{ after(grammarAccess.getVisibilityAccess().getSHAREDSharedKeyword_2_0_0()); }
		)
		{ after(grammarAccess.getVisibilityAccess().getSHAREDSharedKeyword_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Visibility__SharingProcsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVisibilityAccess().getSharingProcsIDTerminalRuleCall_2_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVisibilityAccess().getSharingProcsIDTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__StateFunctionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getStateFunctionStateFunctionParserRuleCall_3_0()); }
		ruleStateFunction
		{ after(grammarAccess.getStateAccess().getStateFunctionStateFunctionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__TimeoutFunctionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getTimeoutFunctionTimeoutFunctionParserRuleCall_4_0()); }
		ruleTimeoutFunction
		{ after(grammarAccess.getStateAccess().getTimeoutFunctionTimeoutFunctionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateFunction__StatementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateFunctionAccess().getStatementsBodyParserRuleCall_1_0()); }
		ruleBody
		{ after(grammarAccess.getStateFunctionAccess().getStatementsBodyParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeoutFunction__TimeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeoutFunctionAccess().getTimeTimeParserRuleCall_1_0()); }
		ruleTime
		{ after(grammarAccess.getTimeoutFunctionAccess().getTimeTimeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeoutFunction__BodyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeoutFunctionAccess().getBodyBodyParserRuleCall_2_0()); }
		ruleBody
		{ after(grammarAccess.getTimeoutFunctionAccess().getBodyBodyParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__StatementsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getStatementsBodyParserRuleCall_1_2_0()); }
		ruleBody
		{ after(grammarAccess.getBodyAccess().getStatementsBodyParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__StatementsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getStatementsStartProcStatParserRuleCall_2_0()); }
		ruleStartProcStat
		{ after(grammarAccess.getBodyAccess().getStatementsStartProcStatParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getStatementsStopProcStatParserRuleCall_3_0()); }
		ruleStopProcStat
		{ after(grammarAccess.getBodyAccess().getStatementsStopProcStatParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__StatementsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getStatementsErrorStatParserRuleCall_4_0()); }
		ruleErrorStat
		{ after(grammarAccess.getBodyAccess().getStatementsErrorStatParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__LoopAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getLoopLoopStatParserRuleCall_5_0()); }
		ruleLoopStat
		{ after(grammarAccess.getBodyAccess().getLoopLoopStatParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__RestartAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getRestartRestartStatParserRuleCall_6_0()); }
		ruleRestartStat
		{ after(grammarAccess.getBodyAccess().getRestartRestartStatParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__ResetAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getResetResetStatParserRuleCall_7_0()); }
		ruleResetStat
		{ after(grammarAccess.getBodyAccess().getResetResetStatParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__StatementsAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getStatementsSetStateStatParserRuleCall_8_0()); }
		ruleSetStateStat
		{ after(grammarAccess.getBodyAccess().getStatementsSetStateStatParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__StatementsAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getStatementsIfElseStatParserRuleCall_9_0()); }
		ruleIfElseStat
		{ after(grammarAccess.getBodyAccess().getStatementsIfElseStatParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__StatementsAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getStatementsSwitchStatParserRuleCall_10_0()); }
		ruleSwitchStat
		{ after(grammarAccess.getBodyAccess().getStatementsSwitchStatParserRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__StatementsAssignment_11_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getStatementsExpressionParserRuleCall_11_0_0()); }
		ruleExpression
		{ after(grammarAccess.getBodyAccess().getStatementsExpressionParserRuleCall_11_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStat__CondAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseStatAccess().getCondExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getIfElseStatAccess().getCondExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStat__ThenAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseStatAccess().getThenBodyParserRuleCall_4_0()); }
		ruleBody
		{ after(grammarAccess.getIfElseStatAccess().getThenBodyParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStat__ElseAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseStatAccess().getElseBodyParserRuleCall_5_1_0()); }
		ruleBody
		{ after(grammarAccess.getIfElseStatAccess().getElseBodyParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStat__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchStatAccess().getExprExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getSwitchStatAccess().getExprExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStat__OptionsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchStatAccess().getOptionsCaseStatParserRuleCall_5_0()); }
		ruleCaseStat
		{ after(grammarAccess.getSwitchStatAccess().getOptionsCaseStatParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStat__OptionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseStatAccess().getOptionIntegerParserRuleCall_1_0()); }
		ruleInteger
		{ after(grammarAccess.getCaseStatAccess().getOptionIntegerParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStat__BodyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseStatAccess().getBodyBodyParserRuleCall_3_0()); }
		ruleBody
		{ after(grammarAccess.getCaseStatAccess().getBodyBodyParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StartProcStat__ProcIdAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStartProcStatAccess().getProcIdIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getStartProcStatAccess().getProcIdIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StopProcStat__ProcIdAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStopProcStatAccess().getProcIdIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getStopProcStatAccess().getProcIdIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ErrorStat__ProcIdAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getErrorStatAccess().getProcIdIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getErrorStatAccess().getProcIdIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetStateStat__StateIdAssignment_2_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetStateStatAccess().getStateIdIDTerminalRuleCall_2_0_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSetStateStatAccess().getStateIdIDTerminalRuleCall_2_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SetStateStat__NextAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSetStateStatAccess().getNextNextKeyword_2_1_0()); }
		(
			{ before(grammarAccess.getSetStateStatAccess().getNextNextKeyword_2_1_0()); }
			'next'
			{ after(grammarAccess.getSetStateStatAccess().getNextNextKeyword_2_1_0()); }
		)
		{ after(grammarAccess.getSetStateStatAccess().getNextNextKeyword_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ReturnTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getReturnTypeCTypeParserRuleCall_0_0()); }
		ruleCType
		{ after(grammarAccess.getFunctionAccess().getReturnTypeCTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ArgTypesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getArgTypesCTypeParserRuleCall_3_0()); }
		ruleCType
		{ after(grammarAccess.getFunctionAccess().getArgTypesCTypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ArgTypesAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getArgTypesCTypeParserRuleCall_4_1_0()); }
		ruleCType
		{ after(grammarAccess.getFunctionAccess().getArgTypesCTypeParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getTypeRegisterTypeEnumRuleCall_0_0()); }
		ruleRegisterType
		{ after(grammarAccess.getRegisterAccess().getTypeRegisterTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRegisterAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Addr1Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getAddr1IntegerParserRuleCall_2_0()); }
		ruleInteger
		{ after(grammarAccess.getRegisterAccess().getAddr1IntegerParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__Addr2Assignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getAddr2IntegerParserRuleCall_3_0()); }
		ruleInteger
		{ after(grammarAccess.getRegisterAccess().getAddr2IntegerParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Register__RegSizeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegisterAccess().getRegSizeREG_SIZETerminalRuleCall_4_0()); }
		RULE_REG_SIZE
		{ after(grammarAccess.getRegisterAccess().getRegSizeREG_SIZETerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__ConstIdAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstAccess().getConstIdIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConstAccess().getConstIdIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Const__ConstValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstAccess().getConstValueExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getConstAccess().getConstValueExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__EnumMembersAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumAccess().getEnumMembersEnumMemberParserRuleCall_1_0()); }
		ruleEnumMember
		{ after(grammarAccess.getEnumAccess().getEnumMembersEnumMemberParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__EnumMembersAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumAccess().getEnumMembersEnumMemberParserRuleCall_2_1_0()); }
		ruleEnumMember
		{ after(grammarAccess.getEnumAccess().getEnumMembersEnumMemberParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumMemberAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getEnumMemberAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMember__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumMemberAccess().getValueExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getEnumMemberAccess().getValueExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixOp__OpAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInfixOpAccess().getOpInfixPostfixOpEnumRuleCall_0_0()); }
		ruleInfixPostfixOp
		{ after(grammarAccess.getInfixOpAccess().getOpInfixPostfixOpEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixOp__VarIdAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInfixOpAccess().getVarIdIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getInfixOpAccess().getVarIdIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOp__VarIdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPostfixOpAccess().getVarIdIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getPostfixOpAccess().getVarIdIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOp__OpAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPostfixOpAccess().getOpInfixPostfixOpEnumRuleCall_1_0()); }
		ruleInfixPostfixOp
		{ after(grammarAccess.getPostfixOpAccess().getOpInfixPostfixOpEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FuncIdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getFuncIdIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionCallAccess().getFuncIdIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_1_0()); }
		ruleExpression
		{ after(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__VarIdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getVarIdIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getPrimaryExpressionAccess().getVarIdIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__LiteralAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralIntegerParserRuleCall_1_0()); }
		ruleInteger
		{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralIntegerParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ExprAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getExprExpressionParserRuleCall_2_1_0()); }
		ruleExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getExprExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__UnaryOpAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getUnaryOpUnaryOpEnumRuleCall_4_0_0()); }
		ruleUnaryOp
		{ after(grammarAccess.getUnaryExpressionAccess().getUnaryOpUnaryOpEnumRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__RestAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getRestCastExpressionParserRuleCall_4_1_0()); }
		ruleCastExpression
		{ after(grammarAccess.getUnaryExpressionAccess().getRestCastExpressionParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__TypeAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCastExpressionAccess().getTypeReflexTypeParserRuleCall_1_1_0()); }
		ruleReflexType
		{ after(grammarAccess.getCastExpressionAccess().getTypeReflexTypeParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CastExpression__RightAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCastExpressionAccess().getRightCastExpressionParserRuleCall_1_3_0()); }
		ruleCastExpression
		{ after(grammarAccess.getCastExpressionAccess().getRightCastExpressionParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__MulOpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getMulOpMultiplicativeOpEnumRuleCall_1_1_0()); }
		ruleMultiplicativeOp
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getMulOpMultiplicativeOpEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightCastExpressionParserRuleCall_1_2_0()); }
		ruleCastExpression
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightCastExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__AddOpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getAddOpAdditiveOpEnumRuleCall_1_1_0()); }
		ruleAdditiveOp
		{ after(grammarAccess.getAdditiveExpressionAccess().getAddOpAdditiveOpEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RighttAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getRighttAdditiveExpressionParserRuleCall_1_2_0()); }
		ruleAdditiveExpression
		{ after(grammarAccess.getAdditiveExpressionAccess().getRighttAdditiveExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__ShiftOpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShiftExpressionAccess().getShiftOpShiftOpEnumRuleCall_1_1_0()); }
		ruleShiftOp
		{ after(grammarAccess.getShiftExpressionAccess().getShiftOpShiftOpEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShiftExpressionAccess().getRightShiftExpressionParserRuleCall_1_2_0()); }
		ruleShiftExpression
		{ after(grammarAccess.getShiftExpressionAccess().getRightShiftExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__CmpOpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareExpressionAccess().getCmpOpCompareOpEnumRuleCall_1_1_0()); }
		ruleCompareOp
		{ after(grammarAccess.getCompareExpressionAccess().getCmpOpCompareOpEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareExpressionAccess().getRightCompareExpressionParserRuleCall_1_2_0()); }
		ruleCompareExpression
		{ after(grammarAccess.getCompareExpressionAccess().getRightCompareExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__EqCmpOpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getEqCmpOpCompareEqOpEnumRuleCall_1_1_0()); }
		ruleCompareEqOp
		{ after(grammarAccess.getEqualityExpressionAccess().getEqCmpOpCompareEqOpEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getRightEqualityExpressionParserRuleCall_1_2_0()); }
		ruleEqualityExpression
		{ after(grammarAccess.getEqualityExpressionAccess().getRightEqualityExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitAndExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitAndExpressionAccess().getRightBitAndExpressionParserRuleCall_1_2_0()); }
		ruleBitAndExpression
		{ after(grammarAccess.getBitAndExpressionAccess().getRightBitAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitXorExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitXorExpressionAccess().getRightBitXorExpressionParserRuleCall_1_2_0()); }
		ruleBitXorExpression
		{ after(grammarAccess.getBitXorExpressionAccess().getRightBitXorExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BitOrExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBitOrExpressionAccess().getRightBitOrExpressionParserRuleCall_1_2_0()); }
		ruleBitOrExpression
		{ after(grammarAccess.getBitOrExpressionAccess().getRightBitOrExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalAndExpressionAccess().getRightLogicalAndExpressionParserRuleCall_1_2_0()); }
		ruleLogicalAndExpression
		{ after(grammarAccess.getLogicalAndExpressionAccess().getRightLogicalAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalOrExpressionAccess().getRightLogicalOrExpressionParserRuleCall_1_2_0()); }
		ruleLogicalOrExpression
		{ after(grammarAccess.getLogicalOrExpressionAccess().getRightLogicalOrExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__AssignVarAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentExpressionAccess().getAssignVarIDTerminalRuleCall_1_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAssignmentExpressionAccess().getAssignVarIDTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__AssignOpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentExpressionAccess().getAssignOpAssignOperatorEnumRuleCall_1_1_0()); }
		ruleAssignOperator
		{ after(grammarAccess.getAssignmentExpressionAccess().getAssignOpAssignOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpression__ExprAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentExpressionAccess().getExprLogicalOrExpressionParserRuleCall_1_2_0()); }
		ruleLogicalOrExpression
		{ after(grammarAccess.getAssignmentExpressionAccess().getExprLogicalOrExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CType__SignSpecAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCTypeAccess().getSignSpecCTypeSignSpecEnumRuleCall_3_1_0()); }
		ruleCTypeSignSpec
		{ after(grammarAccess.getCTypeAccess().getSignSpecCTypeSignSpecEnumRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerAccess().getValueAlternatives_0_0()); }
		(rule__Integer__ValueAlternatives_0_0)
		{ after(grammarAccess.getIntegerAccess().getValueAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__QualfierAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerAccess().getQualfierAlternatives_1_0()); }
		(rule__Integer__QualfierAlternatives_1_0)
		{ after(grammarAccess.getIntegerAccess().getQualfierAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__DaysAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeAccess().getDaysDECIMALTerminalRuleCall_2_1_0()); }
		RULE_DECIMAL
		{ after(grammarAccess.getTimeAccess().getDaysDECIMALTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__HoursAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeAccess().getHoursDECIMALTerminalRuleCall_3_1_0()); }
		RULE_DECIMAL
		{ after(grammarAccess.getTimeAccess().getHoursDECIMALTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__MinutesAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeAccess().getMinutesDECIMALTerminalRuleCall_4_1_0()); }
		RULE_DECIMAL
		{ after(grammarAccess.getTimeAccess().getMinutesDECIMALTerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__SecondsAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeAccess().getSecondsDECIMALTerminalRuleCall_5_1_0()); }
		RULE_DECIMAL
		{ after(grammarAccess.getTimeAccess().getSecondsDECIMALTerminalRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__MilisAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeAccess().getMilisDECIMALTerminalRuleCall_6_1_0()); }
		RULE_DECIMAL
		{ after(grammarAccess.getTimeAccess().getMilisDECIMALTerminalRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__MicrosAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeAccess().getMicrosDECIMALTerminalRuleCall_7_1_0()); }
		RULE_DECIMAL
		{ after(grammarAccess.getTimeAccess().getMicrosDECIMALTerminalRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__NanosAssignment_8_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeAccess().getNanosDECIMALTerminalRuleCall_8_1_0()); }
		RULE_DECIMAL
		{ after(grammarAccess.getTimeAccess().getNanosDECIMALTerminalRuleCall_8_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_LOGICAL_OR : '||';

RULE_LOGICAL_AND : '&&';

RULE_BIT_OR : '|';

RULE_BIT_XOR : '^';

RULE_BIT_AND : '&';

RULE_VOID_C_TYPE : 'void';

RULE_FLOAT_C_TYPE : 'float';

RULE_DOUBLE_C_TYPE : 'double';

RULE_SHORT_C_TYPE : 'short';

RULE_INT_C_TYPE : 'int';

RULE_LONG_C_TYPE : 'long';

RULE_BOOL_TYPE : 'bool';

RULE_TACT : 'tact';

RULE_REG_SIZE : ('8'|'16');

RULE_DECIMAL : '1'..'9' ('0'..'9')*;

RULE_OCTAL : '0' ('0'..'7')*;

RULE_HEX : '0' ('x'|'X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_LONG : ('L'|'l');

RULE_UNSIGNED : ('U'|'u');

RULE_DAY : ('D'|'d');

RULE_HOUR : ('H'|'h');

RULE_MINUTE : ('M'|'m');

RULE_SECOND : ('S'|'s');

RULE_MILISECOND : ('MS'|'ms');

RULE_MICROSECOND : ('US'|'us');

RULE_NANOSECOND : ('NS'|'ns');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
