package ru.iaie.reflex.generator.r2c.arduino;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import ru.iaie.reflex.generator.r2c.common.R2CFileGenerator;

@SuppressWarnings("all")
public class ArduinoFileGenerator extends R2CFileGenerator {
  @Override
  public String getRootDirName() {
    return "arduino";
  }
  
  public ArduinoFileGenerator(final Resource resource, final IFileSystemAccess2 fsa) {
    super(resource, fsa);
  }
  
  @Override
  public void generateBuildFiles() {
  }
  
  @Override
  public void generatePlatformImplementations() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#include <avr/io.h>");
    _builder.newLine();
    _builder.append("#include <avr/interrupt.h>");
    _builder.newLine();
    _builder.append("#include \"../lib/platform.h\"");
    _builder.newLine();
    _builder.append("#include \"../generated/xvar.h\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// Atmega 368p");
    _builder.newLine();
    _builder.append("#ifndef F_CPU");
    _builder.newLine();
    _builder.append("#define F_CPU 16000000UL");
    _builder.newLine();
    _builder.append("#endif");
    _builder.newLine();
    _builder.newLine();
    _builder.append("static volatile unsigned long ovf_cnt = 0;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void Init_Time() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//Init timer0");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("TCCR0B = (1 << CS00) | (1 << CS02); // /1024 prescaler");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("TIMSK0 = (1 << TOIE0); // overflow interrupt");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("sei();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(R2CFileGenerator.CUR_TIME_NAME, "\t");
    _builder.append(" = 0;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append(R2CFileGenerator.NEXT_TIME_NAME, "\t");
    _builder.append(" = 0;");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void Init_IO() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("DDRB = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("DDRC = 0xFF;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("DDRD = 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("INT32_U Get_Time() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("unsigned char sreg = SREG;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("cli(); //start critical section");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("unsigned long ovf = ovf_cnt;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("unsigned long tcnt = TCNT0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("SREG = sreg; //end of critical section - no sei() needed");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//Timer has already overflown, but interrupt has yet to execute");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ((TIFR0 & _BV(TOV0)) && (tcnt < 255)) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ovf++;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("unsigned long fract;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("const unsigned long mfcpu = F_CPU/1000; // 1000 -> milliseconds");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("fract = ovf % mfcpu;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("fract <<= (8UL + 10UL); //8 -> 256 timer, 10 -> 1024 prescaler");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("fract /= mfcpu;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ovf /= mfcpu;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ovf <<= (8UL + 10UL);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ovf += fract;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return ovf + (tcnt << 10UL) / mfcpu;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//Timer0 overflow interrupt handler");
    _builder.newLine();
    _builder.append("ISR(TIMER0_OVF_vect) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ovf_cnt++;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("INT8 Read_Input8(int addr1, int addr2) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Ignore addr1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("switch (addr2) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case 0: ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return PINB;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case 1:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return PINC;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case 2:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return PIND;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("int Write_Output8(int addr1, int addr2, INT8 data) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Ignore addr1");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("switch (addr2) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case 0: ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("PORTB = data;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case 1:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("PORTC = data;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("case 2:");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("PORTD = data;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return 1;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("INT16 Read_Input16(int addr1, int addr2) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("int Write_Output16(int addr1, int addr2, INT16 data) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final String fileContent = _builder.toString();
    StringConcatenation _builder_1 = new StringConcatenation();
    String _rootDirName = this.getRootDirName();
    _builder_1.append(_rootDirName);
    _builder_1.append("/generated/platform.c");
    this.fsa.generateFile(_builder_1.toString(), fileContent);
  }
}
