program TankController {

clock 50;
const float T_H = 0.1;
const float X_MIN = 0.1;
const float X_MAX = 0.5;
const float H = 0.6;
const float U_MIN =0.0;
const float U_MAX	= 15.0;
const float DELTA_U = 3.0;
const float K_P   = 31.2634; 
const float K_I   = 0.4016;
//
enum  COM2CA { COM2CA_XD=1 }
enum CA2GUI { CA2GUI_X_LEVEL=0,
		CA2GUI_U_LEVEL=1 }

int GetNextMsgGUI(void);
int  GetMsgGUICode(void);	
float  GetFloatParamGUI(void);	
float  PortsToFloat(int , int , int , int);
int GetBit(float, int);
int  SendMsgFloatParamGUI(int, float);
int SendMsgIntParamGUI(int, int);

input X_BIT0_PORT  0 0 8;
input X_BIT1_PORT  0 1 8;
input X_BIT2_PORT  0 2 8;
input X_BIT3_PORT  0 3 8;


output U_BIT0_PORT  1 0 8;
output U_BIT1_PORT  1 1 8;
output U_BIT2_PORT  1 2 8;
output U_BIT3_PORT  1 3 8;

// Globals 
float U;
float X;
float XD;

int X_BIT0 = X_BIT0_PORT;
int X_BIT1 = X_BIT1_PORT;
int X_BIT2 = X_BIT2_PORT; 
int X_BIT3 = X_BIT3_PORT; 
	
int U_BIT0 = U_BIT0_PORT; 
int U_BIT1 = U_BIT1_PORT; 
int U_BIT2 = U_BIT2_PORT; 
int U_BIT3 = U_BIT3_PORT;

int msg_code;

process INIT {
	state InitialSetup {		
		start READ_ADC;
		start WRITE_DAC;
		start CONTROLLER;
		start Filter;
		start ReadInputMsgs;
		start Info;
		stop;
	}
}

process ReadInputMsgs {
	from process INIT XD;
	
	state StartReading looped {
    	if (GetNextMsgGUI()) {
			msg_code = GetMsgGUICode();
			if (msg_code == COM2CA_XD) {
				XD = GetFloatParamGUI();
			}
		}
	}
}

process READ_ADC {
	from process INIT X, X_BIT0, X_BIT1, X_BIT2, X_BIT3;
	
	state READ looped {
		X = PortsToFloat(X_BIT0, X_BIT1, X_BIT2, X_BIT3);
	/*	SendMsgFloatParamGUI(CA2GUI_X_LEVEL, X); */
	}
}	

/*Tank PI controller*/
/*X - water level */
/*XD - desired water level */
/*U - control signal */
/*U_MAX - maximum value of the control signal */
process CONTROLLER {
	from process INIT X, XD, U;
	float Sum;
	float E;

	state Init {
		Sum = 0.0;
		E = 0.0;
		set next;
	}
	
	state NormalPIControl {
		E = XD - X;
		Sum += E;
		/*control signal calculation*/
		/*numerical solution of a differential equation*/ 
		U = K_P * E + K_I * Sum * T_H;		
		
		if (U > U_MAX) U = U_MAX; 
		if (U < 0) U = 0.0;		
		if (X >= X_MAX) set state Overflow; 
		else if (X < X_MIN) set state LowLevel;
	}
	
	state Overflow {
		/* Emergency situation - water level is to high. Pump stop */  
		U = 0;  
		if (X < X_MAX) set state Init;			
	}
	
	state LowLevel {
	/* Emergency situation - water level is to low. Maximum pump power */  
		U = U_MAX;
		if (X > X_MIN) set state Init;	
	}
}


process Filter {
	from process INIT U;
	float U_Prev;
	
	state Init {
		U_Prev = U_MIN;
		set next;
	}
	
	state Filtering looped {
		if (U >= U_Prev) {
			if (U - U_Prev > DELTA_U ) {
				U = U_Prev + DELTA_U;
			}
		}
		else {
			if ( U_Prev - U > DELTA_U ) {
				U = U_Prev - DELTA_U;
			}
		}
		U_Prev = U;	
	}
}



process WRITE_DAC {
	from process INIT U, U_BIT0, U_BIT1, U_BIT2, U_BIT3;
	
	state WRITE looped {
		U_BIT0 = GetBit(U, 0);
		U_BIT1 = GetBit(U, 1);
		U_BIT2 = GetBit(U, 2);
		U_BIT3 = GetBit(U, 3);
	/*	SendMsgIntParamGUI(CA2GUI_U_LEVEL, U_BIT0);  */
	/*	SendMsgIntParamGUI(CA2GUI_U_LEVEL, U_BIT1);  */
	/*	SendMsgIntParamGUI(CA2GUI_U_LEVEL, U_BIT2);  */
	/*	SendMsgIntParamGUI(CA2GUI_U_LEVEL, U_BIT3);  */                                      
	}                                                
}

process Info {
	from process INIT X, U, U_BIT0, U_BIT1, U_BIT2, U_BIT3;
	state Idiling {
		timeout 50 {		
			/*SendMsgFloatParamGUI(CA2GUI_X_LEVEL, X); */
			SendMsgFloatParamGUI(CA2GUI_U_LEVEL, U); 
			set state Idiling;
		}
	}
}

}